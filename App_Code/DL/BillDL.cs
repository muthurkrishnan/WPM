using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using WPM.BusinessObjects;
using WPM.BusinessLayer;
using System.Windows.Forms;


namespace WPM.DataLayer
{
    class BillDL
    {
        #region Methods

        string m_sWORegId = "";

        //Jeyabalan Brnach

        public DataTable GetIssueAssets(int argCCId, int argContId, int argWORegId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            DataRow dr;
            DataTable dtRtn = new DataTable();

            DataTable dtIssue = new DataTable();
            DataTable dtReturn = new DataTable();
            DataView dv;
            DataRow[] drr;

            //sSql = "Select A.IssueId,B.SubAssetItemId,C.ComponentId,C.Code,C.SubAssetItemName,C.UnitId,B.Qty,A.IDate IssueDate,A.IssueNo,C.Rate from [" + BsfGlobal.g_sAssetDBName + "].dbo.IssueRegister A " +
            //       "Left Join [" + BsfGlobal.g_sAssetDBName + "].dbo.IssueTrans B on A.IssueId=B.IssueId and B.ChargeType='C' and B.Type='I' " +
            //       "Left join [" + BsfGlobal.g_sAssetDBName + "].dbo.SubAssetItem C on B.SubAssetItemId=C.SubAssetItemId " +
            //       "where A.CostCentreId=" + argCCId + " and A.ContractorId=" + argContId + " and A.Approve='Y' ";              

            dtRtn.Columns.Add("IssueId", typeof(int));
            dtRtn.Columns.Add("IssueNo", typeof(string));
            dtRtn.Columns.Add("WORegId", typeof(int));
            dtRtn.Columns.Add("AssetId", typeof(int));
            dtRtn.Columns.Add("IssueRecoverId", typeof(int));
            dtRtn.Columns.Add("Type", typeof(string));
            dtRtn.Columns.Add("Code", typeof(string));
            dtRtn.Columns.Add("AssetName", typeof(string));
            dtRtn.Columns.Add("Unit", typeof(string));
            dtRtn.Columns.Add("Qty", typeof(decimal));
            dtRtn.Columns.Add("FQty", typeof(decimal));
            dtRtn.Columns.Add("Rate", typeof(decimal));
            dtRtn.Columns.Add("Amount", typeof(decimal));
            dtRtn.Columns.Add("FromDate", typeof(DateTime));
            dtRtn.Columns.Add("ToDate", typeof(DateTime));
            dtRtn.Columns.Add("IssueDate", typeof(DateTime));

            try
            {
                //,A.Unit,A.Rate WOAssetTrans/WORegister
                sSql = "Select B.IssueId,B.IDate IssueDate,IssueNo,A.Unit,A.Rate,case when B.Type='I' then 'Issue' else 'Return' end AssetType  from WOAssetTrans A " +
                    "Left Join [" + BsfGlobal.g_sAssetDBName + "].dbo.IssueRegister B on A.WORegisterId=B.WORegId " +
                    "Where A.WORegisterId=" + argWORegId + " and B.CostCentreId=" + argCCId + " and B.ContractorId=" + argContId;
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        dr = dtRtn.NewRow();
                        dr["IssueId"] = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["IssueId"], CommFun.datatypes.vartypenumeric));
                        dr["WORegId"] = argWORegId;
                        dr["Unit"] = CommFun.IsNullCheck(dt.Rows[i]["Unit"], CommFun.datatypes.vartypestring).ToString();
                        dr["Rate"] = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["Rate"], CommFun.datatypes.vartypenumeric));
                        dr["Type"] = CommFun.IsNullCheck(dt.Rows[i]["AssetType"], CommFun.datatypes.vartypestring).ToString();
                        dr["IssueNo"] = CommFun.IsNullCheck(dt.Rows[i]["IssueNo"], CommFun.datatypes.vartypestring).ToString();
                        dr["IssueDate"] = Convert.ToDateTime(CommFun.IsNullCheck(dt.Rows[i]["IssueDate"], CommFun.datatypes.VarTypeDate));
                        dtRtn.Rows.Add(dr);
                    }
                }
                dt.Dispose();

                if (dtRtn.Rows.Count > 0)
                {
                    for (int j = 0; j < dtRtn.Rows.Count; j++)
                    {
                        sSql = "Select A.IssueTransId,A.SubAssetItemId AssetId,B.Code,'' Unit,B.SubAssetItemName AssetName from [" + BsfGlobal.g_sAssetDBName + "].dbo.IssueTrans A  " +
                            "Left join [" + BsfGlobal.g_sAssetDBName + "].dbo.SubAssetItem B on A.SubAssetItemId=B.SubAssetItemId " +
                            "where A.IssueId=" + Convert.ToInt32(CommFun.IsNullCheck(dtRtn.Rows[j]["IssueId"], CommFun.datatypes.vartypenumeric));
                        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                        dt = new DataTable();
                        sda.Fill(dt);
                        sda.Dispose();
                        if (dt.Rows.Count > 0)
                        {
                            for (int i = 0; i < dt.Rows.Count; i++)
                            {
                                dtRtn.Rows[j]["AssetId"] = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["AssetId"], CommFun.datatypes.vartypenumeric));
                                dtRtn.Rows[j]["Code"] = CommFun.IsNullCheck(dt.Rows[i]["Code"], CommFun.datatypes.vartypestring).ToString();                                
                                //dtRtn.Rows[j]["Unit"] = CommFun.IsNullCheck(dt.Rows[i]["Unit"], CommFun.datatypes.vartypestring).ToString();
                                dtRtn.Rows[j]["AssetName"] = CommFun.IsNullCheck(dt.Rows[i]["AssetName"], CommFun.datatypes.vartypestring).ToString();

                                sSql = "Select Qty,FromDate,IssueRecoverId from [" + BsfGlobal.g_sAssetDBName + "].dbo.IssueRecoverTrans  " +
                                    "where AssetId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["AssetId"], CommFun.datatypes.vartypenumeric)) + " and IssueTransId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["IssueTransId"], CommFun.datatypes.vartypenumeric));
                                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                                DataTable dtIRec = new DataTable();
                                sda.Fill(dtIRec);
                                sda.Dispose();
                                if (dtIRec.Rows.Count > 0)
                                {
                                    for (int k = 0; k < dtIRec.Rows.Count; k++)
                                    {
                                        dtRtn.Rows[j]["Qty"] = Convert.ToInt32(CommFun.IsNullCheck(dtIRec.Rows[k]["Qty"], CommFun.datatypes.vartypenumeric));
                                        dtRtn.Rows[j]["FromDate"] = Convert.ToDateTime(CommFun.IsNullCheck(dtIRec.Rows[k]["FromDate"], CommFun.datatypes.VarTypeDate));
                                        dtRtn.Rows[j]["IssueRecoverId"] = Convert.ToInt32(CommFun.IsNullCheck(dtIRec.Rows[k]["IssueRecoverId"], CommFun.datatypes.vartypenumeric));
                                    }
                                }
                                dtIRec.Dispose();

                                sSql = "Select A.Qty,A.ToDate,A.IssueRecoverId from [" + BsfGlobal.g_sAssetDBName + "].dbo.IssueReturnRecoverTrans  A " +
                                    "Left Join [" + BsfGlobal.g_sAssetDBName + "].dbo.IssueRecoverTrans B on A.IssueRecoverId=B.IssueRecoverId and A.IssueId=B.IssueId " +
                                    "where A.IssueId=" + Convert.ToInt32(CommFun.IsNullCheck(dtRtn.Rows[j]["IssueId"], CommFun.datatypes.vartypenumeric)) + " And  A.AssetId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["AssetId"], CommFun.datatypes.vartypenumeric)) + " and A.IssueTransId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["IssueTransId"], CommFun.datatypes.vartypenumeric));
                                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                                DataTable dtIRRec = new DataTable();
                                sda.Fill(dtIRRec);
                                sda.Dispose();
                                if (dtIRRec.Rows.Count > 0)
                                {
                                    for (int m = 0; m < dtIRRec.Rows.Count; m++)
                                    {
                                        dtRtn.Rows[j]["Qty"] = Convert.ToInt32(CommFun.IsNullCheck(dtIRRec.Rows[m]["Qty"], CommFun.datatypes.vartypenumeric));
                                        dtRtn.Rows[j]["ToDate"] = Convert.ToDateTime(CommFun.IsNullCheck(dtIRRec.Rows[m]["ToDate"], CommFun.datatypes.VarTypeDate));
                                        dtRtn.Rows[j]["IssueRecoverId"] = Convert.ToInt32(CommFun.IsNullCheck(dtIRRec.Rows[m]["IssueRecoverId"], CommFun.datatypes.vartypenumeric));
                                    }
                                }
                                dtIRRec.Dispose();
                            }
                        }
                        dt.Dispose();
                    }
                    //Get Days

                    //decimal dDays = 0;
                    //TimeSpan ts = d_EndDate - d_StartDate; //To Time-From Time
                    //dDays = Convert.ToDecimal(ts.TotalDays); 

                    //Get Hours

                    //DateTime t1 = Convert.ToDateTime(timeFrom.EditValue);//From Time
                    //DateTime t2 = Convert.ToDateTime(timeTo.EditValue);//To Time
                    //TimeSpan span = t2 - t1;                    
                    //int iHours=0;
                    //iHours=span.Hours;                    

                    //Get Months

                    //TimeSpan ts = d_EndDate - d_StartDate;
                    //double dDays = ts.TotalDays;
                    //d_MonthTotalDays = Convert.ToDecimal(dDays);
                }

            

                if (dtRtn.Rows.Count > 0)
                {
                    dv = new DataView(dtRtn);
                    dv.RowFilter = "Type='Issue'";
                    dtIssue = dv.ToTable();

                    dv = new DataView(dtRtn);
                    dv.RowFilter = "Type='Return'";
                    dtReturn = dv.ToTable();

                    if (dtReturn.Rows.Count > 0)
                    {
                        for (int j = 0; j < dtReturn.Rows.Count; j++)
                        {
                            drr = dtIssue.Select("IssueRecoverId=" + Convert.ToInt32(CommFun.IsNullCheck(dtReturn.Rows[j]["IssueRecoverId"], CommFun.datatypes.vartypenumeric)) + " and AssetId=" + Convert.ToInt32(CommFun.IsNullCheck(dtReturn.Rows[j]["AssetId"], CommFun.datatypes.vartypenumeric)) + " ");
                            if (drr.Length > 0)
                            {
                                if (CommFun.IsNullCheck(dtReturn.Rows[j]["Unit"], CommFun.datatypes.vartypestring).ToString() == "Hour")
                                {
                                    //Get Hours
                                    DateTime t1 = Convert.ToDateTime(CommFun.IsNullCheck(drr[0]["FromDate"], CommFun.datatypes.VarTypeDate));//From Time
                                    DateTime t2 = Convert.ToDateTime(CommFun.IsNullCheck(dtReturn.Rows[j]["ToDate"], CommFun.datatypes.VarTypeDate));//To Time
                                    TimeSpan span = t2 - t1;
                                    int iHours = 0;
                                    iHours = span.Hours;
                                    dtReturn.Rows[j]["FQty"] = (Convert.ToDecimal(CommFun.IsNullCheck(dtReturn.Rows[j]["Qty"], CommFun.datatypes.vartypenumeric)) * (Convert.ToDecimal(CommFun.IsNullCheck(dtReturn.Rows[j]["Qty"], CommFun.datatypes.vartypenumeric))*iHours));
                                }
                                else if (CommFun.IsNullCheck(dtReturn.Rows[j]["Unit"], CommFun.datatypes.vartypestring).ToString() == "Day")
                                {
                                    //Get Days
                                    decimal dDays = 0;
                                    TimeSpan ts = (Convert.ToDateTime(CommFun.IsNullCheck(dtReturn.Rows[j]["ToDate"], CommFun.datatypes.vartypenumeric))-Convert.ToDateTime(CommFun.IsNullCheck(drr[0]["FromDate"], CommFun.datatypes.VarTypeDate))); //To Time-From Time
                                    dDays = Convert.ToDecimal(ts.TotalDays);
                                    dtReturn.Rows[j]["FQty"] = (Convert.ToDecimal(CommFun.IsNullCheck(dtReturn.Rows[j]["Qty"], CommFun.datatypes.vartypenumeric)) * (Convert.ToDecimal(CommFun.IsNullCheck(dtReturn.Rows[j]["Qty"], CommFun.datatypes.vartypenumeric)) * dDays));

                                }
                                else if (CommFun.IsNullCheck(dtReturn.Rows[j]["Unit"], CommFun.datatypes.vartypestring).ToString() == "Month")
                                {
                                    //Get Months
                                    //int monthsApart = 0;
                                    int months = Convert.ToDateTime(CommFun.IsNullCheck(dtReturn.Rows[j]["ToDate"], CommFun.datatypes.VarTypeDate)).Subtract(Convert.ToDateTime(CommFun.IsNullCheck(drr[0]["FromDate"], CommFun.datatypes.VarTypeDate))).Days / 30;
                                    //monthsApart = 12 * (Convert.ToDateTime(CommFun.IsNullCheck(drr[0]["FromDate"], CommFun.datatypes.VarTypeDate)).Year - Convert.ToDateTime(CommFun.IsNullCheck(dtReturn.Rows[j]["ToDate"], CommFun.datatypes.vartypenumeric)).Year) + Convert.ToDateTime(CommFun.IsNullCheck(drr[0]["FromDate"], CommFun.datatypes.VarTypeDate)).Month - Convert.ToDateTime(CommFun.IsNullCheck(dtReturn.Rows[j]["ToDate"], CommFun.datatypes.vartypenumeric)).Month;
                                    dtReturn.Rows[j]["FQty"] = (Convert.ToDecimal(CommFun.IsNullCheck(dtReturn.Rows[j]["Qty"], CommFun.datatypes.vartypenumeric)) * (Convert.ToDecimal(CommFun.IsNullCheck(dtReturn.Rows[j]["Qty"], CommFun.datatypes.vartypenumeric)) * months));                                   
                                }
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {

            }
            return dtReturn;
        }
        public DataTable BillStageDetails(DateTime argFDate, DateTime argTDate, int argCCId, string argDBName)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            string sFDate = "";
            string sTDate = "";
            string sCVType = "";


            sFDate = String.Format("{0:dd-MMM-yyyy}", argFDate);
            sTDate = String.Format("{0:dd-MMM-yyyy}", argTDate.AddDays(1));

            try
            {
                sCVType = BsfGlobal.GetVoucherType(13);

                if (argDBName != "")
                {
                    sSql = "Select A.BillRegisterId,A.Edate,D.VendorName,A.BillAmount,((isnull(F.Level3,'')+' '+isnull(F.Level2,'')+' '+isnull(F.Level1,'')) +'--'+F.AnalysisHeadName) AnalysisHeadName,F.Amount,C.RefNo,C.RefDate,C.Amount PaidAmount,G.CostCentreName Project,(A.BillAmount-C.Amount) Balance ";
                    if (sCVType == "CC") { sSql = sSql + ",A.CCBVNo VNo  "; } else if (sCVType == "CO") { sSql = sSql + ",A.CompanyBVNo VNo"; } else { sSql = sSql + ",A.VNo VNo "; }

                    sSql = sSql = sSql + " from BillRegister A ";
                    sSql = sSql + "Inner Join [" + BsfGlobal.g_sFaDBName + "].dbo.BillRegister B on A.BillRegisterId = B.ReferenceId and RefTypeId=3 " +
                        "Inner Join [" + BsfGlobal.g_sFaDBName + "].dbo.Adjustment C on B.BillRegisterId = C.BillRegisterId " +
                        "Inner Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster D on A.ContractorId = D.VendorId " +
                        "Inner Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre G on A.CostCentreId = G.CostCentreId " +
                        "Join (Select B.BillRegisterId,A.AnalysisHeadId AnalysisId,case when E1.AnalysisHeadName Is null then '' Else E1.AnalysisHeadName End Level3,   " +
                        "case when D1.AnalysisHeadName Is null then '' Else D1.AnalysisHeadName End Level2,   " +
                        "case when C1.AnalysisHeadName Is null then '' Else C1.AnalysisHeadName End Level1, " +
                        "A1.AnalysisHeadName,Sum(A.Qty*B.Rate) as Amount from BillIOWTrans A " +
                        "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads A1 on A.AnalysisHeadId=A1.AnalysisID and A1.LastLevel=1 " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads C1 on A1.ParentID=C1.AnalysisID     " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads D1 on C1.ParentID=D1.AnalysisID     " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads E1 on D1.ParentID=E1.AnalysisID     " +
                        "Group by B.BillRegisterId,A.AnalysisHeadId,A1.AnalysisHeadName,E1.AnalysisHeadName,D1.AnalysisHeadName,C1.AnalysisHeadName " +
                        "Union All " +
                        "Select B.BillRegisterId,A.AnalysisId,case when E1.AnalysisHeadName Is null then '' Else E1.AnalysisHeadName End Level3,   " +
                        "case when D1.AnalysisHeadName Is null then '' Else D1.AnalysisHeadName End Level2,   " +
                        "case when C1.AnalysisHeadName Is null then '' Else C1.AnalysisHeadName End Level1, " +
                        "A1.AnalysisHeadName,Sum(A.Qty*B.Rate) as Amount from BillLabourTypeWBSTrans  A " +
                        "Inner Join BillLabourTypeTrans B on A.BillLabourTypeTransId=B.BillLabourTypeTransId " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads A1 on A.AnalysisId=A1.AnalysisID and A1.LastLevel=1 " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads C1 on A1.ParentID=C1.AnalysisID     " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads D1 on C1.ParentID=D1.AnalysisID     " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads E1 on D1.ParentID=E1.AnalysisID     " +
                        "Group by B.BillRegisterId,A.AnalysisId,A1.AnalysisHeadName,E1.AnalysisHeadName,D1.AnalysisHeadName,C1.AnalysisHeadName) F on A.BillRegisterId = F.BillRegisterId " +
                        "Where A.EDate>='" + sFDate + "' and A.EDate<='" + sTDate + "'  ";

                    if (argCCId > 0) sSql = sSql + " And A.CostCentreId= " + argCCId + " ";
                    if (BsfGlobal.g_bPowerUser == false)
                    {
                        sSql = sSql + " And A.CostCentreId NOT IN (Select CostCentreId From [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.UserCostCentreTrans  " +
                            "Where UserId=" + BsfGlobal.g_lUserId + ")";
                    }
                }

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }


        public DataTable GetVATTrans(int argBillRegId, int argTypeId)
        {
            DataTable dt = new DataTable();
            string sSql = "Select Expression,ExpValue,VATPer Per,NetValue NetTax from BillVATTrans Where BillRegisterId=" + argBillRegId + " and TypeId= " + argTypeId;
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();
            return dt;
        }

        public DataTable GetLabourIOWItem(int argBillTransId, int argAHeadId, int argIOWId)
        {
            DataTable dt = new DataTable();
            string sSql = "Select B.Resource_Name TypeName, A.LabourTypeId,A.Qty,A.Rate,A.Amount,A.MinRate,A.AppRate,A.Qty PrevQty,Cast(0 as Decimal(18,3)) LSQty,A.IOWId,A.AnalysisId from BillIOWLabourTrans A " +
                          "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId=B.Resource_ID " +
                          "Where A.BillTransId=" + argBillTransId + " and A.AnalysisId = " + argAHeadId + " and A.IOWId = " + argIOWId;
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();
            return dt;
        }

        public void GetRetentionMobAdvance(ref decimal argRetention,ref decimal argMobAdvance,int argWORegId)
        {
            decimal dRetention = 0;
            decimal dMobAdvance = 0;

            string sSql = "Select B.Title,A.Per from WOPaymentTermsNew A " +
                          "Inner Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.TermsMaster B on  A.TermsId=B.TermsId " +
                          "Where WORegisterId=" + argWORegId + " and B.Title in('Retention %','MobAdvanceRecovery %')";
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            DataTable dt = new DataTable();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();

            for (int i=0; i < dt.Rows.Count;i++)
            {
                if (dt.Rows[i]["Title"].ToString() == "Retention %") { dRetention = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["Per"], CommFun.datatypes.vartypenumeric)); }
                if (dt.Rows[i]["Title"].ToString() == "MobAdvanceRecovery %") { dMobAdvance = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["Per"], CommFun.datatypes.vartypenumeric)); }
            }
            dt.Dispose();

            argRetention = dRetention;
            argMobAdvance = dMobAdvance;
        }


        public DataTable GetLabourWBSItem(int argBillTransId, int argAHeadId)
        {
            DataTable dt = new DataTable();
            string sSql = "Select B.Resource_Name TypeName, A.LabourTypeId,A.Qty,A.Rate,A.Amount,A.MinRate,A.AppRate,A.Qty PrevQty,Cast(0 as Decimal(18,3)) LSQty,0 IOWId,A.AnalysisId from BillWBSLabourTrans A " +
                          "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId=B.Resource_ID " +
                          "Where A.BillTransId=" + argBillTransId + " and A.AnalysisId = " + argAHeadId;
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();
            return dt;
        }
        public DataTable GetLabourStrength(DateTime argFDate,DateTime argTDate,int argCCID,int argContId,int argWORegId)
        {
            DataTable dt = new DataTable();
            BsfGlobal.OpenWPMDB();
            string sWORegId = "";
            if (argWORegId != 0) { CommFun.GetAmendWORegIdNew(argWORegId, BsfGlobal.g_WPMDB); }

            string sSql = "Select A.LabourTypeId,B.Resource_Name TypeName,Sum(A.Qty) Qty,Case When Sum(isnull(A.Qty,0)) <>0 then Sum(A.Amount)/Sum(A.Qty) else 0 End Rate,Sum(A.Amount) Amount  " +
                          "From LabourStrengthTrans A " +
                          "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId = B.Resource_Id " +
                          "Where A.LabourStrengthId in (Select LabourStrengthId from LabourStrengthMaster Where ContractorId=" + argContId + " and CostCentreId=" + argCCID + " and " +
                          "EDate between '" + argFDate.ToString("dd MMM yyyy") + "' and '" + argTDate.ToString("dd MMM yyyy") + "'";
            if (sWORegId != "") { sSql = sSql + " and WORegisterID in (" + sWORegId + ")"; }
            sSql = sSql +  " ) Group by A.LabourTypeId,B.Resource_Name";
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();
            return dt;
        }

        public DataTable GetDPELabourIOWActivityItem(string argDPERegId, int argAHeadId, int argIOWId,int argCompId,string argRateType)
        {
            DataTable dt = new DataTable();
            string sSql = "Select B.Resource_Name TypeName, A.LabourTypeId,Sum(A.Qty) Qty,Case When Sum(isnull(A.Qty,0)) <>0 then Sum(A.Amount)/Sum(A.Qty) else 0 end Rate,Sum(A.Amount) Amount,Cast(0 as Decimal(18,3)) MinRate,Cast(0 as Decimal(18,3))  AppRate,Sum(A.Qty) PrevQty,Cast(0 as Decimal(18,3)) LSQty,A.IOWId,A.AnalysisId from DPEIOWLabourTrans A " +
                          "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId=B.Resource_ID " +
                          "Where  A.AnalysisId = " + argAHeadId + " and A.IOWId = " + argIOWId + " and A.DPETransId in (Select DPETransId from DPETrans Where Comp_Id =" + argCompId + " and RateType = '" + argRateType + "' and DPERegisterId in (" + argDPERegId.TrimEnd(',') + ")) " +
                          "Group by B.Resource_Name,A.LabourTypeId,A.IOWId,A.AnalysisId";
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();
            return dt;
        }

        public DataTable GetDPELabourIOWSubtem(string argDPERegId, int argAHeadId, int argIOWId, int argSubIOWId)
        {
            DataTable dt = new DataTable();
            string sSql = "Select B.Resource_Name TypeName, A.LabourTypeId,Sum(A.Qty) Qty,Case When Sum(isnull(A.Qty,0)) <>0 then Sum(A.Amount)/Sum(A.Qty) else 0 end Rate,Sum(A.Amount) Amount,Cast(0 as Decimal(18,3)) MinRate,Cast(0 as Decimal(18,3))  AppRate,Sum(A.Qty) PrevQty,Cast(0 as Decimal(18,3)) LSQty,A.IOWId,A.AnalysisId from DPEIOWLabourTrans A " +
                          "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId=B.Resource_ID " +
                          "Where  A.AnalysisId = " + argAHeadId + " and A.IOWId = " + argIOWId + " and A.DPETransId in (Select DPETransId from DPETrans Where IOW_Id =" + argSubIOWId + " and DPERegisterId in (" + argDPERegId.TrimEnd(',') + ")) " +
                          "Group by B.Resource_Name,A.LabourTypeId,A.IOWId,A.AnalysisId";
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();
            return dt;
        }

        public DataTable GetDPELabourWBSItem(string argDPERegId, int argAHeadId,int argIOWId)
        {
            DataTable dt = new DataTable();
            string sSql = "Select B.Resource_Name TypeName, A.LabourTypeId,Sum(A.Qty) Qty,Case When Sum(isnull(A.Qty,0)) <>0 then Sum(A.Amount)/Sum(A.Qty) else 0 end Rate,Sum(A.Amount) Amount,Cast(0 as Decimal(18,3)) MinRate,Cast(0 as Decimal(18,3))  AppRate,Sum(A.Qty) PrevQty,Cast(0 as Decimal(18,3)) LSQty,0 IOWId,A.AnalysisId from DPEWBSLabourTrans A " +
                          "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId=B.Resource_ID " +
                          "Where A.AnalysisId = " + argAHeadId + " and A.DPETransId in (Select DPETransId from DPETrans Where IOW_Id =" + argIOWId + " and DPERegisterId in (" + argDPERegId.TrimEnd(',') + ")) " +
                          "Group by B.Resource_Name,A.LabourTypeId,A.AnalysisId";
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();
            return dt;
        }

        public DataTable GetDPELabourItemActivity(string argDPERegId, int argCompId,string argRateType)
        {
            DataTable dt = new DataTable();
            string sSql = "Select B.Resource_Name TypeName, A.LabourTypeId,Sum(A.Qty) Qty,Case When Sum(isnull(A.Qty,0)) <>0 then Sum(A.Amount)/Sum(A.Qty) else 0 end Rate,Sum(A.Amount) Amount,Cast(0 as Decimal(18,3)) MinRate,Cast(0 as Decimal(18,3))  AppRate,Sum(A.Qty) PrevQty,Cast(0 as Decimal(18,3)) LSQty,0 IOWId,0 AnalysisId from DPEItemLabourTrans A " +
                          "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId=B.Resource_ID " +
                          "Where A.DPETransId in (Select DPETransId from DPETrans Where Comp_Id =" + argCompId + " and RateType = '" + argRateType + "' DPERegisterId in (" + argDPERegId.TrimEnd(',') + ")) " +
                          "Group by B.Resource_Name,A.LabourTypeId";
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();
            return dt;
        }


        public DataTable GetDPELabourItem(string argDPERegId,int argIOWId)
        {
            DataTable dt = new DataTable();
            string sSql = "Select B.Resource_Name TypeName, A.LabourTypeId,Sum(A.Qty) Qty,Case When Sum(isnull(A.Qty,0)) <>0 then Sum(A.Amount)/Sum(A.Qty) else 0 end Rate,Sum(A.Amount) Amount,Cast(0 as Decimal(18,3)) MinRate,Cast(0 as Decimal(18,3))  AppRate,Sum(A.Qty) PrevQty,Cast(0 as Decimal(18,3)) LSQty,0 IOWId,0 AnalysisId from DPEItemLabourTrans A " +
                          "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId=B.Resource_ID " +
                          "Where A.DPETransId in (Select DPETransId from DPETrans Where IOW_Id =" + argIOWId + " and DPERegisterId in (" + argDPERegId.TrimEnd(',') + ")) " +
                          "Group by B.Resource_Name,A.LabourTypeId";
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();
            return dt;
        }

        public string GetLabourUsedTypeDPE(string argDPERegId)
        {
            string sType = "S";
            string sSql = "Select Distinct LabourUsedType from DPERegister Where DPERegisterId in (" + argDPERegId.TrimEnd(',') + ") Order by LabourUsedType Desc";
            BsfGlobal.OpenWPMDB();
            DataTable dt = new DataTable();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();
            if (dt.Rows.Count > 0) { sType = dt.Rows[0]["LabourUsedType"].ToString(); }
            dt.Dispose();

            return sType;
        }


        public DataTable GetLabourSum(int argBillRegId)
        {
            DataTable dt = new DataTable();
            string sSql = "Select B.Resource_Name TypeName, A.LabourTypeId,A.Qty,A.Rate,A.Amount,A.MinRate,A.AppRate,A.Qty PrevQty,Cast(0 as Decimal(18,3)) LSQty,0 IOWId,0 AnalysisId from BillLabourTrans A " +
                          "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId=B.Resource_ID " +
                          "Where A.BillRegisterId=" + argBillRegId;
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();
            return dt;
        }

        public DataTable GetLabourItemSum(int argBillTransId)
        {
            DataTable dt = new DataTable();
            string sSql = "Select B.Resource_Name TypeName, A.LabourTypeId,A.Qty,A.Rate,A.Amount,A.MinRate,A.AppRate,A.Qty PrevQty,Cast(0 as Decimal(18,3)) LSQty,0 IOWId,0 AnalysisId from BillItemLabourTrans A " +
                          "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId=B.Resource_ID " +
                          "Where A.BillTransId=" + argBillTransId;
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();
            return dt;
        }




        public DataTable GetLabourItem(int argBillTransId)
        {
            DataTable dt = new DataTable();
            string sSql = "Select B.Resource_Name TypeName, A.LabourTypeId,A.Qty,A.Rate,A.Amount,A.MinRate,A.AppRate,A.Qty PrevQty,Cast(0 as Decimal(18,3)) LSQty,0 IOWId,0 AnalysisId from BillItemLabourTrans A " +
                          "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId=B.Resource_ID " +
                          "Where A.BillTransId=" + argBillTransId;
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();
            return dt;
        }


        public void GetBillDetailRegister(DateTime argFromDate, DateTime argToDate, int argCCId, int argContId, int argCompanyId)
        {
            SqlDataAdapter sda;
            DataTable dt = new DataTable();
            SqlCommand cmd;
            DataTable dtType = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            string frmdat = string.Format("{0:dd MMM yyyy}", argFromDate);
            string tdat = string.Format("{0:dd MMM yyyy}", argToDate.AddDays(1));

            try
            {

                sSql = "Truncate Table TMPBillDetailRegister ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();


                sSql = "Update BillRegister set VNo=BillNo where VNo='' ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();

                sSql = "Select A.BillRegisterId,A.CostCentreId,A.ContractorId,B.CompanyId,Convert(varchar(10),A.EDate,103) BillDate,A.VNo,Case When A.BillType='A' Then 'Activity' when A.BillType='L' then 'Labour' when A.BillType='I' then 'IOW' when A.BillType='S' then 'Sub-IOW' when A.BillType='T' then 'TurnKey' else (case when A.FormatType='A' then 'Advance' else 'Bill' end) end BillType,B.CostCentreName,C.VendorName,'' TypeName, " +
                    "cast(0 as decimal(18,3)) Amount,'' HeadingName,'' RefNo, " +
                    "0 as OrderNo,0 as TypeId,isnull(A.BillAmount,0) BillAmount ,ISNULL(FB.PaidAmount,0) PaidAmount,(isnull(A.BillAmount,0)-ISNULL(FB.PaidAmount,0)) BalanceDue,'' AdvanceRecovery,'' Retention,'' TDS " +
                    "from [" + BsfGlobal.g_sWPMDBName + "].dbo.BillRegister A " +
                    "Left join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre B on A.CostCentreId=B.CostCentreId " +
                    "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster C on A.ContractorID=C.VendorId " +
                    "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.BillRegister FB on A.BillRegisterId=FB.ReferenceId and (FB.RefType='WB' or FB.RefType='WA')  " +
                    "Where A.EDate>='" + frmdat + "' and A.EDate<='" + tdat + "' ";
                if (BsfGlobal.g_bPowerUser == false)
                {
                    sSql = sSql + " and A.CostCentreId Not In (SELECT CostCentreId FROM [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.UserCostCentreTrans WHERE UserId=" + BsfGlobal.g_lUserId + ") ";
                }

                if (argCCId != 0)
                    sSql = sSql + " and A.CostCentreId=" + argCCId;
                if (argContId != 0)
                    sSql = sSql + " and A.ContractorId=" + argContId;
                if (argCompanyId != 0)
                    sSql = sSql + " and B.CompanyId=" + argCompanyId;
                sSql = sSql + "Order by A.BillRegisterId ";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                sda.Fill(dt);

                if (dt.Rows.Count > 0)
                {
                    for (int j = 0; j < dt.Rows.Count; j++)
                    {
                        sSql = "Select sum(isnull(A.Amount,0)) Amount,isnull(B.TypeName,'') TypeName,isnull(B.HeadingName,'') HeadingName,isnull(B.RefNo,'') RefNo ,isnull(A.TypeId,0)TypeId,isnull(B.Type,'') FType from BillFormatTrans A  " +
                                "Left Join BillFormatMaster B on A.TypeID=B.TypeID and B.Type IN ('O','A','R','T') " +
                                "Where A.Amount>0 and A.BillRegisterId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["BillRegisterId"], CommFun.datatypes.vartypenumeric)) + " " +
                                "Group by B.TypeName,B.HeadingName,B.RefNo,A.TypeId,B.Type";

                        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                        dtType = new DataTable();
                        sda.Fill(dtType);
                        if (dtType.Rows.Count > 0)
                        {
                            for (int k = 0; k < dtType.Rows.Count; k++)
                            {
                                dt.Rows[j]["Amount"] = CommFun.IsNullCheck(dtType.Rows[k]["Amount"], CommFun.datatypes.vartypenumeric);
                                dt.Rows[j]["TypeId"] = CommFun.IsNullCheck(dtType.Rows[k]["TypeId"], CommFun.datatypes.vartypenumeric);
                                dt.Rows[j]["RefNo"] = CommFun.IsNullCheck(dtType.Rows[k]["RefNo"], CommFun.datatypes.vartypestring).ToString();


                                if (CommFun.IsNullCheck(dtType.Rows[k]["FType"], CommFun.datatypes.vartypestring).ToString() == "O" || CommFun.IsNullCheck(dtType.Rows[k]["FType"], CommFun.datatypes.vartypestring).ToString() == "A")
                                {
                                    //if (CommFun.IsNullCheck(dtType.Rows[k]["TypeName"], CommFun.datatypes.vartypestring).ToString() == "")
                                    //    dt.Rows[j]["AdvanceRecovery"] = CommFun.IsNullCheck(dtType.Rows[k]["HeadingName"], CommFun.datatypes.vartypestring).ToString();
                                    //else
                                    //    dt.Rows[j]["AdvanceRecovery"] = CommFun.IsNullCheck(dtType.Rows[k]["TypeName"], CommFun.datatypes.vartypestring).ToString();

                                    if (Convert.ToDecimal(CommFun.IsNullCheck(dtType.Rows[k]["Amount"], CommFun.datatypes.vartypenumeric)) == 0)
                                        dt.Rows[j]["AdvanceRecovery"] = 0;
                                    else
                                        dt.Rows[j]["AdvanceRecovery"] = Convert.ToDecimal(CommFun.IsNullCheck(dtType.Rows[k]["Amount"], CommFun.datatypes.vartypenumeric));
                                }
                                else if (CommFun.IsNullCheck(dtType.Rows[k]["FType"], CommFun.datatypes.vartypestring).ToString() == "R")
                                {
                                    //if (CommFun.IsNullCheck(dtType.Rows[k]["TypeName"], CommFun.datatypes.vartypestring).ToString() == "")
                                    //    dt.Rows[j]["Retention"] = CommFun.IsNullCheck(dtType.Rows[k]["HeadingName"], CommFun.datatypes.vartypestring).ToString();
                                    //else
                                    //    dt.Rows[j]["Retention"] = CommFun.IsNullCheck(dtType.Rows[k]["TypeName"], CommFun.datatypes.vartypestring).ToString();

                                    if (Convert.ToDecimal(CommFun.IsNullCheck(dtType.Rows[k]["Amount"], CommFun.datatypes.vartypenumeric)) == 0)
                                        dt.Rows[j]["Retention"] = 0;
                                    else
                                        dt.Rows[j]["Retention"] = Convert.ToDecimal(CommFun.IsNullCheck(dtType.Rows[k]["Amount"], CommFun.datatypes.vartypenumeric));
                                }
                                else if (CommFun.IsNullCheck(dtType.Rows[k]["FType"], CommFun.datatypes.vartypestring).ToString() == "T")
                                {
                                    //if (CommFun.IsNullCheck(dtType.Rows[k]["TypeName"], CommFun.datatypes.vartypestring).ToString() == "")
                                    //    dt.Rows[j]["TDS"] = CommFun.IsNullCheck(dtType.Rows[k]["HeadingName"], CommFun.datatypes.vartypestring).ToString();
                                    //else
                                    //    dt.Rows[j]["TDS"] = CommFun.IsNullCheck(dtType.Rows[k]["TypeName"], CommFun.datatypes.vartypestring).ToString();

                                    if (Convert.ToDecimal(CommFun.IsNullCheck(dtType.Rows[k]["Amount"], CommFun.datatypes.vartypenumeric)) == 0)
                                        dt.Rows[j]["TDS"] = 0;
                                    else
                                        dt.Rows[j]["TDS"] = Convert.ToDecimal(CommFun.IsNullCheck(dtType.Rows[k]["Amount"], CommFun.datatypes.vartypenumeric));
                                }
                            }
                        }
                    }
                } sda.Dispose();
                dtType.Dispose();

                string sBillDate = "";
                if (dt.Rows.Count > 0)
                {
                    for (int j = 0; j < dt.Rows.Count; j++)
                    {
                        sBillDate = String.Format("{0:dd-MMM-yyyy}", Convert.ToDateTime(CommFun.IsNullCheck(dt.Rows[j]["BillDate"], CommFun.datatypes.VarTypeDate)));

                        sSql = "Insert INTO TMPBillDetailRegister (BillRegId,BillDate,BillNo,BillType,VendorName,CostCentreName,WBValue,AdvanceRecovery,Retention,RefNo,WBFAPaid,WBBalance,TypeId,Amount,TDS) " +
                            "Values (" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["BillRegisterId"], CommFun.datatypes.vartypenumeric)) + ",'" + sBillDate + "','" + CommFun.IsNullCheck(dt.Rows[j]["VNo"], CommFun.datatypes.vartypestring).ToString() + "', " +
                            " '" + CommFun.IsNullCheck(dt.Rows[j]["BillType"], CommFun.datatypes.vartypestring).ToString() + "','" + CommFun.IsNullCheck(dt.Rows[j]["VendorName"], CommFun.datatypes.vartypestring).ToString() + "', " +
                            "'" + CommFun.IsNullCheck(dt.Rows[j]["CostCentreName"], CommFun.datatypes.vartypestring).ToString() + "', " +
                            "" + Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[j]["BillAmount"], CommFun.datatypes.vartypenumeric)) + " ," + Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[j]["AdvanceRecovery"], CommFun.datatypes.vartypenumeric)) + "," +
                            "" + Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[j]["Retention"], CommFun.datatypes.vartypenumeric)) + ", " +
                            "'" + CommFun.IsNullCheck(dt.Rows[j]["RefNo"], CommFun.datatypes.vartypestring).ToString() + "'," + Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[j]["PaidAmount"], CommFun.datatypes.vartypenumeric)) + "," +
                            "" + Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[j]["BalanceDue"], CommFun.datatypes.vartypenumeric)) + ", " +
                            " " + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["TypeId"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[j]["Amount"], CommFun.datatypes.vartypenumeric)) + " , " +
                            "" + Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[j]["TDS"], CommFun.datatypes.vartypenumeric)) + ") ";

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        cmd.ExecuteNonQuery();
                    }
                }
                sda.Dispose();
                dt.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (SqlException ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
        }

        private DataTable Fill_WCT_Details(int argRefId)
        {
            string sSql = "";
            DataTable dt = new DataTable();
            SqlDataReader sdr;

            BsfGlobal.OpenWPMDB();
            string sCompanyDBName = "";

            try
            {
                sSql = "Select Distinct B.DBName from [" + BsfGlobal.g_sFaDBName + "].dbo.BillRegister A " +
                    "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.FiscalYear B on A.FYearId=B.FYearId  " +
                    "where A.ReferenceId=" + argRefId + " and A.RefType='WO' ";
                SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                sCompanyDBName = CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypestring).ToString();
                cmd.Dispose();
                if (sCompanyDBName == "") { return dt; }

                //CC.CostCentreName,SLM.SubLedgerName,VC.CAddress [Address],VS.TINNo,BR.BillDate,BR.BillNo,Br.RefType,BR.RefDate,BR.RefNo,Br.BillAmount,
                sSql = "SELECT Sum(TBT.GrossAmount) GrossAmount,AD.RefDate PaidDate, Sum(TBT.TaxNetRate) TaxNetRate,Sum(TBT.TaxNetAmount) TaxNetAmount " +
                       "FROM [" + BsfGlobal.g_sFaDBName + "]..BillRegister BR " +
                       "INNER JOIN [" + BsfGlobal.g_sFaDBName + "]..Adjustment AD ON BR.BillRegisterId=AD.BillRegisterId  " +
                       "and BR.CompanyId=AD.CompanyId and BR.FYearId=AD.FYearId and BR.RefType='WO' " +
                       "INNER JOIN [" + sCompanyDBName + "].dbo.TaxBillTrans TBT ON TBT.BillRegisterId=AD.EntryId " +
                       "INNER JOIN [" + BsfGlobal.g_sFaDBName + "].dbo.SubLedgerMaster SLM ON SLM.SubLedgerId=BR.SubLedgerId " +
                       "INNER JOIN [" + BsfGlobal.g_sWorkFlowDBName + "]..CostCentre CC ON CC.CostcentreId=BR.CostCentreId " +
                       "INNER JOIN [" + BsfGlobal.g_sVendorDBName + "]..VendorMaster VM ON VM.VendorId=SLM.RefId  " +
                       "LEFT JOIN [" + BsfGlobal.g_sVendorDBName + "]..VendorContact VC ON VM.VendorId=VC.VendorID  " +
                       "LEFT JOIN [" + BsfGlobal.g_sVendorDBName + "]..VendorStatutory VS ON VM.VendorId=VS.VendorID " +
                       "WHERE BR.BillType='A'AND TBT.TaxType='W' and BR.ReferenceId=" + argRefId;
                sSql = sSql + " Group By AD.RefDate";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                sdr = cmd.ExecuteReader();
                dt.Load(sdr);
                sdr.Dispose();
                dt.Dispose();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public void WCTDetailsNew(DateTime argFDate, DateTime argTDate, int argCCId, int argContId, int argCompanyId)
        {
            SqlDataAdapter sda;
            SqlCommand cmd = null;
            DataTable dt = null;
            DataTable dtBF = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            string sFDate = "";
            string sTDate = "";
            string sCVType = "";

            sFDate = "";
            sTDate = "";
            string sPaidDate = "";
            string sFormula = "";
            string sWOFDate = "";
            string sBillTDate = "";

            DataTable dtF = new DataTable();
            if (dtF.Columns.Count == 0)
            {
                dtF.Columns.Add("SNo", typeof(int));
                dtF.Columns.Add("CCName", typeof(string));
                dtF.Columns.Add("VendorName", typeof(string));
                dtF.Columns.Add("Address", typeof(string));
                dtF.Columns.Add("WONo", typeof(string));
                dtF.Columns.Add("WODate", typeof(DateTime));
                dtF.Columns.Add("NameofWork", typeof(string));
                dtF.Columns.Add("WOAmt", typeof(decimal));
                dtF.Columns.Add("VTINNo", typeof(string));
                dtF.Columns.Add("BillNo", typeof(string));
                dtF.Columns.Add("BillDate", typeof(DateTime));
                dtF.Columns.Add("GrossAmt", typeof(decimal));
                dtF.Columns.Add("PaidDate", typeof(DateTime));
                dtF.Columns.Add("WCTRate", typeof(string));
                dtF.Columns.Add("WCTAmt", typeof(decimal));
            }

            sFDate = String.Format("{0:dd-MMM-yyyy}", argFDate);
            sTDate = String.Format("{0:dd-MMM-yyyy}", argTDate.AddDays(1));

            try
            {
                sCVType = BsfGlobal.GetVoucherType(13);

                sSql = "Truncate Table TmpBillWCTDetails ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "Select WORegisterId from WORegister  " +
                    "where WODate>= '" + sFDate + "' and WODate<='" + sTDate + "' and Approve='Y' ";
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                DataTable dtWO = new DataTable();
                sda.Fill(dtWO);
                sda.Dispose();

                //WO Advance
                if (dtWO != null)
                {
                    for (int j = 0; j < dtWO.Rows.Count; j++)
                    {

                        sSql = "Select Rank() OVER (ORDER BY   A.BillRegisterId) As SNo,A.BillRegisterId,A.WORegisterId,A.Edate Date,case when B.BillDate Is null then A.Edate Else B.BillDate End BillDate,Isnull(A.VNo,'') VNo,Isnull(A.CCBVNo,'') BillNo, ";
                        if (sCVType == "CC") sSql = sSql + "A.CCBVNo , "; else if (sCVType == "CO") sSql = sSql + " A.CompanyBVNo,";
                        sSql = sSql + " C.VendorName,D.CostCentreName,A.BillAmount,L1.CAddress as VAddress1,C.RegAddress as VAddress2,isnull( L1.Phone1,' ') as VPhone1,isnull( L1.Phone2,' ') as VPhone2, " +
                            "isnull(L1.Fax1,' ') as VFax1,isnull( L1.Fax2,' ') as VFax2,L1.Mobile1 as VMobile1,L1.Mobile2 as VMobile2,L1.CPerson1 as VCPerson1,L1.CPerson2 as VCPerson2, " +
                            "L1.CDesignation1 as VDesignation1,L1.CDesignation2 as  VDesignation2,L1.ContactNo1 as VContactNo1,L1.ContactNo2 as VContactNo2,L1.Email1 as VEmail1,VS.PANNO as VPANNo,VS.TANNo as VTANNo,VS.CSTNO as VCSTNo,VS.TINNo as VTINNo,isnull(VS.ServiceTaxNo,' ') as VServiceTaxNo, " +
                            "L1.Email2 as VEmail2,L1.WebName as VWebName ,isnull(VC.CityName,' ') as VCity,isnull(C.PinCode,' ') as VPinCode,D.CostCentreName,E.Address1 as CCAddress1, " +
                            "E.Address2 as CCAddress2,F.CityName as CCCityName,G.StateName as CCStateName,E.PinCode CCPinCode,I.CompanyName,I.Address1 as CAddress,I.Address2 as CAddress2, " +
                            "J.CityName as CCity,K.StateName as CState,I.Phone CPhone,I.Fax CFax,I.PinCode CPinCode,I.Mobile as CMobile,I.ContactPerson as CContactPerson ,I.Email as CEmail, " +
                            "I.Website as CWebsite,I.STNo as CSTNo,I.CSTNo as CCSTNo,I.GIRNo as CGIRNo,I.PANNo as CPANNo,I.TANNo as CTANNo,I.TNGSTNo as CTNGSTNo,I.TIN as CTIN,I.CIN as CCIN,M.CurrencyName as CCurrencyName, " +
                            "BR.BranchName,BR.STNo as BRSTNo,BR.CSTNO as BRCSTNo,BR.TIN as BRTIN,VBR.Address as BRAdd1,isnull(VBR.Phone,'') as VBRPhone,VBR.TINNo as VBRTinNo,isnull( BRC.CityName,' ') as VBRCityName,W.VBranchId, " +
                            "BT.TypeId,BT.TypeName,BT.WCTAmt,BT.Formula,cast(0 as decimal(18,3)) GrossAmt, " +
                            "AD.RefDate PaidDate,Convert(varchar(10),W.WODate,103)WODate,W.CCWONo WONo,W.NameofWork,W.Amount WOAmt,W.NetAmount WONetAmt,'' Address " +
                            "from BillRegister A " +
                            "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.BillRegister B on A.BillRegisterId=B.ReferenceId and B.RefType='WB' " +
                            "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster C on A.ContractorID=C.VendorId " +
                            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster VC on C.CityId=VC.CityId " +
                            "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorStatutory VS on C.VendorID=VS.VendorId " +
                            "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorContact L1 on C.VendorId=L1.VendorId " +
                            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre D on A.CostCentreId=D.CostCentreId  " +
                            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CostCentre E on D.FACostCentreId=E.CostCentreId  " +
                            "Left join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.BranchMaster BR on E.BranchId=Br.BranchId " +
                            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster F on E.CityId=F.CityId " +
                            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.StateMaster G on E.StateId=G.StateId " +
                            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster H on C.CityId=H.CityId " +
                            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CompanyMaster I on D.CompanyId=I.CompanyId " +
                            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster J on I.CityId=J.CityId " +
                            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.StateMaster K on I.StateId=K.StateId " +
                            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CurrencyMaster M on I.CurrencyId=M.CurrencyId " +
                            "Left Join  WORegister W on A.WORegisterId=W.WoRegisterId " +
                            "Left join [" + BsfGlobal.g_sVendorDBName + "].dbo.Branch VBR on C.VendorId=VBR.VendorId  and W.VBranchId=VBR.BranchId  " +
                            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster BRC on VBR.CityId=BRC.CityId " +

                            "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.PayAdviceTrans PT On B.BillRegisterId=PT.BillRegisterId   " +
                            "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.PayAdviceDet PD On PD.PayAdviceId=PT.PayAdviceId   " +
                            "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.Adjustment AD On AD.BillRegisterId=B.BillRegisterId And PT.EntryId=AD.EntryId  " +
                            "Left Join (Select A.TypeId,A.TypeName,B.CostCentreId,D.Amount WCTAmt,D.Formula,D.BillRegisterId from BillFormatMaster A " +
                            "Left Join BillFormat B on A.TypeId=B.TypeId and (A.Type='Q' or A.Type='N' or A.Type='W') and A.TypeName Like 'W%' and B.CostCentreId>0 " +
                            "Left Join BillFormatTrans  D on B.TypeId=D.TypeId and D.FormatType='B' and A.TypeName<>'' and D.Amount>0) BT on A.BillRegisterId=BT.BillRegisterId and A.CostCentreId=BT.CostCentreId " +
                            "Where A.Approve='Y' and A.EDate>='" + sFDate + "' and A.EDate<='" + sTDate + "' and AD.Amount>0 ";

                        if (argCCId > 0) sSql = sSql + " And A.CostCentreId= " + argCCId + " ";
                        if (argContId > 0) sSql = sSql + " And A.ContractorId= " + argContId + " ";
                        if (argCompanyId > 0) sSql = sSql + " And D.CompanyId=" + argCompanyId + " ";
                        if (BsfGlobal.g_bPowerUser == false)
                        {
                            sSql = sSql + " And A.CostCentreId NOT IN (Select CostCentreId From [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.UserCostCentreTrans  " +
                                "Where UserId=" + BsfGlobal.g_lUserId + ")";
                        }
                        sSql = sSql + " and A.WORegisterId=" + Convert.ToInt32(CommFun.IsNullCheck(dtWO.Rows[j]["WORegisterId"], CommFun.datatypes.vartypenumeric)) + " " +
                            "Order by A.BillRegisterId,A.WORegisterId";

                        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                        dt = new DataTable();
                        sda.Fill(dt);
                        sda.Dispose();
                        string sAddress = "";
                        double dGrossAmt = 0;

                        if (dt.Rows.Count > 0)
                        {
                            for (int i = 0; i < dt.Rows.Count; i++)
                            {
                                if (Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["VBranchId"], CommFun.datatypes.vartypenumeric)) != 0)
                                {
                                    sAddress = sAddress + CommFun.IsNullCheck(dt.Rows[i]["BRAdd1"], CommFun.datatypes.vartypestring).ToString() + "\n\r";
                                }
                                else
                                {
                                    if (CommFun.IsNullCheck(dt.Rows[i]["VAddress1"], CommFun.datatypes.vartypestring).ToString() != "" || CommFun.IsNullCheck(dt.Rows[i]["VPhone1"], CommFun.datatypes.vartypestring).ToString() != "" || CommFun.IsNullCheck(dt.Rows[i]["VFax1"], CommFun.datatypes.vartypestring).ToString() != "" || CommFun.IsNullCheck(dt.Rows[i]["VMobile1"], CommFun.datatypes.vartypestring).ToString() != "")
                                    {
                                        sAddress = sAddress + (CommFun.IsNullCheck(dt.Rows[i]["VAddress2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VCity"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VPinCode"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VPhone2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VFax2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VMobile2"], CommFun.datatypes.vartypestring).ToString());
                                    }
                                    else
                                    {
                                        sAddress = sAddress + (CommFun.IsNullCheck(dt.Rows[i]["VAddress2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VCity"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VPinCode"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VPhone2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VFax2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VMobile2"], CommFun.datatypes.vartypestring).ToString());
                                    }
                                }
                                dt.Rows[i]["Address"] = sAddress;

                                sSql = "Select A.*,B.Type,B.RefNo from BillFormatTrans A " +
                                    "Left Join BillFormatMaster B on A.TypeId=B.TypeID and B.Type Not In('W') " +
                                    "where A.BillRegisterId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["BillRegisterId"], CommFun.datatypes.vartypenumeric)) + "  " +
                                    "and B.TypeName Not Like 'W%' Order By A.TypeId ";
                                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                                dtBF = new DataTable();
                                sda.Fill(dtBF);
                                sda.Dispose();
                                if (dtBF.Rows.Count > 0)
                                {
                                    if (CommFun.IsNullCheck(dt.Rows[i]["Formula"], CommFun.datatypes.vartypestring).ToString() != "" && CommFun.IsNullCheck(dt.Rows[i]["Formula"], CommFun.datatypes.vartypestring).ToString().Contains('*'))
                                    {
                                        int indx = CommFun.IsNullCheck(dt.Rows[i]["Formula"], CommFun.datatypes.vartypestring).ToString().IndexOf('*');
                                        dGrossAmt = CommFun.ComputeFormulavalueForRNew(CommFun.IsNullCheck(dt.Rows[i]["Formula"], CommFun.datatypes.vartypestring).ToString().Substring(0, indx), dtBF, "Amount");
                                    }
                                    else
                                    { dGrossAmt = Convert.ToDouble(CommFun.IsNullCheck(dt.Rows[i]["Formula"], CommFun.datatypes.vartypenumeric)); }
                                }
                                dt.Rows[i]["GrossAmt"] = Convert.ToDecimal(dGrossAmt);
                                sAddress = "";
                            }
                            dt.AcceptChanges();

                            //Update Workbill Details With WCT against WorkOrder
                            if (dt != null)
                            {
                                DataRow dr;
                                int indxx = 0;
                                for (int k = 0; k < dt.Rows.Count; k++)
                                {
                                    dr = dtF.NewRow();

                                    sWOFDate = String.Format("{0:dd-MMM-yyyy}", Convert.ToDateTime(CommFun.IsNullCheck(dt.Rows[k]["WODate"], CommFun.datatypes.VarTypeDate)));
                                    sBillTDate = String.Format("{0:dd-MMM-yyyy}", Convert.ToDateTime(CommFun.IsNullCheck(dt.Rows[k]["Date"], CommFun.datatypes.VarTypeDate)));
                                    sPaidDate = String.Format("{0:dd-MMM-yyyy}", Convert.ToDateTime(CommFun.IsNullCheck(dt.Rows[k]["PaidDate"], CommFun.datatypes.VarTypeDate)));
                                    if (CommFun.IsNullCheck(dt.Rows[k]["Formula"], CommFun.datatypes.vartypestring).ToString() != "" && CommFun.IsNullCheck(dt.Rows[k]["Formula"], CommFun.datatypes.vartypestring).ToString().Contains('*'))
                                    {
                                        indxx = CommFun.IsNullCheck(dt.Rows[k]["Formula"], CommFun.datatypes.vartypestring).ToString().IndexOf('*');
                                        sFormula = CommFun.IsNullCheck(dt.Rows[k]["Formula"], CommFun.datatypes.vartypestring).ToString().Substring(indxx + 1);
                                    }
                                    else { indxx = 0; sFormula = ""; }

                                    dr["SNo"] = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["SNo"], CommFun.datatypes.vartypenumeric));
                                    dr["CCName"] = CommFun.IsNullCheck(dt.Rows[k]["CostCentreName"], CommFun.datatypes.vartypestring).ToString();
                                    dr["VendorName"] = CommFun.IsNullCheck(dt.Rows[k]["VendorName"], CommFun.datatypes.vartypestring).ToString();
                                    dr["Address"] = CommFun.IsNullCheck(dt.Rows[k]["Address"], CommFun.datatypes.vartypestring).ToString();
                                    dr["WONo"] = CommFun.IsNullCheck(dt.Rows[k]["WONo"], CommFun.datatypes.vartypestring).ToString();
                                    dr["WODate"] = sWOFDate;
                                    dr["NameofWork"] = CommFun.IsNullCheck(dt.Rows[k]["NameofWork"], CommFun.datatypes.vartypestring).ToString();
                                    dr["WOAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[k]["WOAmt"], CommFun.datatypes.vartypenumeric));
                                    dr["VTINNo"] = CommFun.IsNullCheck(dt.Rows[k]["BRTIN"], CommFun.datatypes.vartypestring).ToString();
                                    dr["BillNo"] = CommFun.IsNullCheck(dt.Rows[k]["BillNo"], CommFun.datatypes.vartypestring).ToString();
                                    dr["BillDate"] = sBillTDate;
                                    dr["GrossAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[k]["GrossAmt"], CommFun.datatypes.vartypenumeric));
                                    dr["PaidDate"] = sPaidDate;
                                    dr["WCTRate"] = sFormula;
                                    dr["WCTAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[k]["WCTAmt"], CommFun.datatypes.vartypenumeric));

                                    dtF.Rows.Add(dr);
                                }
                            }
                        }

                        //WOAdvance
                        dt = WCTDetailsNew3(argFDate, argTDate, argCCId, argContId, argCompanyId, Convert.ToInt32(CommFun.IsNullCheck(dtWO.Rows[j]["WORegisterId"], CommFun.datatypes.vartypenumeric)));

                        if (dt != null)
                        {
                            DataRow dr;
                            for (int k = 0; k < dt.Rows.Count; k++)
                            {
                                dr = dtF.NewRow();

                                sWOFDate = String.Format("{0:dd-MMM-yyyy}", Convert.ToDateTime(CommFun.IsNullCheck(dt.Rows[k]["WODate"], CommFun.datatypes.VarTypeDate)));
                                sBillTDate = String.Format("{0:dd-MMM-yyyy}", Convert.ToDateTime(CommFun.IsNullCheck(dt.Rows[k]["BillDate"], CommFun.datatypes.VarTypeDate)));
                                sPaidDate = String.Format("{0:dd-MMM-yyyy}", Convert.ToDateTime(CommFun.IsNullCheck(dt.Rows[k]["PaidDate"], CommFun.datatypes.VarTypeDate)));
                                sFormula = CommFun.IsNullCheck(dt.Rows[k]["Formula"], CommFun.datatypes.vartypestring).ToString();

                                dr["SNo"] = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["SNo"], CommFun.datatypes.vartypenumeric));
                                dr["CCName"] = CommFun.IsNullCheck(dt.Rows[k]["CostCentreName"], CommFun.datatypes.vartypestring).ToString();
                                dr["VendorName"] = CommFun.IsNullCheck(dt.Rows[k]["VendorName"], CommFun.datatypes.vartypestring).ToString();
                                dr["Address"] = CommFun.IsNullCheck(dt.Rows[k]["Address"], CommFun.datatypes.vartypestring).ToString();
                                dr["WONo"] = CommFun.IsNullCheck(dt.Rows[k]["WONo"], CommFun.datatypes.vartypestring).ToString();
                                dr["WODate"] = sWOFDate;
                                dr["NameofWork"] = CommFun.IsNullCheck(dt.Rows[k]["NameofWork"], CommFun.datatypes.vartypestring).ToString();
                                dr["WOAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[k]["WOAmt"], CommFun.datatypes.vartypenumeric));
                                dr["VTINNo"] = CommFun.IsNullCheck(dt.Rows[k]["BRTIN"], CommFun.datatypes.vartypestring).ToString();
                                dr["BillNo"] = "";//CommFun.IsNullCheck(dt.Rows[k]["BillNo"], CommFun.datatypes.vartypestring).ToString();
                                dr["BillDate"] = DBNull.Value;
                                dr["GrossAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[k]["GrossAmt"], CommFun.datatypes.vartypenumeric));
                                dr["PaidDate"] = sPaidDate;
                                dr["WCTRate"] = sFormula;
                                dr["WCTAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[k]["WCTAmt"], CommFun.datatypes.vartypenumeric));

                                dtF.Rows.Add(dr);
                            }
                        }
                    }

                }

                //Insert The WCT Amt Details...
                if (dtF != null)
                {
                    //int indxx = 0;
                    for (int k = 0; k < dtF.Rows.Count; k++)
                    {
                        if (Convert.ToDecimal(CommFun.IsNullCheck(dtF.Rows[k]["WCTAmt"], CommFun.datatypes.vartypenumeric)) != 0)
                        {
                            sWOFDate = String.Format("{0:dd-MMM-yyyy}", Convert.ToDateTime(CommFun.IsNullCheck(dtF.Rows[k]["WODate"], CommFun.datatypes.VarTypeDate)));
                            if (dtF.Rows[k]["BillDate"] == DBNull.Value)
                            {
                                sBillTDate = "";
                            }
                            else
                            {
                                sBillTDate = String.Format("{0:dd-MMM-yyyy}", Convert.ToDateTime(CommFun.IsNullCheck(dtF.Rows[k]["BillDate"], CommFun.datatypes.VarTypeDate)));
                            }
                            sPaidDate = String.Format("{0:dd-MMM-yyyy}", Convert.ToDateTime(CommFun.IsNullCheck(dtF.Rows[k]["PaidDate"], CommFun.datatypes.VarTypeDate)));

                            if (CommFun.IsNullCheck(dtF.Rows[k]["WCTRate"], CommFun.datatypes.vartypestring).ToString().Contains('%'))
                            {
                                sFormula = CommFun.IsNullCheck(dtF.Rows[k]["WCTRate"], CommFun.datatypes.vartypestring).ToString();
                            }
                            else
                            {
                                if (Convert.ToDecimal(CommFun.IsNullCheck(dtF.Rows[k]["WCTRate"], CommFun.datatypes.vartypenumeric)) != 0 || CommFun.IsNullCheck(dtF.Rows[k]["WCTRate"], CommFun.datatypes.vartypestring).ToString() != "")
                                {
                                    sFormula = CommFun.IsNullCheck(dtF.Rows[k]["WCTRate"], CommFun.datatypes.vartypestring).ToString() + "%";
                                }
                                else { sFormula = "0"; }
                            }

                            sSql = "INSERT INTO TmpBillWCTDetails (SNo,CCName,VendorName,Address,WONo,WODate,NameofWork,WOAmt,VTINNo,BillNo,BillDate,GrossAmt,PaidDate,WCTRate,WCTAmt) " +
                                 "VALUES (" + Convert.ToInt32(CommFun.IsNullCheck(dtF.Rows[k]["SNo"], CommFun.datatypes.vartypenumeric)) + ",'" + BsfGlobal.Insert_SingleQuot(CommFun.IsNullCheck(dtF.Rows[k]["CCName"], CommFun.datatypes.vartypestring).ToString()) + "', " +
                                 "'" + BsfGlobal.Insert_SingleQuot(CommFun.IsNullCheck(dtF.Rows[k]["VendorName"], CommFun.datatypes.vartypestring).ToString()) + "','" + BsfGlobal.Insert_SingleQuot(CommFun.IsNullCheck(dtF.Rows[k]["Address"], CommFun.datatypes.vartypestring).ToString()) + "', " +
                                 "'" + CommFun.IsNullCheck(dtF.Rows[k]["WONo"], CommFun.datatypes.vartypestring).ToString() + "','" + sFDate + "','" + BsfGlobal.Insert_SingleQuot(CommFun.IsNullCheck(dtF.Rows[k]["NameofWork"], CommFun.datatypes.vartypestring).ToString()) + "', " +
                                 " " + Convert.ToDecimal(CommFun.IsNullCheck(dtF.Rows[k]["WOAmt"], CommFun.datatypes.vartypenumeric)) + ",'" + CommFun.IsNullCheck(dtF.Rows[k]["VTINNo"], CommFun.datatypes.vartypestring).ToString() + "', " +
                                 "'" + BsfGlobal.Insert_SingleQuot(CommFun.IsNullCheck(dtF.Rows[k]["BillNo"], CommFun.datatypes.vartypestring).ToString()) + "','" + sBillTDate + "'," +
                                 "" + Convert.ToDecimal(CommFun.IsNullCheck(dtF.Rows[k]["GrossAmt"], CommFun.datatypes.vartypenumeric)) + ",'" + sPaidDate + "','" + sFormula + "'," +
                                 " " + Convert.ToDecimal(CommFun.IsNullCheck(dtF.Rows[k]["WCTAmt"], CommFun.datatypes.vartypenumeric)) + ")";
                            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                            cmd.ExecuteNonQuery();
                            cmd.Dispose();  

                        }
                        else
                        {
                            sWOFDate = "";
                            sBillTDate = "";
                            sPaidDate = "";
                        }
                    }

                }

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
        }

        public DataTable WCTDetailsNew3(DateTime argFDate, DateTime argTDate, int argCCId, int argContId, int argCompanyId, int argWoRegId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            DataTable dtBF = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            string sFDate = "";
            string sTDate = "";
            string sCVType = "";

            sFDate = String.Format("{0:dd-MMM-yyyy}", argFDate);
            sTDate = String.Format("{0:dd-MMM-yyyy}", argTDate.AddDays(1));

            try
            {
                sCVType = BsfGlobal.GetVoucherType(11);

                //WO Advance
                sSql = "Select Rank() OVER (ORDER BY A.WORegisterId) As SNo,A.WORegisterId,'' Date,'' BillDate,'' VNo,'' BillNo, ";
                if (sCVType == "CC") sSql = sSql + "A.CCWONo , "; else if (sCVType == "CO") sSql = sSql + " A.CompanyVNo,";
                sSql = sSql + " C.VendorName,D.CostCentreName,cast(0 as decimal(18,3)) BillAmount,L1.CAddress as VAddress1,C.RegAddress as VAddress2,isnull( L1.Phone1,' ') as VPhone1,isnull( L1.Phone2,' ') as VPhone2, " +
                    "isnull(L1.Fax1,' ') as VFax1,isnull( L1.Fax2,' ') as VFax2,L1.Mobile1 as VMobile1,L1.Mobile2 as VMobile2,L1.CPerson1 as VCPerson1,L1.CPerson2 as VCPerson2, " +
                    "L1.CDesignation1 as VDesignation1,L1.CDesignation2 as  VDesignation2,L1.ContactNo1 as VContactNo1,L1.ContactNo2 as VContactNo2,L1.Email1 as VEmail1,VS.PANNO as VPANNo,VS.TANNo as VTANNo,VS.CSTNO as VCSTNo,VS.TINNo as VTINNo,isnull(VS.ServiceTaxNo,' ') as VServiceTaxNo, " +
                    "L1.Email2 as VEmail2,L1.WebName as VWebName ,isnull(VC.CityName,' ') as VCity,isnull(C.PinCode,' ') as VPinCode,D.CostCentreName,E.Address1 as CCAddress1, " +
                    "E.Address2 as CCAddress2,F.CityName as CCCityName,G.StateName as CCStateName,E.PinCode CCPinCode,I.CompanyName,I.Address1 as CAddress,I.Address2 as CAddress2, " +
                    "J.CityName as CCity,K.StateName as CState,I.Phone CPhone,I.Fax CFax,I.PinCode CPinCode,I.Mobile as CMobile,I.ContactPerson as CContactPerson ,I.Email as CEmail, " +
                    "I.Website as CWebsite,I.STNo as CSTNo,I.CSTNo as CCSTNo,I.GIRNo as CGIRNo,I.PANNo as CPANNo,I.TANNo as CTANNo,I.TNGSTNo as CTNGSTNo,I.TIN as CTIN,I.CIN as CCIN,M.CurrencyName as CCurrencyName, " +
                    "BR.BranchName,BR.STNo as BRSTNo,BR.CSTNO as BRCSTNo,BR.TIN as BRTIN,VBR.Address as BRAdd1,isnull(VBR.Phone,'') as VBRPhone,VBR.TINNo as VBRTinNo,isnull( BRC.CityName,' ') as VBRCityName,A.VBranchId, " +
                    "0 TypeId,'' TypeName,cast(0 as decimal(18,3)) WCTAmt,'' Formula,cast(0 as decimal(18,3)) GrossAmt, " +
                    "AD.RefDate PaidDate,Convert(varchar(10),A.WODate,103)WODate,A.CCWONo WONo,A.NameofWork,A.Amount WOAmt,A.NetAmount WONetAmt,'' Address,A.AdvanceAmt " +
                    "from WORegister A " +
                    "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.BillRegister B on A.WORegisterId=B.ReferenceId and B.RefType='WO' " +
                    "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster C on A.ContractorID=C.VendorId " +
                    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster VC on C.CityId=VC.CityId " +
                    "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorStatutory VS on C.VendorID=VS.VendorId " +
                    "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorContact L1 on C.VendorId=L1.VendorId " +
                    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre D on A.CostCentreId=D.CostCentreId  " +
                    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CostCentre E on D.FACostCentreId=E.CostCentreId  " +
                    "Left join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.BranchMaster BR on E.BranchId=Br.BranchId " +
                    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster F on E.CityId=F.CityId " +
                    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.StateMaster G on E.StateId=G.StateId " +
                    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster H on C.CityId=H.CityId " +
                    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CompanyMaster I on D.CompanyId=I.CompanyId " +
                    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster J on I.CityId=J.CityId " +
                    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.StateMaster K on I.StateId=K.StateId " +
                    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CurrencyMaster M on I.CurrencyId=M.CurrencyId " +

                    "Left join [" + BsfGlobal.g_sVendorDBName + "].dbo.Branch VBR on C.VendorId=VBR.VendorId  and A.VBranchId=VBR.BranchId  " +
                    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster BRC on VBR.CityId=BRC.CityId " +

                    "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.PayAdviceTrans PT On B.BillRegisterId=PT.BillRegisterId   " +
                    "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.PayAdviceDet PD On PD.PayAdviceId=PT.PayAdviceId   " +
                    "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.Adjustment AD On AD.BillRegisterId=B.BillRegisterId And PT.EntryId=AD.EntryId  " +

                    //"Left Join (Select A.TypeId,A.TypeName,B.CostCentreId,D.Amount WCTAmt,D.Formula,D.BillRegisterId from BillFormatMaster A " +
                    //"Left Join BillFormat B on A.TypeId=B.TypeId and (A.Type='Q' or A.Type='N') and A.TypeName Like 'W%' and B.CostCentreId>0 " +
                    //"Left Join BillFormatTrans  D on B.TypeId=D.TypeId and D.FormatType='B' and A.TypeName<>'' and D.Amount>0) BT on A.BillRegisterId=BT.BillRegisterId and A.CostCentreId=BT.CostCentreId " +

                    "Where A.Approve='Y' and A.WODate>='" + sFDate + "' and A.WODate<='" + sTDate + "' and AD.Amount>0 ";

                if (argCCId > 0) sSql = sSql + " And A.CostCentreId= " + argCCId + " ";
                if (argContId > 0) sSql = sSql + " And A.ContractorId= " + argContId + " ";
                if (argCompanyId > 0) sSql = sSql + " And D.CompanyId=" + argCompanyId + " ";
                if (BsfGlobal.g_bPowerUser == false)
                {
                    sSql = sSql + " And A.CostCentreId NOT IN (Select CostCentreId From [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.UserCostCentreTrans  " +
                        "Where UserId=" + BsfGlobal.g_lUserId + ")";
                }
                sSql = sSql + " and A.WORegisterId=" + argWoRegId + " " +
                    "Order by A.WORegisterId";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                string sAddress = "";

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        if (Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["VBranchId"], CommFun.datatypes.vartypenumeric)) != 0)
                        {
                            sAddress = sAddress + CommFun.IsNullCheck(dt.Rows[i]["BRAdd1"], CommFun.datatypes.vartypestring).ToString() + "\n\r";
                        }
                        else
                        {
                            if (CommFun.IsNullCheck(dt.Rows[i]["VAddress1"], CommFun.datatypes.vartypestring).ToString() != "" || CommFun.IsNullCheck(dt.Rows[i]["VPhone1"], CommFun.datatypes.vartypestring).ToString() != "" || CommFun.IsNullCheck(dt.Rows[i]["VFax1"], CommFun.datatypes.vartypestring).ToString() != "" || CommFun.IsNullCheck(dt.Rows[i]["VMobile1"], CommFun.datatypes.vartypestring).ToString() != "")
                            {
                                sAddress = sAddress + (CommFun.IsNullCheck(dt.Rows[i]["VAddress2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VCity"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VPinCode"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VPhone2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VFax2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VMobile2"], CommFun.datatypes.vartypestring).ToString());
                            }
                            else
                            {
                                sAddress = sAddress + (CommFun.IsNullCheck(dt.Rows[i]["VAddress2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VCity"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VPinCode"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VPhone2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VFax2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VMobile2"], CommFun.datatypes.vartypestring).ToString());
                            }
                        }
                        dt.Rows[i]["Address"] = sAddress;

                        dtBF = Fill_WCT_Details(Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["WORegisterId"], CommFun.datatypes.vartypenumeric)));

                        if (dtBF.Rows.Count > 0)
                        {
                            dt.Rows[i]["Formula"] = Convert.ToDouble(CommFun.IsNullCheck(dtBF.Rows[0]["TaxNetRate"], CommFun.datatypes.vartypenumeric));
                            dt.Rows[i]["WCTAmt"] = Convert.ToDouble(CommFun.IsNullCheck(dtBF.Rows[0]["TaxNetAmount"], CommFun.datatypes.vartypenumeric));
                            dt.Rows[i]["PaidDate"] = Convert.ToDateTime(CommFun.IsNullCheck(dtBF.Rows[0]["PaidDate"], CommFun.datatypes.VarTypeDate));
                        }
                        dt.Rows[i]["GrossAmt"] = Convert.ToDouble(CommFun.IsNullCheck(dt.Rows[i]["AdvanceAmt"], CommFun.datatypes.vartypenumeric));

                        sAddress = "";
                    }
                    dt.AcceptChanges();
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }

            //DataTable uniqueCols = dt.DefaultView.ToTable(true, "WORegisterId");

            return dt;
        }
     

        //public void WCTDetails(DateTime argFDate, DateTime argTDate, int argCCId, int argContId, int argCompanyId)
        //{
        //    SqlDataAdapter sda;
        //    SqlCommand cmd = null;
        //    DataTable dt = null;
        //    DataTable dtBF = null;
        //    string sSql = "";
        //    BsfGlobal.OpenWPMDB();
        //    string sFDate = "";
        //    string sTDate = "";
        //    string sCVType = "";


        //    sFDate = String.Format("{0:dd-MMM-yyyy}", argFDate);
        //    sTDate = String.Format("{0:dd-MMM-yyyy}", argTDate.AddDays(1));

        //    try
        //    {
        //        sCVType = BsfGlobal.GetVoucherType(13);

        //        sSql = "Truncate Table TmpBillWCTDetails ";
        //        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
        //        cmd.ExecuteNonQuery();
        //        cmd.Dispose();


        //        sSql = "Select Rank() OVER (ORDER BY   A.BillRegisterId) As SNo,A.BillRegisterId,A.WORegisterId,A.Edate Date,case when B.BillDate Is null then A.Edate Else B.BillDate End BillDate,Isnull(A.VNo,'') VNo,Isnull(A.CCBVNo,'') BillNo, ";
        //        if (sCVType == "CC") sSql = sSql + "A.CCBVNo , "; else if (sCVType == "CO") sSql = sSql + " A.CompanyBVNo,";
        //        sSql = sSql + " C.VendorName,D.CostCentreName,A.BillAmount,L1.CAddress as VAddress1,C.RegAddress as VAddress2,isnull( L1.Phone1,' ') as VPhone1,isnull( L1.Phone2,' ') as VPhone2, " +
        //            "isnull(L1.Fax1,' ') as VFax1,isnull( L1.Fax2,' ') as VFax2,L1.Mobile1 as VMobile1,L1.Mobile2 as VMobile2,L1.CPerson1 as VCPerson1,L1.CPerson2 as VCPerson2, " +
        //            "L1.CDesignation1 as VDesignation1,L1.CDesignation2 as  VDesignation2,L1.ContactNo1 as VContactNo1,L1.ContactNo2 as VContactNo2,L1.Email1 as VEmail1,VS.PANNO as VPANNo,VS.TANNo as VTANNo,VS.CSTNO as VCSTNo,VS.TINNo as VTINNo,isnull(VS.ServiceTaxNo,' ') as VServiceTaxNo, " +
        //            "L1.Email2 as VEmail2,L1.WebName as VWebName ,isnull(VC.CityName,' ') as VCity,isnull(C.PinCode,' ') as VPinCode,D.CostCentreName,E.Address1 as CCAddress1, " +
        //            "E.Address2 as CCAddress2,F.CityName as CCCityName,G.StateName as CCStateName,E.PinCode CCPinCode,I.CompanyName,I.Address1 as CAddress,I.Address2 as CAddress2, " +
        //            "J.CityName as CCity,K.StateName as CState,I.Phone CPhone,I.Fax CFax,I.PinCode CPinCode,I.Mobile as CMobile,I.ContactPerson as CContactPerson ,I.Email as CEmail, " +
        //            "I.Website as CWebsite,I.STNo as CSTNo,I.CSTNo as CCSTNo,I.GIRNo as CGIRNo,I.PANNo as CPANNo,I.TANNo as CTANNo,I.TNGSTNo as CTNGSTNo,I.TIN as CTIN,I.CIN as CCIN,M.CurrencyName as CCurrencyName, " +
        //            "BR.BranchName,BR.STNo as BRSTNo,BR.CSTNO as BRCSTNo,BR.TIN as BRTIN,VBR.Address as BRAdd1,isnull(VBR.Phone,'') as VBRPhone,VBR.TINNo as VBRTinNo,isnull( BRC.CityName,' ') as VBRCityName,W.VBranchId, " +
        //            "BT.TypeId,BT.TypeName,BT.WCTAmt,BT.Formula,cast(0 as decimal(18,3)) GrossAmt, " +
        //            "AD.RefDate PaidDate,Convert(varchar(10),W.WODate,103)WODate,W.CCWONo WONo,W.NameofWork,W.Amount WOAmt,W.NetAmount WONetAmt,'' Address " +
        //            "from BillRegister A " +
        //            "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.BillRegister B on A.BillRegisterId=B.ReferenceId and B.RefType='WB' " +
        //            "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster C on A.ContractorID=C.VendorId " +
        //            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster VC on C.CityId=VC.CityId " +
        //            "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorStatutory VS on C.VendorID=VS.VendorId " +
        //            "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorContact L1 on C.VendorId=L1.VendorId " +
        //            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre D on A.CostCentreId=D.CostCentreId  " +
        //            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CostCentre E on D.FACostCentreId=E.CostCentreId  " +
        //            "Left join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.BranchMaster BR on E.BranchId=Br.BranchId " +
        //            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster F on E.CityId=F.CityId " +
        //            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.StateMaster G on E.StateId=G.StateId " +
        //            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster H on C.CityId=H.CityId " +
        //            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CompanyMaster I on E.CompanyId=I.CompanyId " +
        //            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster J on I.CityId=J.CityId " +
        //            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.StateMaster K on I.StateId=K.StateId " +
        //            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CurrencyMaster M on I.CurrencyId=M.CurrencyId " +
        //            "Left Join  WORegister W on A.WORegisterId=W.WoRegisterId " +
        //            "Left join [" + BsfGlobal.g_sVendorDBName + "].dbo.Branch VBR on C.VendorId=VBR.VendorId  and W.VBranchId=VBR.BranchId  " +
        //            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster BRC on VBR.CityId=BRC.CityId " +
        //            "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.PayAdviceTrans PT On B.BillRegisterId=PT.BillRegisterId   " +
        //            "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.PayAdviceDet PD On PD.PayAdviceId=PT.PayAdviceId   " +
        //            "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.Adjustment AD On AD.BillRegisterId=B.BillRegisterId And PT.EntryId=AD.EntryId  " +
        //            "Left Join (Select A.TypeId,A.TypeName,B.CostCentreId,D.Amount WCTAmt,D.Formula,D.BillRegisterId from BillFormatMaster A " +
        //            "Left Join BillFormat B on A.TypeId=B.TypeId and (A.Type='Q' or A.Type='N') and A.TypeName Like 'W%' and B.CostCentreId>0 " +
        //            "Left Join BillFormatTrans  D on B.TypeId=D.TypeId and D.FormatType='B' and A.TypeName<>'' and D.Amount>0) BT on A.BillRegisterId=BT.BillRegisterId and A.CostCentreId=BT.CostCentreId " +
        //            "Where A.Approve='Y' and A.EDate>='" + sFDate + "' and A.EDate<='" + sTDate + "' and AD.Amount>0 ";

        //        if (argCCId > 0) sSql = sSql + " And A.CostCentreId= " + argCCId + " ";
        //        if (argContId > 0) sSql = sSql + " And A.ContractorId= " + argContId + " ";
        //        if (argCompanyId > 0) sSql = sSql + " And D.CompanyId=" + argCompanyId + " ";
        //        if (BsfGlobal.g_bPowerUser == false)
        //        {
        //            sSql = sSql + " And A.CostCentreId NOT IN (Select CostCentreId From [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.UserCostCentreTrans  " +
        //                "Where UserId=" + BsfGlobal.g_lUserId + ")";
        //        }
        //        sSql = sSql + " and A.WORegisterId>0 order by A.BillRegisterId,A.WORegisterId";

        //        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
        //        dt = new DataTable();
        //        sda.Fill(dt);
        //        sda.Dispose();
        //        string sAddress = "";

        //        double dGrossAmt = 0;

        //        if (dt.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dt.Rows.Count; i++)
        //            {
        //                if (Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["VBranchId"], CommFun.datatypes.vartypenumeric)) != 0)
        //                {
        //                    sAddress = sAddress + CommFun.IsNullCheck(dt.Rows[i]["BRAdd1"], CommFun.datatypes.vartypestring).ToString() + "\n\r";
        //                }
        //                else
        //                {
        //                    if (CommFun.IsNullCheck(dt.Rows[i]["VAddress1"], CommFun.datatypes.vartypestring).ToString() != "" || CommFun.IsNullCheck(dt.Rows[i]["VPhone1"], CommFun.datatypes.vartypestring).ToString() != "" || CommFun.IsNullCheck(dt.Rows[i]["VFax1"], CommFun.datatypes.vartypestring).ToString() != "" || CommFun.IsNullCheck(dt.Rows[i]["VMobile1"], CommFun.datatypes.vartypestring).ToString() != "")
        //                    {
        //                        sAddress = sAddress + (CommFun.IsNullCheck(dt.Rows[i]["VAddress2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VCity"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VPinCode"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VPhone2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VFax2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VMobile2"], CommFun.datatypes.vartypestring).ToString());
        //                    }
        //                    else
        //                    {
        //                        sAddress = sAddress + (CommFun.IsNullCheck(dt.Rows[i]["VAddress2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VCity"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VPinCode"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VPhone2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VFax2"], CommFun.datatypes.vartypestring).ToString() + "\n\r" + CommFun.IsNullCheck(dt.Rows[i]["VMobile2"], CommFun.datatypes.vartypestring).ToString());
        //                    }
        //                }
        //                dt.Rows[i]["Address"] = sAddress;

        //                sSql = "Select A.*,B.Type,B.RefNo from BillFormatTrans A " +
        //                    "Left Join BillFormatMaster B on A.TypeId=B.TypeID and B.Type='W' " +
        //                    "where A.BillRegisterId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["BillRegisterId"], CommFun.datatypes.vartypenumeric)) + "  " +
        //                    "and B.TypeName Not Like 'W%' Order By A.TypeId ";
        //                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
        //                dtBF = new DataTable();
        //                sda.Fill(dtBF);
        //                sda.Dispose();
        //                if (dtBF.Rows.Count > 0)
        //                {
        //                    if (CommFun.IsNullCheck(dt.Rows[i]["Formula"], CommFun.datatypes.vartypestring).ToString() != "" && CommFun.IsNullCheck(dt.Rows[i]["Formula"], CommFun.datatypes.vartypestring).ToString().Contains('*'))
        //                    {
        //                        int indx = CommFun.IsNullCheck(dt.Rows[i]["Formula"], CommFun.datatypes.vartypestring).ToString().IndexOf('*');
        //                        dGrossAmt = CommFun.ComputeFormulavalueForRNew(CommFun.IsNullCheck(dt.Rows[i]["Formula"], CommFun.datatypes.vartypestring).ToString().Substring(0, indx), dtBF, "Amount");
        //                    }
        //                    else
        //                    { dGrossAmt = Convert.ToDouble(CommFun.IsNullCheck(dt.Rows[i]["Formula"], CommFun.datatypes.vartypenumeric)); }
        //                }
        //                dt.Rows[i]["GrossAmt"] = Convert.ToDecimal(dGrossAmt);
        //                sAddress = "";
        //            }
        //            dt.AcceptChanges();
        //        }
        //        sFDate = "";
        //        sTDate = "";
        //        string sPaidDate = "";
        //        string sFormula = "";


        //        if (dt != null)
        //        {
        //            int indxx = 0;
        //            for (int k = 0; k < dt.Rows.Count; k++)
        //            {
        //                sFDate = String.Format("{0:dd-MMM-yyyy}", Convert.ToDateTime(CommFun.IsNullCheck(dt.Rows[k]["WODate"], CommFun.datatypes.VarTypeDate)));
        //                sTDate = String.Format("{0:dd-MMM-yyyy}", Convert.ToDateTime(CommFun.IsNullCheck(dt.Rows[k]["Date"], CommFun.datatypes.VarTypeDate)));
        //                sPaidDate = String.Format("{0:dd-MMM-yyyy}", Convert.ToDateTime(CommFun.IsNullCheck(dt.Rows[k]["PaidDate"], CommFun.datatypes.VarTypeDate)));
        //                if (CommFun.IsNullCheck(dt.Rows[k]["Formula"], CommFun.datatypes.vartypestring).ToString() != "" && CommFun.IsNullCheck(dt.Rows[k]["Formula"], CommFun.datatypes.vartypestring).ToString().Contains('*'))
        //                {
        //                    indxx = CommFun.IsNullCheck(dt.Rows[k]["Formula"], CommFun.datatypes.vartypestring).ToString().IndexOf('*');
        //                    sFormula = CommFun.IsNullCheck(dt.Rows[k]["Formula"], CommFun.datatypes.vartypestring).ToString().Substring(indxx + 1);
        //                }
        //                else { indxx = 0; sFormula = ""; }

        //                sSql = "INSERT INTO TmpBillWCTDetails (SNo,CCName,VendorName,Address,WONo,WODate,NameofWork,WOAmt,VTINNo,BillNo,BillDate,GrossAmt,PaidDate,WCTRate,WCTAmt) " +
        //                    "VALUES (" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["SNo"], CommFun.datatypes.vartypenumeric)) + ",'" + CommFun.IsNullCheck(dt.Rows[k]["CostCentreName"], CommFun.datatypes.vartypestring).ToString() + "', " +
        //                    "'" + CommFun.IsNullCheck(dt.Rows[k]["VendorName"], CommFun.datatypes.vartypestring).ToString() + "','" + CommFun.IsNullCheck(dt.Rows[k]["Address"], CommFun.datatypes.vartypestring).ToString() + "', " +
        //                    "'" + CommFun.IsNullCheck(dt.Rows[k]["WONo"], CommFun.datatypes.vartypestring).ToString() + "','" + sFDate + "','" + CommFun.IsNullCheck(dt.Rows[k]["NameofWork"], CommFun.datatypes.vartypestring).ToString() + "', " +
        //                    " " + Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[k]["WOAmt"], CommFun.datatypes.vartypenumeric)) + ",'" + CommFun.IsNullCheck(dt.Rows[k]["BRTIN"], CommFun.datatypes.vartypestring).ToString() + "', " +
        //                    "'" + CommFun.IsNullCheck(dt.Rows[k]["BillNo"], CommFun.datatypes.vartypestring).ToString() + "','" + sTDate + "'," +
        //                    "" + Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[k]["GrossAmt"], CommFun.datatypes.vartypenumeric)) + ",'" + sPaidDate + "','" + sFormula + "'," +
        //                    " " + Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[k]["WCTAmt"], CommFun.datatypes.vartypenumeric)) + ")";
        //                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
        //                cmd.ExecuteNonQuery();
        //                cmd.Dispose();
        //            }
        //        }

        //        BsfGlobal.g_WPMDB.Close();
        //    }
        //    catch (Exception ex)
        //    {
        //        BsfGlobal.CustomException(ex.Message, ex.StackTrace);
        //    }
        //}

        public DataTable GetWCTDetails()
        {
            SqlCommand cmd = null;
            SqlDataReader dr;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {

                sSql = " Select Distinct CCName,SNo,VendorName,Address,WONO,WODate,NameofWork,WOAmt,BillNo,case when BillDate='01-01-1900' then Null else BillDate end BillDate, " +
                    "GrossAmt,PaidDate,WCTRate,WCTAmt from TmpBillWCTDetails  " +
                    "where WCTAmt>0";

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dr = cmd.ExecuteReader();
                dt = new DataTable();
                dt.Load(dr);
                dr.Close();
                cmd.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }


        public bool Update_FAWorkBill(int argRegId)
        {
            BsfGlobal.Get_ServerDate();
            SqlConnection conn = new SqlConnection();
            conn = BsfGlobal.OpenWorkFlowDB();
            SqlTransaction tran = conn.BeginTransaction();
            bool bUpdate = false;
            try
            {
                FAUpdate.Update_WorkBill(0, BsfGlobal.g_dServerDateTime, 0, argRegId, conn, tran, true);
                tran.Commit();
                bUpdate = true;
            }
            catch (Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
            return bUpdate;
        }



        public bool Update_FAWorkBill(DataTable argDt)
        {
            BsfGlobal.Get_ServerDate();
            SqlConnection conn = new SqlConnection();
            conn = BsfGlobal.OpenWorkFlowDB();
            SqlTransaction tran;
            //string sSql = "";
            int iBillRegId = 0;
            bool bUpdate = false;
            try
            {
                //sSql = "Select BillRegisterId From [" + BsfGlobal.g_sWPMDBName + "]..BillRegister Where Approve='Y'  ";
                //SqlCommand cmd = new SqlCommand(sSql, conn, tran);
                //SqlDataReader sdr = cmd.ExecuteReader();
                //DataTable dt = new DataTable();
                //dt.Load(sdr);
                //sdr.Close();
                //sdr.Dispose();
                //cmd.Dispose();

                for (int i = 0; i < argDt.Rows.Count; i++)
                {
                    tran = conn.BeginTransaction();
                    iBillRegId = Convert.ToInt32(CommFun.IsNullCheck(argDt.Rows[i]["BillRegisterId"], CommFun.datatypes.vartypenumeric));
                    if (FAUpdate.Update_WorkBill(0, BsfGlobal.g_dServerDateTime, 0, iBillRegId, conn, tran, true) == true)
                    {
                        tran.Commit();
                    }
                    else
                    { tran.Rollback(); }

                }
                bUpdate = true;
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
            return bUpdate;
        }

        public DataTable GetBillAdvancePrintDetails(DateTime dStart, DateTime dEnd, int argCompanyId, int argContId, int argCCId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            DataTable dtF = new DataTable();
            DataTable dtP = new DataTable();
            DataTable dtAdvRec = null;
            string sSql = "";
            //DataRow[] dr;
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd;
            string frmdat = string.Format("{0:dd MMM yyyy}", dStart);
            string tdat = string.Format("{0:dd MMM yyyy}", dEnd.AddDays(1));

            try
            {

                sSql = "Update BillRegister set VNo=BillNo where VNo='' ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();

                sSql = "Select A.WORegisterId,D.WONo,'' VNo,D.CostcentreId,D.ContractorId,isnull(D.Amount,0) WorkOrderValue,cast(0 as decimal(18,3)) BilledAmount,isnull(A.Value,0) WOAdvance,sum(CAST(isnull(C.Amount,0) as decimal(18,3))) AdvancePaid, " +
                    "(isnull(A.Value,0)+sum(CAST(isnull(C.Amount,0) as decimal(18,3)))) TotalAdvance ,cast(0 as decimal(18,3)) AdvanceDeduct," +
                    "cast(0 as decimal(18,3)) Balance,cast(0 as decimal(18,3)) EligibleAmount,cast(0 as decimal(18,3)) PrevAdvPaidAmt,0 as BillRegisterId,cast (0 as decimal(18,3)) FAPaidAmt " +
                    "from WOPaymentTermsNew A  " +
                    "Left Join BillRegister B on A.WORegisterId=B.WORegisterId " +
                    "Left Join BillFormatTrans C on B.BillRegisterId=C.BillRegisterId and C.FormatType='A'  " +
                    "Left Join WORegister D on A.WORegisterId=D.WORegisterId  " +
                    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.TermsMaster E on A.TermsId=E.TermsId  " +
                    "and E.TermType='W' and E.Title='Advance'  " +
                    "Where  E.TermType='W' and E.Title='Advance' and D.WODate>='" + frmdat + "' and D.WODate<='" + tdat + "'";

                sSql = sSql + "  group by A.Value,A.WORegisterId,D.CostcentreId,D.ContractorId,D.Amount,D.WONo ";
                sSql = sSql + " Order By A.WORegisterId ";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                //Prev Advance Paid
                for (int j = 0; j < dt.Rows.Count; j++)
                {
                    sSql = "Select isnull(Sum(C.Amount),0) AdvancePaid " +
                       "from WOPaymentTermsNew A  " +
                       "Left Join BillRegister B on A.WORegisterId=B.WORegisterId " +
                       "Left Join BillFormatTrans C on B.BillRegisterId=C.BillRegisterId and C.FormatType='A'  " +
                       "Where B.EDate>='" + frmdat + "' and B.EDate<='" + tdat + "' and B.WORegisterId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["WORegisterId"], CommFun.datatypes.vartypenumeric));

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dt.Rows[j]["PrevAdvPaidAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                    dt.AcceptChanges();
                }

                //if (dt.Rows.Count > 0)
                //{
                //    for (int i = 0; i < dtP.Rows.Count; i++)
                //    {
                //        if (dt != null)
                //        {
                //            if (dt.Rows.Count > 0)
                //            {

                //                dr = dt.Select("WORegisterId=" + Convert.ToInt32(dtP.Rows[i]["WORegisterId"]));
                //                if (dr.Length > 0)
                //                {
                //                    dr[0]["PrevAdvPaidAmt"] = Convert.ToDecimal(dtP.Rows[i]["AdvancePaid"]);
                //                    //dr[0]["BillRegisterId"] = Convert.ToInt32(dtP.Rows[i]["BillRegisterId"]);
                //                    //dr[0]["VNo"] = CommFun.IsNullCheck(dtP.Rows[i]["VNo"], CommFun.datatypes.vartypestring).ToString();

                //                }
                //            }
                //        }
                //    }
                //}

                if (dt.Rows.Count > 0)
                {
                    for (int i1 = 0; i1 < dt.Rows.Count; i1++)
                    {
                        sSql = "Select isnull(SUM(B.Amount),0) DeductAmt,isnull(SUM(A.IOWAmount),0) BilledAmt from BillRegister A " +
                            "Inner Join BillFormatTrans B on A.BillRegisterId=B.BillRegisterId " +
                            "Inner join BillFormatMaster C on B.TypeId=C.TypeId and C.AddType=0 and C.Type IN ('O','P','A') and C.TypeId IN(Select TypeId from BillFormat Where CostCentreId=" + Convert.ToInt32(dt.Rows[i1]["CostCentreId"]) + " and CostCentreId>0) " +
                            "Where A.WORegisterId=" + Convert.ToInt32(dt.Rows[i1]["WORegisterId"]) + " and A.CostCentreID=" + Convert.ToInt32(dt.Rows[i1]["CostCentreId"]);
                        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                        sda.Fill(dtF);
                        sda.Dispose();

                        if (dtF.Rows.Count > 0)
                        {
                            for (int i = 0; i < dtF.Rows.Count; i++)
                            {
                                dt.Rows[i1]["AdvanceDeduct"] = Convert.ToDecimal(dtF.Rows[i]["DeductAmt"]);
                                dt.Rows[i1]["BilledAmount"] = Convert.ToDecimal(dtF.Rows[i]["BilledAmt"]);

                                //dt.Rows[i1]["Balance"] = ((Convert.ToDecimal(dt.Rows[i1]["TotalAdvance"]) - Convert.ToDecimal(dt.Rows[0]["AdvanceDeduct"])));

                                if (((Convert.ToDecimal(dt.Rows[0]["WorkOrderValue"]) - Convert.ToDecimal(dt.Rows[i1]["BilledAmount"])) - Convert.ToDecimal(dt.Rows[i1]["Balance"])) < 0)
                                {
                                    dt.Rows[i1]["EligibleAmount"] = 0;
                                }
                                else
                                {
                                    dt.Rows[i1]["EligibleAmount"] = ((Convert.ToDecimal(dt.Rows[i1]["WorkOrderValue"]) - Convert.ToDecimal(dt.Rows[i1]["BilledAmount"])) - Convert.ToDecimal(dt.Rows[i1]["Balance"]));
                                }
                                dt.AcceptChanges();
                            }
                        }
                        else
                        {
                            //if not Bill... Only Advance
                            //dt.Rows[0]["Balance"] = ((Convert.ToDecimal(dt.Rows[i1]["TotalAdvance"]) - Convert.ToDecimal(dt.Rows[i1]["AdvanceDeduct"])));

                            if (((Convert.ToDecimal(dt.Rows[i1]["WorkOrderValue"]) - Convert.ToDecimal(dt.Rows[i1]["BilledAmount"])) - Convert.ToDecimal(dt.Rows[i1]["Balance"])) < 0)
                            {
                                dt.Rows[i1]["EligibleAmount"] = 0;
                            }
                            else
                            {
                                dt.Rows[i1]["EligibleAmount"] = ((Convert.ToDecimal(dt.Rows[i1]["WorkOrderValue"]) - Convert.ToDecimal(dt.Rows[i1]["BilledAmount"])) - Convert.ToDecimal(dt.Rows[i1]["Balance"]));
                            }
                            dt.AcceptChanges();
                        }
                    }
                }

                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++) //Get WorkOrder Against BillAmount,FA Pait Amount,Advance Recommendation
                    {
                        sSql = "Select isnull(Sum(B.PaidAmount),0) PaidAmount " +
                            "from BillRegister A  " +
                            "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.BillRegister B on B.RefType='WA' and B.BillRegisterId IN (Select isnull(KeyNo,0) KeyNo from BillRegister " +
                            "where WORegisterId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["WORegisterId"], CommFun.datatypes.vartypenumeric)) + " ) " +
                            "Where A.Approve='Y' and A.EDate>='" + frmdat + "' and A.EDate<='" + tdat + "' " +
                            "and A.WORegisterId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["WORegisterId"], CommFun.datatypes.vartypenumeric)) + " and A.FormatType='A'  ";
                        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                        dtAdvRec = new DataTable();
                        sda.Fill(dtAdvRec);
                        if (dtAdvRec.Rows.Count > 0)
                        {
                            dt.Rows[i]["FAPaidAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(dtAdvRec.Rows[0]["PaidAmount"], CommFun.datatypes.vartypenumeric));

                            dt.Rows[i]["Balance"] = (Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["WorkOrderValue"], CommFun.datatypes.vartypenumeric)) - Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["FAPaidAmt"], CommFun.datatypes.vartypenumeric)));
                        }
                    }
                    dt.AcceptChanges();

                }

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

      




        public void InsertTmpBillAdvancePrintDetails(DataTable argDt)
        {
            SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();
            SqlCommand cmd;
            string sSql = "";

            try
            {
                sSql = "Truncate Table TmpBillAdvancePrint";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                for (int u = 0; u < argDt.Rows.Count; u++)
                {

                    sSql = "INSERT INTO TmpBillAdvancePrint (WORegisterId,BillRegisterId,CostCentreId,ContractorId,VNo,WOValue,BilledAmt,WOAdvance,AdvancePaid,TotalAdvance,AdvanceDeduct,PrevAdvPaidAmt,FAPaidAmt,Balance) " +
                    "VALUES  (" + CommFun.IsNullCheck(argDt.Rows[u]["WORegisterId"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BillRegisterId"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["CostCentreId"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["ContractorId"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                     " '" + CommFun.IsNullCheck(argDt.Rows[u]["VNo"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["WorkOrderValue"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BilledAmount"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["WOAdvance"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["AdvancePaid"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["TotalAdvance"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["AdvanceDeduct"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["PrevAdvPaidAmt"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                     " " + CommFun.IsNullCheck(argDt.Rows[u]["FAPaidAmt"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                      " " + CommFun.IsNullCheck(argDt.Rows[u]["Balance"].ToString(), CommFun.datatypes.vartypenumeric) + " " +
                                  " ) ";
                    cmd = new SqlCommand(sSql, conn, tran);
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }

                tran.Commit();
            }
            catch (Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
        }

        public DataTable BillPaymentDetails(DateTime argFDate,DateTime argTDate,int argCCId,int argContId,int argCompanyId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            string sFDate = "";
            string sTDate = "";
            string sCVType="";


            sFDate = String.Format("{0:dd-MMM-yyyy}", argFDate);
            sTDate = String.Format("{0:dd-MMM-yyyy}", argTDate.AddDays(1));

            try
            {
                sCVType=BsfGlobal.GetVoucherType(13);

                sSql = "Select A.BillRegisterId,convert(varchar(10),A.Edate,103) Date,case when convert(varchar(10),B.BillDate,103) Is null then convert(varchar(10),A.Edate,103) Else convert(varchar(10),B.BillDate,103) End BillDate,Isnull(B.BillNo,'') BillNo , ";
                if (sCVType =="CC") sSql = sSql + "A.CCBVNo , " ; else if (sCVType == "CO") sSql = sSql + " A.CompanyBVNo,"  ;
                sSql = sSql + " W.WONo,W.CCWONo,W.Amount WOAmt,C.VendorName,D.CostCentreName,A.BillAmount, " +                    
                    "ISNULL(AD.Amount,0) PaidAmount," +
                    "convert(varchar(10), PD.PayAdviceDate,103) PayAdviceDate, DATEDIFF(dd, A.EDate, PD.PayAdviceDate) ProcessDuration, ISNULL(PD.PayAdviceNo,'') PayAdviceNo, " +
                    "ISNULL(AD.RefNo,'') RefNo,ISNULL(PT.ApproveAmount,0) ApproveAmount, AD.RefDate,ISNULL(AD.ChqNo,'') ChequeNo,convert(varchar(10),AD.ChqDate,103) ChequeDate,  " +
                    "(A.BillAmount- Isnull(B.PaidAmount,0)) Balance  " +
                    "from BillRegister A " +
                    "Left Join ["+BsfGlobal.g_sFaDBName+"].dbo.BillRegister B on A.BillRegisterId=B.ReferenceId and B.RefType='WB' " +
                    "Inner Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster C on A.ContractorId=C.VendorId " +
                    "Inner Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre D on A.CostCentreID=D.CostCentreId " +
                    "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.PayAdviceTrans PT On B.BillRegisterId=PT.BillRegisterId   " +
                    "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.PayAdviceDet PD On PD.PayAdviceId=PT.PayAdviceId   " +
                    "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.Adjustment AD On AD.BillRegisterId=B.BillRegisterId And PT.EntryId=AD.EntryId  " +
                    "Left Join WORegister W On A.WORegisterId=W.WORegisterId " +
                    "Where A.Approve='Y' and A.EDate>='" + sFDate + "' and A.EDate<='" + sTDate + "' and AD.Amount>0 ";

                if (argCCId > 0) sSql = sSql + " And A.CostCentreId= "+argCCId +" " ;
                if (argContId > 0) sSql = sSql + " And A.ContractorId= "+argContId +" " ;
                if (argCompanyId > 0) sSql = sSql + " And D.CompanyId="+argCompanyId + " ";
                if (BsfGlobal.g_bPowerUser == false) { sSql = sSql + " And A.CostCentreId NOT IN (Select CostCentreId From ["+BsfGlobal.g_sWorkFlowDBName+"].dbo.UserCostCentreTrans  " + 
                    "Where UserId="+BsfGlobal.g_lUserId +")" ; }

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable FinancialProgress(DateTime argFrmDate, DateTime argToDate)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            DataTable dtF = new DataTable();
            string sFDate = String.Format("{0:dd-MMM-yyyy}", argFrmDate);
            string sTDate = String.Format("{0:dd-MMM-yyyy}", argToDate.AddDays(1));

            DataRow[] dr;

            try
            {
                sSql = "Select Distinct A.WORegisterId,C.VendorName,A.ContractorId,isnull(F.Amount,0) ContractorValue,cast(0 as Decimal(18,3)) as PaidAmt,isnull(G.Value,0)AdvAmt, " +
                    "'' TypeName,''BType, cast(0 as Decimal(18,3)) as AAdvAmt, cast(0 as Decimal(18,3)) as AAdvDedAmt, cast(0 as Decimal(18,3)) as AAdvBalAmt, " +
                    "cast(0 as Decimal(18,3)) as MBAdvAmt,cast(0 as Decimal(18,3)) as MBAdvDedAmt,cast(0 as Decimal(18,3)) as MBAdvBalAmt, " +
                    "cast(0 as Decimal(18,3)) as MTAdvAmt,cast(0 as Decimal(18,3)) as MTAdvDedAmt,cast(0 as Decimal(18,3)) as MTAdvBalAmt, " +
                    "cast(0 as Decimal(18,3)) as RetentionAmt,cast(0 as Decimal(18,3)) as STAmt,cast(0 as Decimal(18,3)) as TDSAmt,cast(0 as Decimal(18,3)) as WCTAmt,cast(0 as Decimal(18,3)) as Progress,'' Remarks " +
                    "From BillRegister A  " +
                    "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster C On A.ContractorId=C.VendorId  " +
                    "Left Join WORegister F on A.WORegisterId=F.WORegisterId " +
                    "Left Join WOPaymentTermsNew G on A.WORegisterId=G.WORegisterId and G.Value>0 " +
                    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.TermsMaster H on G.TermsId=H.TermsId and H.TermType='W' and H.Title='Advance' " +
                    "Where A.EDate BetWeen '" + sFDate + "' and  '" + sTDate + "' and A.FormatType='B' and F.Amount>0 and A.WORegisterId>0 ";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                //Get Mobilization & Retention from Bill 
                dtF = FinancialProgress2(argFrmDate, argToDate);
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (dtF.Rows.Count > 0)
                    {
                        dr = dtF.Select("ContractorId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["ContractorId"], CommFun.datatypes.vartypenumeric)));
                        if (dr.Length > 0)
                        {
                            foreach (DataRow r in dr)
                            {
                                if (r["BType"].ToString() == "A")
                                {
                                    dt.Rows[i]["AAdvAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["AdvAmt"], CommFun.datatypes.vartypenumeric));
                                    dt.Rows[i]["AAdvDedAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(r["Amount"], CommFun.datatypes.vartypenumeric));
                                    dt.Rows[i]["AAdvBalAmt"] = (Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["AAdvAmt"], CommFun.datatypes.vartypenumeric)) - Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["AAdvDedAmt"], CommFun.datatypes.vartypenumeric)));
                                    dt.Rows[i]["TypeName"] = CommFun.IsNullCheck(r["TypeName"], CommFun.datatypes.vartypestring).ToString();
                                    dt.Rows[i]["BType"] = CommFun.IsNullCheck(r["BType"], CommFun.datatypes.vartypestring).ToString();
                                }
                                else if (r["BType"].ToString() == "P") //Material Advance Recovery
                                {
                                    dt.Rows[i]["MTAdvAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["AdvAmt"], CommFun.datatypes.vartypenumeric));
                                    dt.Rows[i]["MTAdvDedAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(r["Amount"], CommFun.datatypes.vartypenumeric));
                                    dt.Rows[i]["MTAdvBalAmt"] = (Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["MTAdvAmt"], CommFun.datatypes.vartypenumeric)) - Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["MTAdvDedAmt"], CommFun.datatypes.vartypenumeric)));
                                    dt.Rows[i]["TypeName"] = CommFun.IsNullCheck(r["TypeName"], CommFun.datatypes.vartypestring).ToString();
                                    dt.Rows[i]["BType"] = CommFun.IsNullCheck(r["BType"], CommFun.datatypes.vartypestring).ToString();
                                }
                                else if (r["BType"].ToString() == "O")//Mobilization Recovery
                                {
                                    dt.Rows[i]["MBAdvAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["AdvAmt"], CommFun.datatypes.vartypenumeric));
                                    dt.Rows[i]["MBAdvDedAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(r["Amount"], CommFun.datatypes.vartypenumeric));
                                    dt.Rows[i]["MBAdvBalAmt"] = (Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["MBAdvAmt"], CommFun.datatypes.vartypenumeric)) - Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["MBAdvDedAmt"], CommFun.datatypes.vartypenumeric)));
                                    dt.Rows[i]["TypeName"] = CommFun.IsNullCheck(r["TypeName"], CommFun.datatypes.vartypestring).ToString();
                                    dt.Rows[i]["BType"] = CommFun.IsNullCheck(r["BType"], CommFun.datatypes.vartypestring).ToString();
                                }
                                else if (r["BType"].ToString() == "R")//Retention
                                {
                                    dt.Rows[i]["RetentionAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(r["Amount"], CommFun.datatypes.vartypenumeric));
                                    dt.Rows[i]["BType"] = CommFun.IsNullCheck(r["BType"], CommFun.datatypes.vartypestring).ToString();
                                }
                                else if (r["BType"].ToString() == "S")//ServiceTax
                                {
                                    dt.Rows[i]["STAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(r["Amount"], CommFun.datatypes.vartypenumeric));
                                    dt.Rows[i]["BType"] = CommFun.IsNullCheck(r["BType"], CommFun.datatypes.vartypestring).ToString();
                                }
                                else if (r["BType"].ToString() == "T")//TDS
                                {
                                    dt.Rows[i]["TDSAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(r["Amount"], CommFun.datatypes.vartypenumeric));
                                    dt.Rows[i]["BType"] = CommFun.IsNullCheck(r["BType"], CommFun.datatypes.vartypestring).ToString();
                                }
                                else if (r["BType"].ToString() == "N" || r["BType"].ToString() == "W" || r["BType"].ToString() == "Q")//None and WCT only
                                {
                                    int indx = 0;
                                    string sTypeName = "";
                                    if (CommFun.IsNullCheck(r["TypeName"], CommFun.datatypes.vartypestring).ToString().StartsWith("W"))
                                    {
                                        sTypeName=CommFun.IsNullCheck(r["TypeName"], CommFun.datatypes.vartypestring).ToString().Trim();
                                        indx = sTypeName.IndexOf('W', 0);
                                    }
                                    if (indx !=-1)
                                    {
                                        if (CommFun.IsNullCheck(r["TypeName"], CommFun.datatypes.vartypestring).ToString().Substring(indx).Trim() == "WCT")
                                        {
                                            dt.Rows[i]["WCTAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(r["Amount"], CommFun.datatypes.vartypenumeric));
                                            dt.Rows[i]["BType"] = CommFun.IsNullCheck(r["BType"], CommFun.datatypes.vartypestring).ToString();
                                        }
                                    }
                                }

                                dt.Rows[i]["PaidAmt"] = Convert.ToDecimal(CommFun.IsNullCheck(r["PaidAmt"], CommFun.datatypes.vartypenumeric));

                                if (Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["PaidAmt"], CommFun.datatypes.vartypenumeric)) != 0 && Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["ContractorValue"], CommFun.datatypes.vartypenumeric)) != 0)
                                {
                                    dt.Rows[i]["Progress"] = decimal.Round((100 * (Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["PaidAmt"], CommFun.datatypes.vartypenumeric)) / Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[i]["ContractorValue"], CommFun.datatypes.vartypenumeric)))), 2);
                                }
                                else
                                {
                                    dt.Rows[i]["Progress"] = 0;
                                }
                                dt.AcceptChanges();
                            }
                        }

                    }
                }
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable FinancialProgress2(DateTime argFrmDate, DateTime argToDate)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            string sFDate = String.Format("{0:dd-MMM-yyyy}", argFrmDate);

            string sTDate = String.Format("{0:dd-MMM-yyyy}", argToDate.AddDays(1));
            try
            {
                sSql = "Select Distinct B.ContractorId,C.VendorName,D.TypeName,D.Type BType, " +
                    "Sum(A.Amount) Amount,isnull(Sum(E.PaidAmount),0) PaidAmt  " +
                    "From BillFormatTrans A  " +
                    "Inner Join BillRegister B On A.BillRegisterId=B.BillRegisterId  " +
                    "Left Join ["+BsfGlobal.g_sVendorDBName+"].dbo.VendorMaster C On B.ContractorId=C.VendorId  " +
                    "join (Select TypeId,TypeName,Type from BillFormatMaster where Header=0 and Type IN('A','O','P','R','N','S','T','W') ) D on A.TypeId=D.TypeID  " +
                    "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.BillRegister E on B.KeyNo=E.BillRegisterId  " +
                    "Where B.EDate BetWeen '" + sFDate + "' and  '" + sTDate + "' And B.CostCentreID Not in  " +
                    "(SELECT CostCentreId FROM [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.UserCostCentreTrans WHERE UserId="+BsfGlobal.g_lUserId+") and B.FormatType='B' and A.Amount >0 " +
                    "Group by C.VendorName,D.TypeName,A.TypeId,B.ContractorId,D.Type ";
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();               
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public decimal getWOSumQty(int argCCId, int argIOWID, int argContractorId, int argAnalysID, int argCompId,int argWoRegId,bool argAmendment,string argType)
        {
            decimal getIOWCumQty = 0;
            SqlCommand Command;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            decimal dWoQty = 0;
            decimal dBQty = 0;
            string sWORegIds = "";
            try
            {
                if (argAmendment == true)
                {
                    sWORegIds = CommFun.GetAmendWORegIdNew(argWoRegId, BsfGlobal.g_WPMDB);
                }                
                if (argCompId != 0)
                {
                    if (argAmendment == true)
                    {
                       
                        sSql = "Select Sum(A.Qtty-C.BilledQty) WOQty from WOTrans A  " +
                            "Inner join WORegister B On A.WORegisterId=B.WORegisterId  " +
                            "Join (Select Sum(BilledQty) BilledQty,Comp_Id from WOTrans Where WORegisterId In(" + sWORegIds.TrimEnd(',')+") Group By Comp_Id)  " +
                               "C on A.Comp_Id=C.Comp_ID  " +
                               "Where B.WORegisterId=" + argWoRegId + " and  B.ContractorId=" + argContractorId + "and B.CostCentreId=" + argCCId + " and A.Comp_Id=" + argCompId;
                    }
                    else
                    {
                        sSql = "Select Sum(A.Qtty) WoQty from WOTrans A " +
                            "Inner join WORegister B On A.WORegisterId=B.WORegisterId " +
                            "Where B.WORegisterId=" + argWoRegId + " and  B.ContractorId=" + argContractorId + " and B.CostCentreId=" + argCCId + " and A.Comp_Id=" + argCompId;
                    }
                    Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                    else
                    {
                        dWoQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                    }
                    sSql = "Select Sum(A.Qty) BQty from BillTrans A " +
                        "Inner join BillRegister B On A.BillRegisterId=B.BillRegisterId  " +
                      "Where A.WORegisterId=" + argWoRegId + " and B.ContractorId=" + argContractorId + " and B.CostCentreId=" + argCCId + " and A.Comp_Id=" + argCompId;
                    Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                    else
                    {
                        dBQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                    }
                    //getIOWCumQty = dWoQty - dBQty;
                    if (dWoQty < dBQty)
                        getIOWCumQty =dWoQty;
                    else
                        getIOWCumQty = dWoQty - dWoQty;

                }
                else
                {
                    if (argAmendment == true)
                    {                      
                        sSql = "Select Sum(A.Qtty-C.BilledQty) WOQty from WOTrans A  " +
                           "Inner join WORegister B On A.WORegisterId=B.WORegisterId  " +
                           "Join (Select Sum(BilledQty) BilledQty,IOW_ID from WOTrans Where WORegisterId In(" + sWORegIds.TrimEnd(',') + ") Group By IOW_ID)  " +
                              "C on A.IOW_ID=C.IOW_ID  " +
                              "Where B.WORegisterId=" + argWoRegId + " and  B.ContractorId=" + argContractorId + "and B.CostCentreId=" + argCCId + " and A.IOW_ID=" + argIOWID;
                    }
                    else
                    {
                        sSql = "Select Sum(A.Qtty) WoQty from WOTrans A " +
                            "Inner join WORegister B On A.WORegisterId=B.WORegisterId " +
                            "Where B.WORegisterId=" + argWoRegId + " and  B.ContractorId=" + argContractorId + " and B.CostCentreId=" + argCCId + " and A.IOW_ID=" + argIOWID;
                    }
                  Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                  if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                  else
                  {
                      dWoQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                  }    

                  sSql = "Select Sum(A.Qty) BQty from BillTrans A " +
                      "Inner join BillRegister B On A.BillRegisterId=B.BillRegisterId  " +
                    "Where A.WORegisterId="+argWoRegId+" and B.ContractorId="+argContractorId+" and B.CostCentreId="+argCCId+" and A.IOW_ID="+argIOWID;
                  Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                  if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                  else
                  {
                      dBQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                  }

                  if(dWoQty<dBQty)
                      getIOWCumQty = dWoQty;
                  else
                      getIOWCumQty = dWoQty - dWoQty;

                }                          
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
            }
            return getIOWCumQty;
        }

        public decimal getWOWBSQty(int argCCId, int argIOWID, int argContractorId, int argAnalysID, int argCompId, string argType, int argWoRegId,bool argWoAmdment)
        {
            decimal getIOWCumQty = 0;
            SqlCommand Command;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            decimal dWoQty = 0;
            decimal dBQty = 0;
            decimal dWOAmndBilledQty = 0;
            string sWORegIds = "";
            try
            {
                if (argWoAmdment == true)
                {
                    sWORegIds = CommFun.GetAmendWORegIdNew(argWoRegId, BsfGlobal.g_WPMDB);
                }
                
                if (argType == "S" || argType == "I")
                {
                    if (argAnalysID == 0)
                    {
                        sSql = "Select isnull(Sum(A.Qty),0) Qty From WOWBSTrans A " +
                        "Inner Join WOTrans B on A.WOTransId=B.WOTransId " +
                        "Inner Join WORegister C on B.WORegisterId=C.WORegisterId " +
                        "Where C.ContractorId = " + argContractorId + " and " +
                        "C.CostCentreId = " + argCCId + " and C.WORegisterId="+argWoRegId+" and B.IOW_ID = " + argIOWID + "  and B.WOType='" + argType + "' ";

                        Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                        else
                            dWoQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));


                        sSql = "Select isnull(Sum(A.Qty),0) Qty From BillWBSTrans A " +
                        "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                        "Where C.ContractorId = " + argContractorId + " and " +
                        "C.CostCentreId = " + argCCId + " and B.WORegisterId=" + argWoRegId + " and B.IOW_ID = " + argIOWID + "  and B.BillType='" + argType + "' ";

                        Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                        else
                            dBQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));

                        getIOWCumQty = dWoQty - dBQty;
                      
                    }
                    else
                    {
                        sSql = "Select isnull(Sum(A.Qty),0) Qty From WOWBSTrans A " +
                        "Inner Join WOTrans B on A.WOTransId=B.WOTransId " +
                        "Inner Join WORegister C on B.WORegisterId=C.WORegisterId " +
                        "Where C.ContractorId = " + argContractorId + " and " +
                        "C.CostCentreId = " + argCCId + " and C.WORegisterId=" + argWoRegId + " and A.AnalysisId ="+argAnalysID+" and B.IOW_ID = " + argIOWID + "  and B.WOType='" + argType + "' ";

                        Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                        else
                            dWoQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));


                        sSql = "Select isnull(Sum(A.Qty),0) Qty From BillWBSTrans A " +
                        "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                        "Where C.ContractorId = " + argContractorId + " and " +
                        "C.CostCentreId = " + argCCId + " and B.WORegisterId=" + argWoRegId + " and A.AnalysisId =" + argAnalysID + " and B.IOW_ID = " + argIOWID + "  and B.BillType='" + argType + "' ";

                        Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                        else
                            dBQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));

                        getIOWCumQty = dWoQty - dBQty;                       
                    }

                    //Get Amendment WorkOrder BilledQty Modified 09/04/2013
                    if (argWoAmdment == true)
                    {                     
                        sSql = "Select Sum(A.BilledQty) BilledQty from WOTrans A " +
                          "Left Join WORegister B On A.WORegisterId=B.WORegisterId " +
                              "Where A.WORegisterId In " +
                              "(" + sWORegIds.TrimEnd(',') + ") and B.CostCentreId=" + argCCId + " and B.ContractorId=" + argContractorId + " and A.IOW_ID =" + argIOWID + " ";
                        Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);

                        if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                        else
                        {
                            dWOAmndBilledQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                        }
                        if (getIOWCumQty != 0)
                        {
                            if (getIOWCumQty>dWOAmndBilledQty)
                                getIOWCumQty = getIOWCumQty - dWOAmndBilledQty;
                            else
                                getIOWCumQty = dWOAmndBilledQty - getIOWCumQty;
                        }
                        else
                            getIOWCumQty = 0;
                    }                   
                }
                else
                {
                    if (argAnalysID == 0)
                    {
                        sSql = "Select isnull(Sum(A.Qty),0) Qty From WOIOWTrans A " +
                        "Inner Join WOTrans B on A.WOTransId=B.WOTransId " +
                        "Inner Join WORegister C on B.WORegisterId=C.WORegisterId " +
                        "Where C.ContractorId = " + argContractorId + " and " +
                        "C.CostCentreId = " + argCCId + " and A.IOW_ID=" + argIOWID + " and B.Comp_ID = " + argCompId + " and C.WORegisterId=" + argWoRegId + " and B.WOType='" + argType + "' ";

                        Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                        else
                        {
                            dWoQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                        }

                        sSql = "Select isnull(Sum(A.Qty),0) Qty From BillIOWTrans A " +
                        "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                        "Where C.ContractorId = " + argContractorId + " and " +
                        "C.CostCentreId = " + argCCId + " and A.IOW_ID=" + argIOWID + " and B.Comp_ID = " + argCompId + " and B.WORegisterId=" + argWoRegId + " and B.BillType='" + argType + "' ";

                        Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                        else
                        {
                            dBQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                        }

                        getIOWCumQty = dWoQty - dBQty;

                        //Get Amendment WorkOrder BilledQty Modified 09/04/2013
                        if (argWoAmdment == true)
                        {                          
                            sSql = "Select Sum(A.BilledQty) BilledQty from WOTrans A " +
                                "Left Join WORegister B On A.WORegisterId=B.WORegisterId " +
                              "Where A.WORegisterId In " +
                              "(" + sWORegIds.TrimEnd(',') + ") and B.CostCentreId=" + argCCId + " and B.ContractorId=" + argContractorId + " and A.Comp_ID =" + argCompId + " ";

                            Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);

                            if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                            else
                            {
                                dWOAmndBilledQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                            }
                            if (getIOWCumQty != 0)
                            {
                                if (getIOWCumQty > dWOAmndBilledQty)
                                    getIOWCumQty = getIOWCumQty - dWOAmndBilledQty;
                                else
                                    getIOWCumQty = dWOAmndBilledQty - getIOWCumQty;
                            }
                            else
                                getIOWCumQty = 0;
                            
                        }
                    }
                    else
                    {
                        sSql = "Select isnull(Sum(A.Qty),0) Qty From WOIOWTrans A " +
                        "Inner Join WOTrans B on A.WOTransId=B.WOTransId " +
                        "Inner Join WORegister C on B.WORegisterId=C.WORegisterId " +
                        "Where C.ContractorId = " + argContractorId + " and " +
                        "C.CostCentreId = " + argCCId + " and A.IOW_ID=" + argIOWID + " and B.Comp_ID = " + argCompId + "  and C.WORegisterId=" + argWoRegId + " and A.AnalysisHeadId = " + argAnalysID + " and B.WOType='" + argType + "' ";

                        Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                        else
                        {
                            dWoQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                        }

                        sSql = "Select isnull(Sum(A.Qty),0) Qty From BillIOWTrans A " +
                        "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                        "Where C.ContractorId = " + argContractorId + " and " +
                        "C.CostCentreId = " + argCCId + " and A.IOW_ID=" + argIOWID + " and B.Comp_ID = " + argCompId + "  and B.WORegisterId=" + argWoRegId + " and A.AnalysisHeadId = " + argAnalysID + " and B.BillType='" + argType + "' ";

                        Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                        else
                        {
                            dBQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                        }
                        getIOWCumQty = dWoQty - dBQty;

                        //Get Amendment WorkOrder BilledQty Modified 09/04/2013
                        if (argWoAmdment == true)
                        {                           
                            sSql = "Select Sum(A.BilledQty) BilledQty from WOTrans A " +
                                "Left Join WORegister B On A.WORegisterId=B.WORegisterId " +
                                "Where A.WORegisterId In " +
                                "(" + sWORegIds.TrimEnd(',') + ") and A.AnalysisHeadID =" + argAnalysID + " and B.CostCentreId=" + argCCId + " and B.ContractorId=" + argContractorId + " and A.Comp_ID =" + argCompId + " ";

                            Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);

                            if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                            else
                            {
                                dWOAmndBilledQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                            }
                            if (getIOWCumQty != 0)
                            {
                                if (getIOWCumQty > dWOAmndBilledQty)
                                    getIOWCumQty = getIOWCumQty - dWOAmndBilledQty;
                                else
                                    getIOWCumQty = dWOAmndBilledQty - getIOWCumQty;
                            }
                            else
                                getIOWCumQty = 0;
                            
                        }
                    }                                
                  
                }
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
            }            
            return getIOWCumQty;
        }


        public void InsertBillLSWBSTrans(int argBillRegId, int argRevId, string argSplit,string argLSCCNo,string argDBName)
        {
            BsfGlobal.OpenWPMDB();     
            string sSql = "";
            DataTable dt = new DataTable();
            SqlCommand cmd;
            try
            {
                sSql = "Truncate Table TmpBillLSWBSTrans ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "Select Distinct LabourTypeId From BillLabourType " + 
                    "Where BillRegisterId=" + argBillRegId;
                SqlDataAdapter da = new SqlDataAdapter(sSql,BsfGlobal.g_WPMDB);
                da.Fill(dt);
                da.Dispose();  
              
                if (dt.Rows.Count > 0)
                {
                    for (int k = 0; k < dt.Rows.Count; k++)
                    {
                        if (argSplit == "Y")
                        {
                            sSql = "Insert Into TmpBillLSWBSTrans (AnalysisId,Level3,Level2,Level1,AnalysisName,LabourTypeId,WBSQty,Rate,Amount,BillRegId,LSCCVNo,LSID) " +
                               "Select * from (Select A.AnalysisId,A.Level3,A.Level2,A.Level1,A.AnalysisHeadName,(" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["LabourTypeId"], CommFun.datatypes.vartypenumeric)) + ") as ID,  " +
                               "isnull(LS.Qty,0) WBSQty,isnull(LS.Rate,0) Rate,isnull(LS.Amount,0) Amount,(" + argBillRegId + ") as BRegId,isnull(LSM.CCVNo,'') CCVNo,isnull(LS.LSId,0) LSID  " +
                                "from (Select G.AnalysisId,case when E.AnalysisHeadName Is null then '' Else E.AnalysisHeadName End Level3,  " +
                                "case when D.AnalysisHeadName Is null then '' Else D.AnalysisHeadName End Level2,  case when C.AnalysisHeadName Is null then '' Else C.AnalysisHeadName End Level1, " +
                                "A.AnalysisHeadName from  " +
                                "(Select C.Analysis_Id AnalysisId,(A.Qtty/B.Qtty)*C.Qty Qty   " +
                                "from [" + argDBName + "].dbo.Project_DetailsC A    " +
                                "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + argRevId + "  " +
                                "Inner Join [" + argDBName + "].dbo.AnalysisIOWC C on A.ProjIOWId=C.ProjIOWId and C.Revision_Id=" + argRevId + "   " +
                                "Where A.Resource_ID=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["LabourTypeId"], CommFun.datatypes.vartypenumeric)) + " and A.Revision_ID=" + argRevId + "    " +
                                "Union All   " +
                                "Select D.Analysis_Id AnalysisId,((A.Qtty*C.Qty)/B.Qtty)*D.Qty Qty   " +
                                "from [" + argDBName + "].dbo.Project_DetailsC A    " +
                                "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + argRevId + "   " +
                                "Inner Join [" + argDBName + "].dbo.AnalysisIOWC D on A.ProjIOWId=D.ProjIOWId and D.Revision_Id=" + argRevId + "    " +
                                "Inner Join (Select MResource_Id,Qty from [" + argDBName + "].dbo.Activity_Analysis    " +
                                "Where Resource_ID=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["LabourTypeId"], CommFun.datatypes.vartypenumeric)) + " and Rev_Id=" + argRevId + " and Analysis_Type='M') C on A.Resource_ID=C.MResource_ID and A.RateType='M'   " +
                                "Where A.Revision_ID=" + argRevId + "    " +
                                "Union All    " +
                                "Select D.Analysis_Id AnalysisId,((A.Qtty*C.Qty)/B.Qtty)*D.Qty Qty   " +
                                "from [" + argDBName + "].dbo.Project_DetailsC A    " +
                                "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + argRevId + "    " +
                                "Inner Join [" + argDBName + "].dbo.AnalysisIOWC D on A.ProjIOWId=D.ProjIOWId and D.Revision_Id=" + argRevId + "    " +
                                "Inner Join (Select MResource_Id,Qty from [" + argDBName + "].dbo.Activity_Analysis    " +
                                "Where Resource_ID=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["LabourTypeId"], CommFun.datatypes.vartypenumeric)) + " and Rev_Id=" + argRevId + " and Analysis_Type='A') C on A.Resource_ID=C.MResource_ID and A.RateType='A'  " +
                                "Where A.Revision_ID=1) G   " +
                                "Left Join [" + argDBName + "].dbo.AnalysisHeads A on G.AnalysisId=A.AnalysisID and A.LastLevel=1    " +
                                "Left Join [" + argDBName + "].dbo.AnalysisHeads C on A.ParentID=C.AnalysisID    " +
                                "Left Join [" + argDBName + "].dbo.AnalysisHeads D on C.ParentID=D.AnalysisID    " +
                                "Left Join [" + argDBName + "].dbo.AnalysisHeads E on D.ParentID=E.AnalysisID    " +
                                "Where G.Qty>0  " +
                                "Group by G.AnalysisId,E.AnalysisHeadName,D.AnalysisHeadName,C.AnalysisHeadName,A.AnalysisHeadName) A " +
                                "Left join BillLSWBSTrans LS on A.AnalysisId=LS.AnalysisId and LS.LabourTypeId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["LabourTypeId"], CommFun.datatypes.vartypenumeric)) + " and LS.BillRegisterId =" + argBillRegId + " and LS.Qty>0  "  +
                                "Left join LabourStrengthMaster LSM on LS.LSId=LSM.LabourStrengthId " +

                                ") A " +
                                "Where A.WBSQty>0";
                        }
                        else
                        {
                            sSql = "Insert Into TmpBillLSWBSTrans (AnalysisId,Level3,Level2,Level1,AnalysisName,LabourTypeId,WBSQty,Rate,Amount,BillRegId,LSCCVNo,LSID)  " +
                                "Select * from  " +
                                "(Select A.AnalysisId,A.Level3,A.Level2,A.Level1,A.RefSerialNo AnalysisHeadName,(" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["LabourTypeId"], CommFun.datatypes.vartypenumeric)) + ") as ID,  " +
                                "isnull(LS.Qty,0) WBSQty,isnull(LS.Rate,0) Rate,isnull(LS.Amount,0) Amount,(" + argBillRegId + ") as BRegId,isnull(LSM.CCVNo,'') CCVNo,isnull(LS.LSId,0) LSID from (Select G.AnalysisId,'' Level3,   " +
                                "'' Level2,'' Level1, G.RefSerialNo from   " +
                                "(Select B.ProjIOWId AnalysisId,C.Specification RefSerialNo,A.Qtty Qty from [" + argDBName + "].dbo.Project_DetailsC A " +
                                "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Revision_ID=" + argRevId + " " +
                                "Left Join [" + argDBName + "].dbo.Project_IOW C on B.ProjIOWID=C.Project_IOW_ID   " +
                                "Where A.Resource_ID=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["LabourTypeId"], CommFun.datatypes.vartypenumeric)) + " and A.Revision_ID="+argRevId+" " +
                                "Union All " +
                                "Select B.ProjIOWId AnalysisId,D.Specification RefSerialNo,(A.Qtty*C.Qty) Qty from [" + argDBName + "].dbo.Project_DetailsC A " +
                                "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Revision_ID=" + argRevId + " " +
                                "Inner Join (Select MResource_Id,Qty from [" + argDBName + "].dbo.Activity_Analysis " +
                                "Where Resource_ID=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["LabourTypeId"], CommFun.datatypes.vartypenumeric)) + " and Rev_Id=" + argRevId + " and Analysis_Type='M') C on A.Resource_ID=C.MResource_ID and A.RateType='M' " +
                                "Left Join [" + argDBName + "].dbo.Project_IOW D on B.ProjIOWID=D.Project_IOW_ID   " +
                                "Where A.Revision_ID="+argRevId+" " +
                                "Union All     " +
                                "Select B.ProjIOWId AnalysisId,D.Specification RefSerialNo,(A.Qtty*C.Qty) Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                                "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Revision_ID=" + argRevId + " " +
                                "Inner Join (Select MResource_Id,Qty from [" + argDBName + "].dbo.Activity_Analysis   " +
                                "Where Resource_ID=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["LabourTypeId"], CommFun.datatypes.vartypenumeric)) + " and Rev_Id=" + argRevId + " and Analysis_Type='A') C on A.Resource_ID=C.MResource_ID and A.RateType='A' " +
                                "Left Join [" + argDBName + "].dbo.Project_IOW D on B.ProjIOWID=D.Project_IOW_ID  " +
                                "Where A.Revision_ID=" + argRevId + ")G    " +
                                "Left Join [" + argDBName + "].dbo.AnalysisHeads A on G.AnalysisId=A.AnalysisID and A.LastLevel=1     " +
                                "Left Join [" + argDBName + "].dbo.AnalysisHeads C on A.ParentID=C.AnalysisID     " +
                                "Left Join [" + argDBName + "].dbo.AnalysisHeads D on C.ParentID=D.AnalysisID     " +
                                "Left Join [" + argDBName + "].dbo.AnalysisHeads E on D.ParentID=E.AnalysisID     " +
                                "Where G.Qty>0  Group by G.AnalysisId,E.AnalysisHeadName,D.AnalysisHeadName,C.AnalysisHeadName,A.AnalysisHeadName,G.RefSerialNo) A  " +
                                "Left join BillLSWBSTrans LS on A.AnalysisId=LS.AnalysisId and LS.LabourTypeId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["LabourTypeId"], CommFun.datatypes.vartypenumeric)) + " and LS.BillRegisterId ="+argBillRegId+" and LS.Qty>0 " +
                                "Left join LabourStrengthMaster LSM on LS.LSId=LSM.LabourStrengthId " +
                                ") A  " +
                                "Where A.WBSQty>0 ";
                        }
                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        cmd.ExecuteNonQuery();                        
                    }
                }
                dt.Dispose();

                cmd.Dispose();
                BsfGlobal.g_WPMDB.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
        }

        public DataTable  GetWOAdvanceAdvAmt(int argCCId,int argContId,int argWoRegId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                sSql = "Select B.TermsId,(B.Value-B.AdjustAmount) WoAdvAmt from WORegister A " +
                        "Inner Join WOPaymentTermsNew B on A.WORegisterId=B.WORegisterId and B.WORegisterId=" + argWoRegId + " " +
                        "Inner Join ["+BsfGlobal.g_sWorkFlowDBName+"].dbo.TermsMaster C on B.TermsId=C.TermsId and C.TermType='W' and C.Title='Advance' " +
                        "Where A.WORegisterId="+argWoRegId+" and A.CostCentreId="+argCCId+" and A.ContractorID=" + argContId;
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable GetWOAdvanceDetails(int argBillRegId, int argWORegId, int argCostCentreId, int argContId)
        {
            //SqlDataAdapter sda;
            DataTable dtAdvance = new DataTable();
            //DataTable dt = null;
            //DataTable dtF = new DataTable();
            //DataTable dtP = new DataTable();
            string sSql = "";
            //DataRow[] dr;
            BsfGlobal.OpenWPMDB();
            string sWORegId = "";


            dtAdvance.Columns.Add("WorkOrder",typeof(decimal));
            dtAdvance.Columns.Add("Billed",typeof(decimal));
            dtAdvance.Columns.Add("MobAdvance",typeof(decimal));
            dtAdvance.Columns.Add("AdvancePaid",typeof(decimal));
            dtAdvance.Columns.Add("TotalAdvance",typeof(decimal));
            dtAdvance.Columns.Add("AdvanceDeduct",typeof(decimal));
            dtAdvance.Columns.Add("Balance",typeof(decimal));
            dtAdvance.Columns.Add("Eligible",typeof(decimal));
            dtAdvance.Columns.Add("PrevAmount",typeof(decimal));

            //try
            //{

            DataRow dRow = dtAdvance.NewRow();
            dRow["WorkOrder"] = 0;
            dRow["Billed"] = 0;
            dRow["MobAdvance"] = 0;
            dRow["AdvancePaid"] = 0;
            dRow["TotalAdvance"] = 0;
            dRow["AdvanceDeduct"] = 0;
            dRow["Balance"] = 0;
            dRow["Eligible"] = 0;
            dRow["PrevAmount"] = 0;


            if (argWORegId != 0)
            {
                sWORegId = CommFun.GetAmendWORegIdNew(argWORegId, BsfGlobal.g_WPMDB);
            }

            SqlCommand cmd;
            SqlDataReader sdr;
            DataTable dtW;

            if (sWORegId !="")
            {
                sSql = "Select Amount from WORegister Where WORegisterId in (" + sWORegId + ") and Approve='Y' and LiveWO=0" ;
                dtW = new DataTable();
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                sdr = cmd.ExecuteReader();
                dtW.Load(sdr);
                sdr.Close();
                cmd.Dispose();

                if (dtW.Rows.Count > 0) { dRow["WorkOrder"] = Convert.ToDecimal(CommFun.IsNullCheck(dtW.Rows[0]["Amount"],CommFun.datatypes.vartypenumeric));}
                dtW.Dispose();

                sSql = "Select Sum(A.Value) Amount from WOPaymentTermsNew  A " +
                       "Inner Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.TermsMaster B on A.TermsId=B.TermsId  " +
                       "Inner Join WOREgister C on A.WOREgisterId=C.WORegisterId " +
                       "Where A.WORegisterId in (" + sWORegId + ") and C.Approve='Y' and B.TermType='W' and B.Title ='Advance'";

                dtW = new DataTable();
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                sdr = cmd.ExecuteReader();
                dtW.Load(sdr);
                sdr.Close();
                cmd.Dispose();

                if (dtW.Rows.Count > 0) { dRow["MobAdvance"] = Convert.ToDecimal(CommFun.IsNullCheck(dtW.Rows[0]["Amount"], CommFun.datatypes.vartypenumeric)); }
                dtW.Dispose();
            }


            sSql = "Select Sum(A.Amount) Amount from BillFormatTrans A " +
                   "Inner Join BillRegister B on A.BillRegisterId = B.BillRegisterId " +
                   "Where A.TypeId in(1,8) and B.CostCentreId = " + argCostCentreId + " and B.ContractorId = " + argContId;

            if (sWORegId != "") { sSql = sSql + " and B.WORegisterId  in (" + sWORegId + ")"; }
            dtW = new DataTable();
            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            sdr = cmd.ExecuteReader();
            dtW.Load(sdr);
            sdr.Close();
            cmd.Dispose();

            if (dtW.Rows.Count > 0) { dRow["Billed"] = Convert.ToDecimal(CommFun.IsNullCheck(dtW.Rows[0]["Amount"], CommFun.datatypes.vartypenumeric)); }
            dtW.Dispose();

            sSql = "Select Sum(A.Amount) Amount from BillFormatTrans A " +
                    "Inner Join BillRegister B on A.BillRegisterId = B.BillRegisterId " +
                    "Inner Join BillFormatMaster C on A.TypeId = C.TypeId " +
                    "Where C.AddType=1 and A.Add_Less_Flag='+' and C.FormatTypeId in (9,12,13) and B.CostCentreId = " + argCostCentreId + " and B.ContractorId = " + argContId;

            if (sWORegId != "") { sSql = sSql + " and B.WORegisterId  in (" + sWORegId + ")"; }
            dtW = new DataTable();
            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            sdr = cmd.ExecuteReader();
            dtW.Load(sdr);
            sdr.Close();
            cmd.Dispose();

            if (dtW.Rows.Count > 0) { dRow["AdvancePaid"] = Convert.ToDecimal(CommFun.IsNullCheck(dtW.Rows[0]["Amount"], CommFun.datatypes.vartypenumeric)); }
            dtW.Dispose();

            sSql = "Select Sum(A.Amount) Amount from BillFormatTrans A " +
                     "Inner Join BillRegister B on A.BillRegisterId = B.BillRegisterId " +
                     "Inner Join BillFormatMaster C on A.TypeId = C.TypeId " +
                     "Where C.AddType=0 and A.Add_Less_Flag='-' and C.FormatTypeId in (9,12,13) and B.CostCentreId = " + argCostCentreId + " and B.ContractorId = " + argContId;

            if (sWORegId != "") { sSql = sSql + " and B.WORegisterId  in (" + sWORegId + ")"; }
            dtW = new DataTable();
            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            sdr = cmd.ExecuteReader();
            dtW.Load(sdr);
            sdr.Close();
            cmd.Dispose();

            if (dtW.Rows.Count > 0) { dRow["AdvanceDeduct"] = Convert.ToDecimal(CommFun.IsNullCheck(dtW.Rows[0]["Amount"], CommFun.datatypes.vartypenumeric)); }
            dtW.Dispose();


            sSql = "Select Sum(A.Amount) Amount from BillFormatTrans A " +
                     "Inner Join BillRegister B on A.BillRegisterId = B.BillRegisterId " +
                     "Inner Join BillFormatMaster C on A.TypeId = C.TypeId " +
                     "Where C.AddType=1 and A.Add_Less_Flag='+' and C.FormatTypeId in (9,12,13) and A.BillRegisterId= " + argBillRegId;
            dtW = new DataTable();
            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            sdr = cmd.ExecuteReader();
            dtW.Load(sdr);
            sdr.Close();
            cmd.Dispose();

            if (dtW.Rows.Count > 0) { dRow["PrevAmount"] = Convert.ToDecimal(CommFun.IsNullCheck(dtW.Rows[0]["Amount"], CommFun.datatypes.vartypenumeric)); }
            dtW.Dispose();


            dRow["TotalAdvance"] = Convert.ToDecimal(dRow["MobAdvance"]) + Convert.ToDecimal(dRow["AdvancePaid"]);
            dRow["Balance"] = Convert.ToDecimal(dRow["TotalAdvance"]) - Convert.ToDecimal(dRow["AdvanceDeduct"]);

            dRow["Eligible"] = Convert.ToDecimal(dRow["WorkOrder"]) - (Convert.ToDecimal(dRow["Billed"]) + Convert.ToDecimal(dRow["Balance"]));

            dtAdvance.Rows.Add(dRow);



                    //sSql = "Select A.WORegisterId,isnull(D.Amount,0) WorkOrderValue,cast(0 as decimal(18,3)) BilledAmount,isnull(A.Value,0) WOAdvance,sum(CAST(isnull(C.Amount,0) as decimal(18,3))) AdvancePaid, " +
                    //    "(isnull(A.Value,0)+sum(CAST(isnull(C.Amount,0) as decimal(18,3)))) TotalAdvance ,cast(0 as decimal(18,3)) AdvanceDeduct," +
                    //    "cast(0 as decimal(18,3)) Balance,cast(0 as decimal(18,3)) EligibleAmount,cast(0 as decimal(18,3)) PrevAdvPaidAmt " +
                    //    "from WOPaymentTermsNew A  " +
                    //    "Left Join BillRegister B on A.WORegisterId=B.WORegisterId " +
                    //    "Left Join BillFormatTrans C on B.BillRegisterId=C.BillRegisterId and C.FormatType='A'  " +
                    //    //"Left join BillFormatMaster F on C.TypeId=F.TypeId and F.AddType=0 " +
                    //    "Left Join WORegister D on A.WORegisterId=D.WORegisterId  " +
                    //    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.TermsMaster E on A.TermsId=E.TermsId  " +
                    //    "and E.TermType='W' and E.Title='Advance'  " +
                    //    "Where A.WORegisterId In(" + sWORegId + ") and E.TermType='W' and E.Title='Advance' ";


                    //sSql = sSql + "  group by A.Value,A.WORegisterId,D.Amount";
                    //sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    //dt = new DataTable();
                    //sda.Fill(dt);
                    //sda.Dispose();

                    ////Prev Advance Paid

                    //sSql = "Select A.WORegisterId,sum(CAST(isnull(C.Amount,0) as decimal(18,3))) AdvancePaid " +
                    //   "from WOPaymentTermsNew A  " +
                    //   "Left Join BillRegister B on A.WORegisterId=B.WORegisterId " +
                    //   "Left Join BillFormatTrans C on B.BillRegisterId=C.BillRegisterId and C.FormatType='A'  " +
                    //    //"Left join BillFormatMaster F on C.TypeId=F.TypeId and F.AddType=0 " +
                    //   "Left Join WORegister D on A.WORegisterId=D.WORegisterId  " +
                    //   "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.TermsMaster E on A.TermsId=E.TermsId  " +
                    //   "and E.TermType='W' and E.Title='Advance'  " +
                    //   "Where A.WORegisterId In(" + sWORegId + ") and E.TermType='W' and E.Title='Advance' ";

                    //if (argBillRegId != 0)
                    //    sSql = sSql + " and B.BillRegisterId=" + argBillRegId;

                    //sSql = sSql + "  group by A.WORegisterId";

                    //sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    //sda.Fill(dtP);
                    //sda.Dispose();

                    //if (dt.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < dtP.Rows.Count; i++)
                    //    {
                    //        if (dt != null)
                    //        {
                    //            if (dt.Rows.Count > 0)
                    //            {
                    //                dr = dt.Select("WORegisterId=" + Convert.ToInt32(dtP.Rows[i]["WORegisterId"]));
                    //                if (dr.Length > 0)
                    //                {
                    //                    dr[0]["PrevAdvPaidAmt"] = Convert.ToDecimal(dtP.Rows[i]["AdvancePaid"]);
                    //                }
                    //            }
                    //        }
                    //    }
                    //}

                    //if (dt.Rows.Count > 0)
                    //{
                    //    sSql = "Select A.WORegisterId,SUM(isnull(B.Amount,0)) DeductAmt from BillRegister A " +
                    //        "Inner Join BillFormatTrans B on A.BillRegisterId=B.BillRegisterId " +
                    //        "Inner join BillFormatMaster C on B.TypeId=C.TypeId and C.AddType=0 and C.Type IN ('O','P','A') and C.TypeId IN(Select TypeId from BillFormat Where CostCentreId=" + argCostCentreId + " and CostCentreId>0) " +
                    //        "Where A.WORegisterId In(" + sWORegId + ") and A.CostCentreID=" + argCostCentreId;

                    //    sSql = sSql + "  group by A.WORegisterId";
                    //    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    //    sda.Fill(dtF);
                    //    sda.Dispose();

                    //    if (dtF.Rows.Count > 0)
                    //    {
                    //        for (int i = 0; i < dtF.Rows.Count; i++)
                    //        {
                    //            if (dt != null)
                    //            {
                    //                //if Bill... with Advance
                    //                if (dt.Rows.Count > 0)
                    //                {
                    //                    dr = dt.Select("WORegisterId=" + Convert.ToInt32(dtF.Rows[i]["WORegisterId"]));
                    //                    if (dr.Length > 0)
                    //                    {
                    //                        dr[0]["AdvanceDeduct"] = Convert.ToDecimal(dtF.Rows[i]["DeductAmt"]);
                    //                        dr[0]["BilledAmount"] = getIOWAmt(argBillRegId, sWORegId, argCostCentreId, argMode, BsfGlobal.g_WPMDB);
                    //                    }
                    //                    dt.Rows[0]["Balance"] = ((Convert.ToDecimal(dt.Rows[0]["TotalAdvance"]) - Convert.ToDecimal(dt.Rows[0]["AdvanceDeduct"])));

                    //                    if (((Convert.ToDecimal(dt.Rows[0]["WorkOrderValue"]) - Convert.ToDecimal(dt.Rows[0]["BilledAmount"])) - Convert.ToDecimal(dt.Rows[0]["Balance"])) < 0)
                    //                    {
                    //                        dt.Rows[0]["EligibleAmount"] = 0;
                    //                    }
                    //                    else
                    //                    {
                    //                        dt.Rows[0]["EligibleAmount"] = ((Convert.ToDecimal(dt.Rows[0]["WorkOrderValue"]) - Convert.ToDecimal(dt.Rows[0]["BilledAmount"])) - Convert.ToDecimal(dt.Rows[0]["Balance"]));
                    //                    }
                    //                    dt.AcceptChanges();
                    //                }
                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        //if not Bill... Only Advance
                    //        if (dt != null)
                    //        {
                    //            if (dt.Rows.Count > 0)
                    //            {
                    //                dt.Rows[0]["Balance"] = ((Convert.ToDecimal(dt.Rows[0]["TotalAdvance"]) - Convert.ToDecimal(dt.Rows[0]["AdvanceDeduct"])));

                    //                if (((Convert.ToDecimal(dt.Rows[0]["WorkOrderValue"]) - Convert.ToDecimal(dt.Rows[0]["BilledAmount"])) - Convert.ToDecimal(dt.Rows[0]["Balance"])) < 0)
                    //                {
                    //                    dt.Rows[0]["EligibleAmount"] = 0;
                    //                }
                    //                else
                    //                {
                    //                    dt.Rows[0]["EligibleAmount"] = ((Convert.ToDecimal(dt.Rows[0]["WorkOrderValue"]) - Convert.ToDecimal(dt.Rows[0]["BilledAmount"])) - Convert.ToDecimal(dt.Rows[0]["Balance"]));
                    //                }
                    //                dt.AcceptChanges();
                    //            }
                    //        }
                    //    }
                    //}
            //    }
                BsfGlobal.g_WPMDB.Close();
            //}
            //catch (Exception ex)
            //{
            //    BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            //}
            return dtAdvance;
        }

        private decimal getIOWAmt(int argBillRegId, string argWORegId, int argCostCentreId, string argMode, SqlConnection conn)
        {
            SqlDataAdapter sda;

            DataTable dtF = new DataTable();
            string sSql = "";
            decimal getIOWAmt = 0;

            try
            {
                if (argMode == "A")
                {
                    sSql = "Select isnull(SUM(A.IOWAmount),0) DeductAmt  from BillRegister A " +
                        "Inner Join BillFormatTrans B on A.BillRegisterId=B.BillRegisterId " +
                        "Inner join BillFormatMaster C on B.TypeId=C.TypeId and C.RefNo='R6' and C.TypeId IN(Select TypeId from BillFormat Where CostCentreId=" + argCostCentreId + " and CostCentreId>0) " +
                        "Where A.WORegisterId IN(" + argWORegId + ") and A.CostCentreID=" + argCostCentreId;
                }
                else
                {
                    sSql = "Select isnull(SUM(A.IOWAmount),0) DeductAmt  from BillRegister A " +
                       "Inner Join BillFormatTrans B on A.BillRegisterId=B.BillRegisterId and B.FormatType='B' " +
                       "Inner join BillFormatMaster C on B.TypeId=C.TypeId and C.RefNo='R6' and C.TypeId IN (Select TypeId from BillFormat Where CostCentreId=" + argCostCentreId + " and CostCentreId>0) " +
                       "Where A.WORegisterId In(" + argWORegId + ") and A.CostCentreID=" + argCostCentreId;

                }

                sda = new SqlDataAdapter(sSql, conn);
                sda.Fill(dtF);
                sda.Dispose();
                if (dtF.Rows.Count > 0)
                {
                    getIOWAmt = Convert.ToDecimal(CommFun.IsNullCheck(dtF.Rows[0]["DeductAmt"], CommFun.datatypes.vartypenumeric));
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {

            }
            return getIOWAmt;
        }



        //public DataTable GetWOAdvanceDetails(int argBillRegId, int argWORegId,int argCostCentreId,string argMode)
        //{
        //    SqlDataAdapter sda;
        //    DataTable dt = null;
        //    DataTable dtF = new DataTable();
        //    DataTable dtP = new DataTable();
        //    string sSql = "";
        //    DataRow[] dr;
        //    BsfGlobal.OpenWPMDB();

        //    try
        //    {
        //        if (argWORegId != 0)
        //        {
        //            sSql = "Select A.WORegisterId,isnull(D.Amount,0) WorkOrderValue,cast(0 as decimal(18,3)) BilledAmount,isnull(A.Value,0) WOAdvance,sum(CAST(isnull(C.Amount,0) as decimal(18,3))) AdvancePaid, " +
        //                "(isnull(A.Value,0)+sum(CAST(isnull(C.Amount,0) as decimal(18,3)))) TotalAdvance ,cast(0 as decimal(18,3)) AdvanceDeduct," +
        //                "cast(0 as decimal(18,3)) Balance,cast(0 as decimal(18,3)) EligibleAmount,cast(0 as decimal(18,3)) PrevAdvPaidAmt " +
        //                "from WOPaymentTermsNew A  " +
        //                "Left Join BillRegister B on A.WORegisterId=B.WORegisterId " +
        //                "Left Join BillFormatTrans C on B.BillRegisterId=C.BillRegisterId and C.FormatType='A'  " +
        //               //"Left join BillFormatMaster F on C.TypeId=F.TypeId and F.AddType=0 " +
        //                "Left Join WORegister D on A.WORegisterId=D.WORegisterId  " +
        //                "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.TermsMaster E on A.TermsId=E.TermsId  " +
        //                "and E.TermType='W' and E.Title='Advance'  " +
        //                "Where A.WORegisterId=" + argWORegId+ " and E.TermType='W' and E.Title='Advance' " ;
                             

        //            sSql = sSql + "  group by A.Value,A.WORegisterId,D.Amount";
        //            sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
        //            dt = new DataTable();
        //            sda.Fill(dt);
        //            sda.Dispose();

        //            //Prev Advance Paid

        //            sSql = "Select A.WORegisterId,sum(CAST(isnull(C.Amount,0) as decimal(18,3))) AdvancePaid " +
        //               "from WOPaymentTermsNew A  " +
        //               "Left Join BillRegister B on A.WORegisterId=B.WORegisterId " +
        //               "Left Join BillFormatTrans C on B.BillRegisterId=C.BillRegisterId and C.FormatType='A'  " +
        //               //"Left join BillFormatMaster F on C.TypeId=F.TypeId and F.AddType=0 " +
        //               "Left Join WORegister D on A.WORegisterId=D.WORegisterId  " +
        //               "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.TermsMaster E on A.TermsId=E.TermsId  " +
        //               "and E.TermType='W' and E.Title='Advance'  " +
        //               "Where A.WORegisterId=" + argWORegId + " and E.TermType='W' and E.Title='Advance' ";

        //            if (argBillRegId != 0)
        //                sSql = sSql + " and B.BillRegisterId=" + argBillRegId;

        //            sSql = sSql + "  group by A.WORegisterId";

        //            sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);                    
        //            sda.Fill(dtP);
        //            sda.Dispose();

        //            if (dt.Rows.Count > 0)
        //            {
        //                for (int i = 0; i < dtP.Rows.Count; i++)
        //                {
        //                    if (dt != null)
        //                    {
        //                        if (dt.Rows.Count > 0)
        //                        {
        //                            dr = dt.Select("WORegisterId=" + Convert.ToInt32(dtP.Rows[i]["WORegisterId"]));
        //                            if (dr.Length > 0)
        //                            {
        //                                dr[0]["PrevAdvPaidAmt"] = Convert.ToDecimal(dtP.Rows[i]["AdvancePaid"]);                                        
        //                            }
        //                        }
        //                    }
        //                }
        //            }

        //            if (dt.Rows.Count > 0)
        //            {
        //                sSql = "Select A.WORegisterId,SUM(isnull(B.Amount,0)) DeductAmt from BillRegister A " +
        //                    "Inner Join BillFormatTrans B on A.BillRegisterId=B.BillRegisterId " +
        //                    "Inner join BillFormatMaster C on B.TypeId=C.TypeId and C.AddType=0 and C.Type IN ('O','P','A') and C.TypeId IN(Select TypeId from BillFormat Where CostCentreId=" + argCostCentreId + " and CostCentreId>0) " +                            
        //                    "Where A.WORegisterId=" + argWORegId + " and A.CostCentreID=" + argCostCentreId;

        //                sSql = sSql + "  group by A.WORegisterId";
        //                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
        //                sda.Fill(dtF);
        //                sda.Dispose();

        //                if (dtF.Rows.Count > 0)
        //                {
        //                    for (int i = 0; i < dtF.Rows.Count; i++)
        //                    {
        //                        if (dt != null)
        //                        {
        //                            //if Bill... with Advance
        //                            if (dt.Rows.Count > 0)
        //                            {
        //                                dr = dt.Select("WORegisterId=" + Convert.ToInt32(dtF.Rows[i]["WORegisterId"]));
        //                                if (dr.Length > 0)
        //                                {
        //                                    dr[0]["AdvanceDeduct"] = Convert.ToDecimal(dtF.Rows[i]["DeductAmt"]);                                            
        //                                    dr[0]["BilledAmount"] = getIOWAmt(argBillRegId, argWORegId, argCostCentreId, argMode,BsfGlobal.g_WPMDB);
        //                                }
        //                                dt.Rows[0]["Balance"] = ((Convert.ToDecimal(dt.Rows[0]["TotalAdvance"]) - Convert.ToDecimal(dt.Rows[0]["AdvanceDeduct"])));                                       

        //                                if (((Convert.ToDecimal(dt.Rows[0]["WorkOrderValue"]) - Convert.ToDecimal(dt.Rows[0]["BilledAmount"])) - Convert.ToDecimal(dt.Rows[0]["Balance"])) < 0)
        //                                {
        //                                    dt.Rows[0]["EligibleAmount"] = 0;
        //                                }
        //                                else
        //                                {
        //                                    dt.Rows[0]["EligibleAmount"] = ((Convert.ToDecimal(dt.Rows[0]["WorkOrderValue"]) - Convert.ToDecimal(dt.Rows[0]["BilledAmount"])) - Convert.ToDecimal(dt.Rows[0]["Balance"]));
        //                                }
        //                                dt.AcceptChanges();
        //                            }
        //                        }
        //                    }
        //                }
        //                else 
        //                {
        //                    //if not Bill... Only Advance
        //                    if (dt != null)
        //                    {
        //                        if (dt.Rows.Count > 0)
        //                        {
        //                            dt.Rows[0]["Balance"] = ((Convert.ToDecimal(dt.Rows[0]["TotalAdvance"]) - Convert.ToDecimal(dt.Rows[0]["AdvanceDeduct"])));

        //                            if (((Convert.ToDecimal(dt.Rows[0]["WorkOrderValue"]) - Convert.ToDecimal(dt.Rows[0]["BilledAmount"])) - Convert.ToDecimal(dt.Rows[0]["Balance"])) < 0)
        //                            {
        //                                dt.Rows[0]["EligibleAmount"] = 0;
        //                            }
        //                            else
        //                            {
        //                                dt.Rows[0]["EligibleAmount"] = ((Convert.ToDecimal(dt.Rows[0]["WorkOrderValue"]) - Convert.ToDecimal(dt.Rows[0]["BilledAmount"])) - Convert.ToDecimal(dt.Rows[0]["Balance"]));
        //                            }
        //                            dt.AcceptChanges();
        //                        }
        //                    }
        //                }
        //            }
        //        }                
        //        BsfGlobal.g_WPMDB.Close();
        //    }
        //    catch (Exception ex)
        //    {
        //        BsfGlobal.CustomException(ex.Message, ex.StackTrace);
        //    }
        //    return dt;
        //}

        //private decimal getIOWAmt(int argBillRegId, int argWORegId, int argCostCentreId,string argMode,SqlConnection conn)
        //{
        //    SqlDataAdapter sda;
            
        //    DataTable dtF = new DataTable();
        //    string sSql = "";
        //    decimal getIOWAmt = 0;           

        //    try 
        //    {
        //        if (argMode == "A")
        //        {
        //            sSql = "Select isnull(SUM(A.IOWAmount),0) DeductAmt  from BillRegister A " +
        //                "Inner Join BillFormatTrans B on A.BillRegisterId=B.BillRegisterId " +
        //                "Inner join BillFormatMaster C on B.TypeId=C.TypeId and C.RefNo='R6' and C.TypeId IN(Select TypeId from BillFormat Where CostCentreId=" + argCostCentreId + " and CostCentreId>0) " +
        //                "Where A.WORegisterId=" + argWORegId + " and A.CostCentreID=" + argCostCentreId;
        //        }
        //        else
        //        {
        //            sSql = "Select isnull(SUM(A.IOWAmount),0) DeductAmt  from BillRegister A " +
        //               "Inner Join BillFormatTrans B on A.BillRegisterId=B.BillRegisterId and B.FormatType='B' " +
        //               "Inner join BillFormatMaster C on B.TypeId=C.TypeId and C.RefNo='R6' and C.TypeId IN (Select TypeId from BillFormat Where CostCentreId=" + argCostCentreId + " and CostCentreId>0) " +
        //               "Where A.WORegisterId=" + argWORegId + " and A.CostCentreID=" + argCostCentreId;
                              
        //        }


        //        sda = new SqlDataAdapter(sSql, conn);
        //        sda.Fill(dtF);
        //        sda.Dispose();
        //        if (dtF.Rows.Count > 0)
        //        {
        //            getIOWAmt = Convert.ToDecimal(CommFun.IsNullCheck(dtF.Rows[0]["DeductAmt"],CommFun.datatypes.vartypenumeric));
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        BsfGlobal.CustomException(ex.Message, ex.StackTrace);
        //    }
        //    finally
        //    {

        //    }
        //    return getIOWAmt;
        //}

        public decimal getIOWQtyWithoutWBS(int argCCId, int argIOWID, int argContractorId,string arfType, int argWoRegId)
        {
            decimal getIOWCumQty = 0;
            SqlCommand Command;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            try
            {
                sSql = "Select Sum(A.Qty) Qty From BillTrans A " +                       
                    "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                    "Where B.ContractorId = " + argContractorId + " and " +
                    "B.CostCentreId = " + argCCId + " and A.IOW_ID = " + argIOWID + " and A.BillType='" + arfType + "' ";
                //27-12-2012 Changed 
                if (argWoRegId != 0)
                    sSql = sSql + " and A.WORegisterId=" + argWoRegId + " ";

                Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                else
                    getIOWCumQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                
               BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {

            }
            return getIOWCumQty;
        }


        public decimal getIOWQtyWithWBS(int argCCId, int argIOWID, int argContractorId, string arfType, int argWoRegId,int argAnalId,int argBillTranId)
        {
            decimal getIOWCumQty = 0;
            SqlCommand Command;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            try
            {
                sSql = "Select Sum(C.Qty) Qty From BillTrans A " +
                    "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                    "Inner Join BillWBSTrans C on A.BillTransId=C.BillTransId and C.AnalysisId=" + argAnalId + " " +
                    "Where B.ContractorId = " + argContractorId + " and " +
                    "B.CostCentreId = " + argCCId + " and A.IOW_ID = " + argIOWID + " and A.BillType='" + arfType + "' ";
                //27-12-2012 Changed 
                if (argWoRegId != 0)
                    sSql = sSql + " and A.WORegisterId=" + argWoRegId + " ";
                if (argBillTranId != 0)
                {
                    sSql = sSql + " and A.BillTransId=" + argBillTranId + " ";
                }

                Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                else
                    getIOWCumQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));

                Command.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return getIOWCumQty;
        }


        public decimal getIOWCumQty(int argCCId, int argIOWID, int argContractorId, int argAnalysID, int argCompId, string arfType, int argWoRegId,int argBillTransId)
        {
            decimal getIOWCumQty = 0;
            SqlCommand Command;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {

                if (arfType == "S" || arfType == "I")
                {
                    if (argAnalysID == 0)
                    {
                        sSql = "Select isnull(Sum(A.Qty),0) Qty From BillWBSTrans A " +
                        "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                        "Where C.ContractorId = " + argContractorId + " and " +
                        "C.CostCentreId = " + argCCId + " and B.IOW_ID = " + argIOWID + "  and B.BillType='" + arfType + "' ";
                        //and A.IOW_ID = " + argIOWID + " 
                    }
                    else
                    {
                        sSql = "Select isnull(Sum(A.Qty),0) Qty From BillWBSTrans A " +
                        "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                        "Where C.ContractorId = " + argContractorId + " and " +
                        "C.CostCentreId = " + argCCId + " and B.IOW_ID = " + argIOWID + " and A.AnalysisId = " + argAnalysID + " and B.BillType='" + arfType + "'";
                        // and A.IOW_ID = " + argIOWID + "
                    }
                    //27-12-2012 Changed 
                    if (argWoRegId != 0)
                        sSql = sSql + " and B.WORegisterId=" + argWoRegId + " ";
                    if (argBillTransId!=0)
                        sSql = sSql + " and B.BillTransId=" + argBillTransId + " ";                  

                    Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                    else
                        getIOWCumQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                }
                else
                {
                    if (argAnalysID == 0)
                    {
                        sSql = "Select isnull(Sum(A.Qty),0) Qty From BillIOWTrans A " +
                        "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                        "Where C.ContractorId = " + argContractorId + " and " +
                        "C.CostCentreId = " + argCCId + " and B.Comp_ID = " + argCompId + " and B.BillType='" + arfType + "' ";
                    }
                    else
                    {
                        sSql = "Select isnull(Sum(A.Qty),0) Qty From BillIOWTrans A " +
                        "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                        "Where C.ContractorId = " + argContractorId + " and " +
                        "C.CostCentreId = " + argCCId + " and B.Comp_ID = " + argCompId + " and A.AnalysisHeadId = " + argAnalysID + " and B.BillType='" + arfType + "' ";
                    }
                    //27-12-2012 Changed 
                    if (argWoRegId != 0)
                        sSql = sSql + " and B.WORegisterId=" + argWoRegId + " ";
                    if (argBillTransId != 0)
                        sSql = sSql + " and A.BillIOWTransId=" + argBillTransId + " ";                  

                    Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    if (Command.ExecuteScalar() == null || Command.ExecuteScalar() == DBNull.Value) { }
                    else
                    {
                        getIOWCumQty = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                    }
                }
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {

            }
            return getIOWCumQty;
        }


        public bool CheckBillNO(string argBillNO,string frmWhere)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            bool bAns = false;
            BsfGlobal.OpenWPMDB();
            try
            {

                if (frmWhere == "CC")
                    sSql = "Select CCBVNO from BillRegister where CCBVNO<>'' and  CCBVNO='" + argBillNO + "'";
                else if (frmWhere == "CO")
                    sSql = "Select CompanyBVNO from BillRegister where CompanyBVNO<>'' and  CompanyBVNO='" + argBillNO + "'";
                else if (frmWhere == "GE" || frmWhere == "  ")
                    sSql = "Select BillNo from BillRegister where BillNo<>'' and  BillNo='" + argBillNO + "'";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                if (dt.Rows.Count > 0)
                    bAns = true;
                else
                    bAns = false;

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return bAns;
        }

        public DataTable GetBillTDSE(int argBillRegId,int argFormatTypeId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {

                sSql = "Select Formula,TDSPer ExpPer,SurPer SurCharge,EDPer EDCess,HedPer HedCess,NetPer Net from TDSBillFormatTrans " + 
                    "Where BillRegisterId="+argBillRegId+" and TypeId="+argFormatTypeId;
                
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }


        public DataTable GetWoAmt(int argWoRegId,decimal argBCurQty,int argAnlId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {

                sSql = "Select ((((Amount/100)*B.APercentage)/100)* "+argBCurQty+") Amount from WORegister A " +
                    "Inner Join WOTurnkeyTrans B on A.WORegisterId=B.WORegisterId " +
                    "Where A.WoRegisterId=" + argWoRegId+" and B.AnalysisId="+argAnlId+" and WOType='T' ";
             
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable GetDPERegId(int argAnalysisId,int argWoRegId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {

                sSql = "Select Distinct DPERegisterId from DPETurnKeyTrans  " +
                    "Where AnalysisId=" + argAnalysisId + "  and WoRegisterId=" + argWoRegId;

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public string GetDPERegIdWO(int argBillRegId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            string sDPERegId = "";
            BsfGlobal.OpenWPMDB();
            try
            {

                sSql = "Select Distinct DPERegisterId from BillDPETrans  " +
                    "Where BillRegisterId="+argBillRegId;

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        sDPERegId = sDPERegId + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[i]["DPERegisterId"],CommFun.datatypes.vartypenumeric)) + ",";
                    }
                }
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return sDPERegId;
        }

        public DataTable GetWOQualifierOverAll(int argWoRegId,int argCCId,int argContId)
        {

            string sSql = "";
            SqlDataAdapter sda;
            DataTable dt=null;
            //DataTable dtch = null;
            BsfGlobal.OpenWPMDB();

            SqlCommand cmd = null;
            try
            {
                sSql = "Update WOResRate_Q Set NetPer = ExpPer + (ExpPer*(SurCharge+EDCess+HEDCess)/100) Where NetPer=0";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();

                sSql = "Update WOTransRate_Q Set NetPer = ExpPer + (ExpPer*(SurCharge+EDCess+HEDCess)/100) Where NetPer=0";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();


                sSql = "Update WOWBSResRate_Q Set NetPer = ExpPer + (ExpPer*(SurCharge+EDCess+HEDCess)/100) Where NetPer=0";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();


                sSql = "Update WORate_Q Set NetPer = ExpPer + (ExpPer*(SurCharge+EDCess+HEDCess)/100) Where NetPer=0";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();

                if (argWoRegId != 0)
                {

                    sSql = "Select A.*,B.QualifierName,B.QualTypeId from WORate_Q A  " +
                            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Qualifier_Temp B on A.QualifierId=B.QualifierId and B.QualType='W' " +
                            "Where A.WOQTypeId=2 and A.WORegisterId=" + argWoRegId + " and B.QualTypeId Not in (1,2)";
                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();

                    if (dt.Rows.Count == 0)
                    {
                        sSql = "Select A.*,B.QualifierName,B.QualTypeId from WOTransRate_Q A  " +
                                "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Qualifier_Temp B on A.QualifierId=B.QualifierId and B.QualType='W' " +
                                "Where A.WOQTypeId=1 and B.QualTypeId Not in (1,2) and WOTransID IN (Select WOTransID from WoTrans Where WORegisterId=" + argWoRegId + ")";
                        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                        dt = new DataTable();
                        sda.Fill(dt);
                        sda.Dispose();
                    }
                }
                else
                {
                    //sSql = "Select * from WORegister Where CostCentreId="+argCCId+" and ContractorId="+argContId+" order by WORegisterId Desc";
                    sSql = "Select MAX(WORegisterId) as WORegisterId from WORegister  " + 
                        "Where CostCentreId=" + argCCId + " and ContractorId=" + argContId + " Having count(WORegisterId)>0";
                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();

                    if (dt.Rows.Count > 0)
                    {
                        argWoRegId = Convert.ToInt32(dt.Rows[0]["WORegisterId"]);
                    }
                    dt.Dispose();

                    if (argWoRegId != 0)
                    {
                        sSql = "Select A.*,B.QualifierName,B.QualTypeId from WORate_Q A  " +
                            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Qualifier_Temp B on A.QualifierId=B.QualifierId and B.QualType='W' " +
                            "Where A.WOQTypeId=2 and A.WORegisterId=" + argWoRegId + " and B.QualTypeId Not in (1,2)";
                        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                        dt = new DataTable();
                        sda.Fill(dt);
                        sda.Dispose();

                        if (dt.Rows.Count == 0)
                        {
                            sSql = "Select A.*,B.QualifierName,B.QualTypeId from WOTransRate_Q A " + 
                                "Inner Join ["+BsfGlobal.g_sRateAnalDBName+"].dbo.Qualifier_Temp B on A.QualifierId=B.QualifierId and B.QualType='W' " +
                                "Where A.WOQTypeId=1 and B.QualTypeId Not in (1,2) and A.WOTransID IN (Select WOTransID from WoTrans Where WORegisterId=" + argWoRegId + ")";
                            sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                            dt = new DataTable();
                            sda.Fill(dt);
                            sda.Dispose();
                        }
                    }
                }

                //if (dt.Rows.Count > 0)
                //{
                //    int iTypeId = 0;
                //    int iOrderNo = 0;
                //    string sRefNo = "";                   
                    
                //    for (int k = 0; k < dt.Rows.Count; k++)
                //    {
                //        iTypeId = 0;
                //        sRefNo = "";

                //        sSql = "Select TypeId from BillFormatMaster Where Type Not in ('T','S') and QualifierId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["QualifierId"], CommFun.datatypes.vartypenumeric));
                //        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                //        dtch = new DataTable();
                //        sda.Fill(dtch);
                //        sda.Dispose();
                //        if (dtch.Rows.Count > 0)
                //        {
                //            iTypeId = Convert.ToInt32(CommFun.IsNullCheck(dtch.Rows[0]["TypeId"], CommFun.datatypes.vartypenumeric));
                //        }
                //        dt.Dispose();

                //        if(iTypeId==0)                        
                //        {  
                //            iTypeId = BillFormatMaxTypeId("B")+1;
                //            iOrderNo = BillFormatMaxOrdNo("B") + 1;
                //            BsfGlobal.OpenWPMDB();

                //            sRefNo = "R" + iTypeId ;

                //             sSql = "Insert into BillFormatMaster(TypeId,TypeName,Type,AddType,OrderNo,RefNo,QTypeId,QualifierId) " +
                //                  "Values(" + iTypeId + ",'" + CommFun.IsNullCheck(dt.Rows[k]["QualifierName"], CommFun.datatypes.vartypestring).ToString() + "1" + "','Q',0," + iOrderNo + ",'" + sRefNo + "', " + 
                //                  " " + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["QualTypeId"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["QualifierId"], CommFun.datatypes.vartypenumeric)) + ") Select SCOPE_IDENTITY(); ";
                //            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                //            cmd.ExecuteNonQuery();

                //            iTypeId = BillFormatMaxTypeId("B");
                            
                //        }
                //        BsfGlobal.OpenWPMDB();
                //        sSql = "Select TypeId from BillFormat Where TypeId=" + iTypeId;
                //        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                //        dtch = new DataTable();
                //        sda.Fill(dtch);
                //        sda.Dispose();
                //        if (dtch.Rows.Count == 0)
                //        {
                //            sSql = "Insert into BillFormat(TypeId,CostCentreId,OrderNo,HeadingName,Bold,Formula) " +
                //                   "Select TypeId," + argCCId + ",OrderNo,HeadingName,Bold,'R6' from BillFormatMaster Where TypeId=" + iTypeId;
                //            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                //            cmd.ExecuteNonQuery();
                //        }                        
                //    }
                //}
            }
            catch (Exception ex)
            {
                 BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }
        
        public DataTable GetWOFixRate(int argWOREgId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                sql = "Select ResourceId,Rate from WOMaterialRate Where WORegId = " + argWOREgId;                            
                sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable GetWOResQual(int argWORegId,string argWOType,int argContId,int argCCId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = null; 
            DataTable dtch=null;

            try
            {
                if (argWORegId == 0)
                {
                    sSql = "Select MAX(WORegisterId) as WORegisterId from WORegister " + 
                        "Where CostCentreId=" + argCCId + " and ContractorId=" + argContId + " Having count(WORegisterId)>0";
                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();

                    if (dt.Rows.Count > 0)
                    {
                        argWORegId = Convert.ToInt32(dt.Rows[0]["WORegisterId"]);
                    }
                    dt.Dispose();
                }               

                sSql = "Update WOResRate_Q Set NetPer = ExpPer + (ExpPer*(SurCharge+EDCess+HEDCess)/100) Where NetPer=0";
                cmd = new SqlCommand(sSql,BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();

                sSql = "Update WOTransRate_Q Set NetPer = ExpPer + (ExpPer*(SurCharge+EDCess+HEDCess)/100) Where NetPer=0";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();


                sSql = "Update WOWBSResRate_Q Set NetPer = ExpPer + (ExpPer*(SurCharge+EDCess+HEDCess)/100) Where NetPer=0";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();


                sSql = "Update WORate_Q Set NetPer = ExpPer + (ExpPer*(SurCharge+EDCess+HEDCess)/100) Where NetPer=0";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();

                if (argWOType.Contains("I"))
                {
                    sSql = "Select Distinct A.QRate,A.CoffQty,A.ResourceId,B.QualifierId,B.Amount QAmt,A.IOWID,cast(0 as decimal(18,3)) BillAmt,B.ExpPer,B.HEDCess,B.HEDValue,B.NetPer,TaxablePer,TaxableValue,B.WORegisterId,C.QualifierName,C.QualTypeId from WOResourceTrans A " +
                        "Inner Join WOResRate_Q B on A.WOTransId=B.WOtransId and A.ResourceId=B.ResourceId " +
                        "Inner Join ["+BsfGlobal.g_sRateAnalDBName+"].dbo.Qualifier_Temp C on B.QualifierId=C.QualifierId and C.QualType='W' " +
                        "Where A.WOTransId In(Select WOTransId from WOTrans Where WORegisterId=" + argWORegId + ") ";
                }
                if (sSql != "")
                {
                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();

                    if (dt.Rows.Count == 0)
                    {
                        sSql = "Select Distinct A.QRate,A.CoffQty,A.ResourceId,B.QualifierId,B.Amount QAmt,A.IOWID,cast(0 as decimal(18,3)) BillAmt,B.ExpPer,B.HEDCess,B.HEDValue,B.NetPer,TaxablePer,TaxableValue,B.WORegisterId,C.QualifierName,C.QualTypeId from WOWBSResTrans A " +
                            "Inner Join WOWBSResRate_Q B on A.WOTransId=B.WOtransId and A.ResourceId=B.ResourceId " +
                            "Inner Join ["+BsfGlobal.g_sRateAnalDBName+"].dbo.Qualifier_Temp C on B.QualifierId=C.QualifierId and C.QualType='W' " +
                            "Where A.WOTransId In(Select WOTransId from WOTrans Where WORegisterId=" + argWORegId + ") ";
                        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                        dt = new DataTable();
                        sda.Fill(dt);
                        sda.Dispose();
                    }
                }                   
                
                //for Automatic Tax CalCulation BillFormat
                if (dt.Rows.Count > 0)
                {
                    int iTypeId = 0;
                    int iOrderNo = 0;
                    string sRefNo = "";
                    
                    for (int k = 0; k < dt.Rows.Count; k++)
                    {
                        iTypeId = 0;
                        sRefNo = "";

                        sSql = "Select TypeId from BillFormatMaster Where QualifierId=" + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["QualifierId"],CommFun.datatypes.vartypenumeric));
                        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                        dtch = new DataTable();
                        sda.Fill(dtch);
                        sda.Dispose();
                        if (dtch.Rows.Count > 0)
                        {
                            iTypeId = Convert.ToInt32(CommFun.IsNullCheck(dtch.Rows[0]["TypeId"], CommFun.datatypes.vartypenumeric));
                        }
                        dt.Dispose();

                        if(iTypeId==0)                        
                        {  
                            iTypeId = BillFormatMaxTypeId("B")+1;
                            iOrderNo = BillFormatMaxOrdNo("B") + 1;

                            BsfGlobal.OpenWPMDB();

                            sRefNo = "R" + iTypeId;

                             sSql = "Insert into BillFormatMaster(TypeId,TypeName,Type,AddType,OrderNo,RefNo,QTypeId,QualifierId) " +
                                  "Values(" + iTypeId + ",'" + CommFun.IsNullCheck(dt.Rows[k]["QualifierName"], CommFun.datatypes.vartypestring).ToString() +"1"+ "','Q',0," + iOrderNo + "," + sRefNo + "," + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["QualTypeId"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["QualifierId"], CommFun.datatypes.vartypenumeric)) + ") Select Scope_Identity();";
                            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                            cmd.ExecuteNonQuery();

                            iTypeId = BillFormatMaxTypeId("B");
                        }
                        BsfGlobal.OpenWPMDB();
                        sSql = "Select TypeId from BillFormat Where TypeId=" + iTypeId;
                        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                        dtch = new DataTable();
                        sda.Fill(dtch);
                        sda.Dispose();
                        if (dtch.Rows.Count == 0)
                        {
                            sSql = "Insert into BillFormat(TypeId,CostCentreId,OrderNo,HeadingName,Bold,Formula) " +
                                "Select TypeId," + argCCId + ",OrderNo,HeadingName,Bold,'R6' from BillFormatMaster Where TypeId=" + iTypeId;
                            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                            cmd.ExecuteNonQuery();
                        }                        
                    }
                }               
                           
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public decimal GetTkeyPrevAmt(int argWORegId,string argmode,int argBRegId)
        {
            string sSql = "";
            DataTable dt;
            SqlDataAdapter sda;
            decimal dWOPer = 0;
            BsfGlobal.OpenWPMDB();
            try
            {
                if(argmode=="A")
                    sSql = "Select ISNULL(SUM(CurAmount),0) PaidAmt from BillTurnKeyTrans Where WORegisterId=" + argWORegId;
                else
                    sSql = "Select ISNULL(SUM(CurAmount),0) PaidAmt from BillTurnKeyTrans Where WORegisterId=" + argWORegId + " and BillRegisterId<" + argBRegId;
                    
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                if (dt.Rows.Count > 0) dWOPer = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[0][0].ToString(), CommFun.datatypes.vartypenumeric));
            }
            catch (Exception ex)
            {
                 BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dWOPer;
        }

        public decimal GetTkeyPrevQty(int argWORegId, int argAnalTransId,int argBillRegId,int argAnalId)
        {
            string sSql = "";
            DataTable dt;
            SqlDataAdapter sda;
            decimal dWOPer = 0;
            BsfGlobal.OpenWPMDB();
            try
            {
                if (argWORegId != 0)
                {
                    sSql = "Select AnalTransId,SUM(CurPercentage) PrevQty,AnalysisId from BillTurnKeyTrans " +
                        "Where WORegisterId=" + argWORegId + "  And BillRegisterId<" + argBillRegId + " and AnalysisId=" + argAnalId + " " +
                        "group by AnalTransId,AnalysisId";
                }              

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                if (dt.Rows.Count > 0) dWOPer = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[0][1].ToString(), CommFun.datatypes.vartypenumeric));
            }
            catch (Exception ex)
            {
                 BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dWOPer;
        }

        public decimal GetWOTurnKEyQty(int argWORegId, int argAnalId)
        {
            string sSql = "";
            DataTable dt;
            SqlDataAdapter sda;
            decimal dWOPer = 0;
            BsfGlobal.OpenWPMDB();
            try
            {
                sSql = "Select ISNULL(A.APercentage,0) Qty From WOTurnKeyTrans A " +
                        "Inner Join WORegister B On A.WORegisterId=B.WORegisterid " +
                        "Where A.WORegisterId=" + argWORegId + " and A.AnalysisId=" + argAnalId;                        
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                if (dt.Rows.Count > 0) dWOPer = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[0][0].ToString(), CommFun.datatypes.vartypenumeric));
            }
            catch (Exception ex)
            {
                 BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dWOPer;
        }        
        
        public DataTable GetDetaildWB(int argCCId, DateTime argFrmDate, DateTime argToDate, int argRevId, string argBType,string argDBName,bool argAbstract)
        {

            SqlDataAdapter sda;
            DataTable dt = new DataTable();
            string sSql = "";
            DataTable dtP = new DataTable();
            BsfGlobal.OpenWPMDB();


            string frmdat = string.Format("{0:dd MMM yyyy}", argFrmDate);
            string tdat = string.Format("{0:dd MMM yyyy}", argToDate.AddDays(1));

            try
            {
                if (BsfGlobal.CheckDBFound(argDBName) == false) return dt;


                if (argAbstract == true)
                {
                    if (argBType == "A" || argBType == "L")
                    {
                        sSql = "Select D.Resource_Group_Name WorkGroup,C.Resource_Code Code,C.Resource_Name Resource,A.UnitId Unit,Sum(A.Qty) Qty,Case When Sum(A.Qty) <>0 then Sum(A.Amount)/Sum(A.Qty) else 0 end Rate,Sum(A.Amount) Amount from BillTrans A " +
                                "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                                "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource C on A.Comp_Id=C.Resource_Id " +
                                "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource_Group D on C.Resource_Group_Id=D.Resource_Group_Id " +
                                "Where B.BillType In('" + argBType + "') and B.EDate between '" + frmdat + "' and '" + tdat + "' and B.CostCentreId = " + argCCId + " " +
                                "Group by D.Resource_Group_Name,C.Resource_Code,C.Resource_Name,A.UnitId";
                    }
                    else
                    {
                        sSql = "Select D.Work_Group_Name WorkGroup,C.RefSerialNo Code,C.Specification Resource,A.UnitId Unit,Sum(A.Qty) Qty,Case When Sum(A.Qty) <>0 then Sum(A.Amount)/Sum(A.Qty) else 0 end Rate,Sum(A.Amount) Amount from BillTrans A " +
                                "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                                "Left Join [" + argDBName + "].dbo.Project_IOW C on A.IOW_Id=C.Project_IOW_Id " +
                                "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Work_Group D on C.Work_Group_Id=D.Work_Group_Id " +
                                "Where B.BillType In('" + argBType + "') and B.EDate between '" + frmdat + "' and '" + tdat + "' and B.CostCentreId = " + argCCId + " " +
                                "Group by D.Work_Group_Name,C.RefSerialNo,C.Specification,A.UnitId";

                    }
                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    sda.Fill(dt);
                    sda.Dispose();
                }
                else
                {
                    if (argBType == "A" || argBType == "L")
                    {
                        sSql = "Select B.EDate,B.BillNo VNo,F.VendorName Vendor,D.Resource_Group_Name WorkGroup,C.Resource_Code Code,C.Resource_Name Resource,A.UnitId Unit,A.Qty,A.Rate,A.Amount from BillTrans A " +
                                "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                                "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource C on A.Comp_Id=C.Resource_Id " +
                                "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster F on B.ContractorID=F.VendorId " +
                                "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource_Group D on C.Resource_Group_Id=D.Resource_Group_Id " +
                                "Where B.BillType In('" + argBType + "') and B.EDate between '" + frmdat + "' and '" + tdat + "' and B.CostCentreId= " + argCCId;
                    }
                    else
                    {
                        sSql = "Select B.EDate,B.BillNo,F.VendorName Vendor,D.Work_Group_Name WorkGroup,C.RefSerialNo Code,C.Specification Resource,A.UnitId Unit,A.Qty,A.Rate,A.Amount from BillTrans A " +
                                "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                                "Left Join [" + argDBName + "].dbo.Project_IOW C on A.IOW_Id=C.Project_IOW_Id " +
                                "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster F on B.ContractorID=F.VendorId " +
                                "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Work_Group D on C.Work_Group_Id=D.Work_Group_Id " +
                                "Where B.BillType In('" + argBType + "') and B.EDate between '" + frmdat + "' and '" + tdat + "' and B.CostCentreId= " + argCCId;
                    }
                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    sda.Fill(dt);
                    sda.Dispose();
                }
              
            }
            catch (Exception ex)
            {
               BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        public DataTable GetWBSWiseWB(int argCCId, DateTime argFrmDate, DateTime argToDate, int argRevId,string argBType,string argDBName)
        {

            SqlDataAdapter sda;
            DataTable dt = new DataTable();
            string sSql = "";
            DataTable dtP = new DataTable();
            BsfGlobal.OpenWPMDB();
            //string sIOWID = "";

            string frmdat = string.Format("{0:dd MMM yyyy}", argFrmDate);
            string tdat = string.Format("{0:dd MMM yyyy}", argToDate);

            try
            {               

                if (argBType == "")
                {

                    sSql = "SELECT ISNULL(F.AnalysisHeadName,'') Level3,ISNULL(E.AnalysisHeadName,'') Level2,ISNULL(D.AnalysisHeadName,'') Level1,B.AnalysisHeadName,  I.CostCentreName CostCentre,C.RefSerialNo Code,C.Specification Resource,R.Unit_Name Unit,  A.CostCentreId, A.AnalysisId, A.ResourceId,A.Qty,A.Amount,A.BillTransId FROM " +
                        "(SELECT A.BillTransId,A.CostCentreId, A.AnalysisId, A.ResourceId,Qty=SUM(CAST(A.Qty As Decimal(18,5))),Amount=SUM(CAST( A.Amount As Decimal(18,3))) FROM  " +
                        "(Select PT.BillTransId,PR.CostCentreId, PAT.AnalysisId,PT.IOW_ID ResourceId,PAT.Qty,Amount=PAT.Qty*PT.Rate from BillWBSTrans PAT   " +
                        "INNER JOIN BillTrans PT ON PAT.BillTransId=PT.BillTransId and PT.BillType IN('I','S') " +
                        "INNER JOIN BillRegister PR ON PT.BillRegisterId=PR.BillRegisterId  " +
                        "Where PR.EDate BETWEEN '" + frmdat + "' And '" + tdat + "' And PR.CostCentreId=" + argCCId + ") A  " +
                        "GROUP BY A.ResourceId,A.CostCentreId,A.AnalysisId,A.BillTransId ) A  " +
                        "Inner Join [" + argDBName + "].dbo.AnalysisHeads B On A.AnalysisId=B.AnalysisID  " +
                        "Inner Join [" + argDBName + "].dbo.AnalysisIOW AI on AI.Analysis_ID=A.AnalysisID And AI.IOW_Trans_Id  in " +
                        "(Select IOW_Trans_Id from [" + argDBName + "].dbo.IOW where ProjIOWID=A.ResourceId ) And AI.Revision_ID=" + argRevId + "  " +
                        "Inner Join [" + argDBName + "].dbo.Project_IOW C On A.ResourceId=C.Project_IOW_ID " +
                        "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM R on C.Unit_Id=R.Unit_ID   " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads D On B.ParentId=D.AnalysisId   " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads E On D.ParentID=E.AnalysisID   " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads F On E.ParentID=F.AnalysisID  " +
                        "Inner Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre I On A.CostCentreId=I.CostCentreId  " +

                        "Union ALL " +

                        "SELECT ISNULL(F.AnalysisHeadName,'') Level3,ISNULL(E.AnalysisHeadName,'') Level2,ISNULL(D.AnalysisHeadName,'') Level1,D1.AnalysisHeadName,  I.CostCentreName CostCentre,C.Resource_Code Code,C.Resource_Name Resource,R.Unit_Name Unit,  A.CostCentreId, A.AnalysisId, A.ResourceId,A.Qty,A.Amount,A.BillTransId FROM " +
                        "(SELECT A.BillTransId,A.CostCentreId, A.AnalysisId, A.ResourceId,Qty=SUM(CAST(A.Qty As Decimal(18,5))),Amount=SUM(CAST( A.Amount As Decimal(18,3))) FROM  " +
                        "(Select PT.BillTransId,PR.CostCentreId, PAT.AnalysisHeadId AnalysisId ,PT.Comp_ID ResourceId,PAT.Qty,Amount=PAT.Qty*PT.Rate from BillIOWTrans PAT   " +
                        "INNER JOIN BillTrans PT ON PAT.BillTransId=PT.BillTransId and PT.BillType IN('L','A') " +
                        "INNER JOIN BillRegister PR ON PT.BillRegisterId=PR.BillRegisterId  " +
                        "Where PR.EDate BETWEEN '" + frmdat + "' And '" + tdat + "' And PR.CostCentreId=" + argCCId + ") A  " +
                        "GROUP BY A.ResourceId,A.CostCentreId,A.AnalysisId,A.BillTransId,A.BillTransId ) A  " +
                        "Inner Join [" + argDBName + "].dbo.AnalysisHeads B On A.AnalysisId=B.AnalysisID  " +

                       "Left Join [" + argDBName + "].dbo.Project_Details A1 on A1.Resource_ID=A.ResourceId And A1.ReviSion_Id=" + argRevId + "  " +
                       "Left Join [" + argDBName + "].dbo.IOW B1 on A1.IOW_Trans_ID=B1.IOW_Trans_ID And B1.ReviSion_Id=" + argRevId + "  " +
                       "Left Join [" + argDBName + "].dbo.AnalysisHeads D1 on A.AnalysisId=D1.AnalysisId    " +
                       "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource C On A.ResourceId=C.Resource_ID  " +
                       "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM R on C.Unit_Id=R.Unit_ID   " +
                       "Left Join [" + argDBName + "].dbo.AnalysisHeads D On D1.ParentId=D.AnalysisId   " +
                       "Left Join [" + argDBName + "].dbo.AnalysisHeads E On D.ParentID=E.AnalysisID   " +
                       "Left Join [" + argDBName + "].dbo.AnalysisHeads F On E.ParentID=F.AnalysisID  " +
                       "Inner Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre I On A.CostCentreId=I.CostCentreId  ";

                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    sda.Fill(dt);
                }
                else
                {
                    if (argBType == "I" || argBType == "S")
                    {
                        sSql = "SELECT ISNULL(F.AnalysisHeadName,'') Level3,ISNULL(E.AnalysisHeadName,'') Level2,ISNULL(D.AnalysisHeadName,'') Level1,B.AnalysisHeadName,  I.CostCentreName CostCentre,C.RefSerialNo Code,C.Specification Resource,R.Unit_Name Unit,  A.CostCentreId, A.AnalysisId, A.ResourceId,A.Qty,A.Amount,A.BillTransId FROM " +
                        "(SELECT A.BillTransId,A.CostCentreId, A.AnalysisId, A.ResourceId,Qty=SUM(CAST(A.Qty As Decimal(18,5))),Amount=SUM(CAST( A.Amount As Decimal(18,3))) FROM  " +
                        "(Select PT.BillTransId,PR.CostCentreId, PAT.AnalysisId,PT.IOW_ID ResourceId,PAT.Qty,Amount=PAT.Qty*PT.Rate from BillWBSTrans PAT   " +
                        "INNER JOIN BillTrans PT ON PAT.BillTransId=PT.BillTransId and PT.BillType IN('" + argBType + "') " +
                        "INNER JOIN BillRegister PR ON PT.BillRegisterId=PR.BillRegisterId  " +
                        "Where PR.EDate BETWEEN '" + frmdat + "' And '" + tdat + "' And PR.CostCentreId=" + argCCId + ") A  " +
                        "GROUP BY A.ResourceId,A.CostCentreId,A.AnalysisId,A.BillTransId ) A  " +
                        "Inner Join [" + argDBName + "].dbo.AnalysisHeads B On A.AnalysisId=B.AnalysisID  " +
                        "Inner Join [" + argDBName + "].dbo.AnalysisIOW AI on AI.Analysis_ID=A.AnalysisID And AI.IOW_Trans_Id  in " +
                        "(Select IOW_Trans_Id from [" + argDBName + "].dbo.IOW where ProjIOWID=A.ResourceId ) And AI.Revision_ID=" + argRevId + "  " +
                        "Inner Join [" + argDBName + "].dbo.Project_IOW C On A.ResourceId=C.Project_IOW_ID " +
                        "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM R on C.Unit_Id=R.Unit_ID   " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads D On B.ParentId=D.AnalysisId   " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads E On D.ParentID=E.AnalysisID   " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads F On E.ParentID=F.AnalysisID  " +
                        "Inner Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre I On A.CostCentreId=I.CostCentreId  ";
                    }
                    else 
                    {
                        sSql = "SELECT ISNULL(F.AnalysisHeadName,'') Level3,ISNULL(E.AnalysisHeadName,'') Level2,ISNULL(D.AnalysisHeadName,'') Level1,D1.AnalysisHeadName,  I.CostCentreName CostCentre,C.Resource_Code Code,C.Resource_Name Resource,R.Unit_Name Unit,  A.CostCentreId, A.AnalysisId, A.ResourceId,A.Qty,A.Amount,A.BillTransId FROM " +
                       "(SELECT A.BillTransId,A.CostCentreId, A.AnalysisId, A.ResourceId,Qty=SUM(CAST(A.Qty As Decimal(18,5))),Amount=SUM(CAST( A.Amount As Decimal(18,3))) FROM  " +
                       "(Select PT.BillTransId,PR.CostCentreId, PAT.AnalysisHeadId AnalysisId ,PT.Comp_ID ResourceId,PAT.Qty,Amount=PAT.Qty*PT.Rate from BillIOWTrans PAT   " +
                       "INNER JOIN BillTrans PT ON PAT.BillTransId=PT.BillTransId and PT.BillType IN('" + argBType + "') " +
                       "INNER JOIN BillRegister PR ON PT.BillRegisterId=PR.BillRegisterId  " +
                       "Where PR.EDate BETWEEN '" + frmdat + "' And '" + tdat + "' And PR.CostCentreId=" + argCCId + ") A  " +
                       "GROUP BY A.ResourceId,A.CostCentreId,A.AnalysisId,A.BillTransId,A.BillTransId ) A  " +
                       "Inner Join [" + argDBName + "].dbo.AnalysisHeads B On A.AnalysisId=B.AnalysisID  " +

                      "Left Join [" + argDBName + "].dbo.Project_Details A1 on A1.Resource_ID=A.ResourceId And A1.ReviSion_Id=" + argRevId + "  " +
                      "Left Join [" + argDBName + "].dbo.IOW B1 on A1.IOW_Trans_ID=B1.IOW_Trans_ID And B1.ReviSion_Id=" + argRevId + "  " +
                      "Left Join [" + argDBName + "].dbo.AnalysisHeads D1 on A.AnalysisId=D1.AnalysisId    " +
                      "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource C On A.ResourceId=C.Resource_ID  " +
                      "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM R on C.Unit_Id=R.Unit_ID   " +
                      "Left Join [" + argDBName + "].dbo.AnalysisHeads D On D1.ParentId=D.AnalysisId   " +
                      "Left Join [" + argDBName + "].dbo.AnalysisHeads E On D.ParentID=E.AnalysisID   " +
                      "Left Join [" + argDBName + "].dbo.AnalysisHeads F On E.ParentID=F.AnalysisID  " +
                      "Inner Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre I On A.CostCentreId=I.CostCentreId  ";
                    }
                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    sda.Fill(dt);              
                }

            }
            catch (Exception ex)
            {
               BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        public DataTable PopulateGetWOAdvanceAmount(int argCCId, int argContId, int argBillRegId, int argWORegId)
        {
            string sSql = "";
            SqlDataAdapter sda;
            DataTable dt = null;
            BsfGlobal.OpenWPMDB();
            string sWORegIds = "";

            string s1 = "";
            string s2 = "";

            try
            {
                sWORegIds = CommFun.GetAmendWORegIdNew(argWORegId, BsfGlobal.g_WPMDB);

                if (sWORegIds != "")
                {
                    s1 = " and WoRegisterId IN (" + sWORegIds + ") ";
                    s2 = " and A.WoRegisterId IN (" + sWORegIds + ") ";
                }
                else
                {
                    s1 = "";
                    s2 = "";
                }


                sSql = "Update WORegister Set AdvanceAmt=0 Where AdvanceAmt <0";
                SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();


                sSql = "Update BillRegister Set AdvAmount=0 Where AdvAmount <0";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "Select A.WORegisterId,0 as RegId,A.WONo RefNo,A.WODate RefDate,isnull(A.AdvanceAmt,0) as TotAdvAmt, " +
                    "isnull(B.Amount,0) DedAmount ,(isnull(A.AdvanceAmt,0)-isnull(B.Amount,0)) BAmount,isnull(C.Amount,0) CAmount,isnull(C.Amount,0) HAmount,'Bill' as BillType,12 FormatTypeId " +
                    "from WORegister A " +
                    "Left Join (Select WoRegisterId,Sum(Amount) Amount from AdvAdjustment  " +
                    "Where FormatTypeId=12 and WoRegisterId in (Select WoRegisterId from WORegister " +
                    "Where CostCentreId=" + argCCId + " and ContractorID=" + argContId + " and KeyNo<>0  " + s1 + ") " +
                    "group by WoRegisterId) B on A.WORegisterId=B.WoRegisterId " +
                    "Left Join AdvAdjustment C on C.WoRegisterId=A.WoRegisterId and C.BillRegisterId=" + argBillRegId + "  and FormatTypeId=12 " +
                    "Where A.CostCentreId=" + argCCId + " and A.ContractorID=" + argContId + " and A.KeyNo<>0  " + s2 + " ";

                if (argBillRegId != 0)
                {
                    sSql = sSql + " and ((isnull(A.AdvanceAmt,0)-isnull(B.Amount,0)) >0  or A.WORegisterId in (Select WORegisterId from AdvAdjustment Where BillRegisterId=" + argBillRegId + "))";
                }
                else
                {
                    sSql = sSql + " and (isnull(A.AdvanceAmt,0)-isnull(B.Amount,0)) >0 ";
                }

                if (sWORegIds != "")
                {
                    sSql = sSql + "Union All " +

                    "Select 0 as WORegisterId,A.BillRegisterId RegId,A.BillNo RefNo,A.EDate RefDate,isnull(A.AdvAmount,0) as TotAdvAmt, " +
                    "isnull(B.Amount,0) DedAmount ,(isnull(A.AdvAmount,0)-isnull(B.Amount,0)) BAmount,isnull(C.Amount,0) CAmount,isnull(C.Amount,0) HAmount,'Advance' as BillType,13 FormatTypeId   " +
                    "from BillRegister A " +
                    "Left Join (Select RegId,Sum(Amount) Amount from AdvAdjustment  " +
                    "Where FormatTypeId=13 and RegId in (Select BillRegisterId from BillRegister " +
                    "Where CostCentreId=" + argCCId + " and ContractorID=" + argContId + " " +
                    "and FormatType='A' and KeyNo<>0  " + s1 + ") " +
                    "group by RegId) B on A.BillRegisterId=B.RegId " +
                    "Left Join AdvAdjustment C on C.RegId=A.BillRegisterId and C.BillRegisterId=" + argBillRegId + " and FormatTypeId=13 " +
                    "Where A.CostCentreId=" + argCCId + " and A.ContractorID=" + argContId + " " +
                    "and A.FormatType='A' and A.KeyNo<>0  " + s2 + " " +
                    "and A.BillRegisterId in (Select BillRegisterId from BillformatTrans A " +
                    "Inner Join BillformatMaster B on A.TypeId=B.TypeId Where B.FormatTypeId=13) ";

                    if (argBillRegId != 0)
                    {
                        sSql = sSql + " and ((isnull(A.AdvAmount,0)-isnull(B.Amount,0)) >0  or A.BillRegisterId in (Select RegId from AdvAdjustment Where BillRegisterId=" + argBillRegId + "))";
                    }
                    else
                    {
                        sSql = sSql + " and (isnull(A.AdvAmount,0)-isnull(B.Amount,0)) >0 ";
                    }

                    sSql = sSql + "Union All " +

                        "Select 0 as WORegisterId,A.BillRegisterId RegId,A.BillNo RefNo,A.EDate RefDate,isnull(A.AdvAmount,0) as TotAdvAmt, " +
                        "isnull(B.Amount,0) DedAmount ,(isnull(A.AdvAmount,0)-isnull(B.Amount,0)) BAmount,isnull(C.Amount,0) CAmount,isnull(C.Amount,0) HAmount,'Advance' as BillType,9 FormatTypeId  " +
                        "from BillRegister A " +
                        "Left Join (Select RegId,Sum(Amount) Amount from AdvAdjustment  " +
                        "Where FormatTypeId=9 and RegId in (Select BillRegisterId from BillRegister " +
                        "Where CostCentreId=" + argCCId + " and ContractorID=" + argContId + " " +
                        "and FormatType='A' and KeyNo<>0  " + s1 + ") " +
                        "group by RegId) B on A.BillRegisterId=B.RegId " +
                        "Left Join AdvAdjustment C on C.RegId=A.BillRegisterId and C.BillRegisterId=" + argBillRegId + " and FormatTypeId=9 " +
                        "Where A.CostCentreId=" + argCCId + " and A.ContractorID=" + argContId + " " +
                        "and A.FormatType='A' and A.KeyNo<>0  " + s2 + " " +
                        "and A.BillRegisterId in (Select BillRegisterId from BillformatTrans A " +
                        "Inner Join BillformatMaster B on A.TypeId=B.TypeId Where B.FormatTypeId=9) ";

                    if (argBillRegId != 0)
                    {
                        sSql = sSql + " and ((isnull(A.AdvAmount,0)-isnull(B.Amount,0)) >0  or A.BillRegisterId in (Select RegId from AdvAdjustment Where BillRegisterId=" + argBillRegId + "))";
                    }
                    else
                    {
                        sSql = sSql + " and (isnull(A.AdvAmount,0)-isnull(B.Amount,0)) >0 ";
                    }
                }
                else
                {
                    sSql = "Select 0 as WORegisterId,A.BillRegisterId RegId,A.BillNo RefNo,A.EDate RefDate,isnull(A.AdvAmount,0) as TotAdvAmt, " +
                    "isnull(B.Amount,0) DedAmount ,(isnull(A.AdvAmount,0)-isnull(B.Amount,0)) BAmount,isnull(C.Amount,0) CAmount,isnull(C.Amount,0) HAmount,'Advance' as BillType,13 FormatTypeId   " +
                    "from BillRegister A " +
                    "Left Join (Select RegId,Sum(Amount) Amount from AdvAdjustment  " +
                    "Where FormatTypeId=13 and RegId in (Select BillRegisterId from BillRegister " +
                    "Where CostCentreId=" + argCCId + " and ContractorID=" + argContId + " " +
                    "and FormatType='A' and KeyNo<>0  " + s1 + ") " +
                    "group by RegId) B on A.BillRegisterId=B.RegId " +
                    "Left Join AdvAdjustment C on C.RegId=A.BillRegisterId and C.BillRegisterId=" + argBillRegId + " and FormatTypeId=13 " +
                    "Where A.CostCentreId=" + argCCId + " and A.ContractorID=" + argContId + " " +
                    "and A.FormatType='A' and A.KeyNo<>0  " + s2 + " " +
                    "and A.BillRegisterId in (Select BillRegisterId from BillformatTrans A " +
                    "Inner Join BillformatMaster B on A.TypeId=B.TypeId Where B.FormatTypeId=13) ";

                    if (argBillRegId != 0)
                    {
                        sSql = sSql + " and ((isnull(A.AdvAmount,0)-isnull(B.Amount,0)) >0  or A.BillRegisterId in (Select RegId from AdvAdjustment Where BillRegisterId=" + argBillRegId + "))";
                    }
                    else
                    {
                        sSql = sSql + " and (isnull(A.AdvAmount,0)-isnull(B.Amount,0)) >0 ";
                    }

                    sSql = sSql + "Union All " +

                        "Select 0 as WORegisterId,A.BillRegisterId RegId,A.BillNo RefNo,A.EDate RefDate,isnull(A.AdvAmount,0) as TotAdvAmt, " +
                        "isnull(B.Amount,0) DedAmount ,(isnull(A.AdvAmount,0)-isnull(B.Amount,0)) BAmount,isnull(C.Amount,0) CAmount,isnull(C.Amount,0) HAmount,'Advance' as BillType,9 FormatTypeId " +
                        "from BillRegister A " +
                        "Left Join (Select RegId,Sum(Amount) Amount from AdvAdjustment  " +
                        "Where FormatTypeId=9 and RegId in (Select BillRegisterId from BillRegister " +
                        "Where CostCentreId=" + argCCId + " and ContractorID=" + argContId + " " +
                        "and FormatType='A' and KeyNo<>0  " + s1 + ") " +
                        "group by RegId) B on A.BillRegisterId=B.RegId " +
                        "Left Join AdvAdjustment C on C.RegId=A.BillRegisterId and C.BillRegisterId=" + argBillRegId + " and FormatTypeId=9 " +
                        "Where A.CostCentreId=" + argCCId + " and A.ContractorID=" + argContId + " " +
                        "and A.FormatType='A' and A.KeyNo<>0  " + s2 + " " +
                        "and A.BillRegisterId in (Select BillRegisterId from BillformatTrans A " +
                        "Inner Join BillformatMaster B on A.TypeId=B.TypeId Where B.FormatTypeId=9) ";

                    if (argBillRegId != 0)
                    {
                        sSql = sSql + " and ((isnull(A.AdvAmount,0)-isnull(B.Amount,0)) >0  or A.BillRegisterId in (Select RegId from AdvAdjustment Where BillRegisterId=" + argBillRegId + "))";
                    }
                    else
                    {
                        sSql = sSql + " and (isnull(A.AdvAmount,0)-isnull(B.Amount,0)) >0 ";
                    }
                }

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }



        public DataTable PopulateLabourAdvanceAmount(int argCCId, int argContId, int argBillRegId)
        {
            string sSql = "";
            SqlDataAdapter sda;
            DataTable dt = null;
            BsfGlobal.OpenWPMDB();    

            try
            {
                sSql = "Update BillRegister Set AdvAmount=0 Where AdvAmount <0";
                SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "Select D.BillNo RefNo,convert(varchar(10),D.Edate,103) RefDate,'Advance' as Type,A.BillRegisterId,0 as RegId,A.LabourId, " +
                    "isnull(A.Amount,0) as TotAdvAmt , " +
                    "isnull(B.Amount,0) DedAmount , " +
                    "(isnull(A.Amount,0)-isnull(B.Amount,0)) BAmount, " +
                    "isnull(C.Amount,0) CAmount, " +
                    "isnull(C.Amount,0) HAmount " +                 
                    "from BillLabourAdvance A " +
                    "Left Join (Select LabourId,Sum(Amount) Amount from LabourAdvAdjustment   " +
                    "group by LabourId) B on A.LabourId=B.LabourId " +
                    "Inner Join BillRegister D on A.BillRegisterId=D.BillRegisterId " +
                    "Left Join LabourAdvAdjustment C on A.LabourId=C.LabourId and C.BillRegisterId=" + argBillRegId + " " +
                    "Where ((isnull(A.Amount,0)-isnull(B.Amount,0))>0  " +
                    "or A.LabourId in (Select LabourId from LabourAdvAdjustment Where BillRegisterId=" + argBillRegId + " )) ";

                if (argBillRegId != 0)
                {
                    sSql = sSql + " and ((isnull(A.Amount,0)-isnull(B.Amount,0)) >0  or A.LabourId in (Select LabourId from LabourAdvAdjustment Where BillRegisterId=" + argBillRegId + "))";
                }
                else
                {
                    sSql = sSql + " and (isnull(A.Amount,0)-isnull(B.Amount,0)) >0 ";
                }
                sSql = sSql + "Union All " +
                    "Select A.BillNo RefNo,convert(varchar(10),A.Edate,103) RefDate,'Bill' as Type ,0 as BillRegisterId,A.BillRegisterId RegId,B.LabourId, " +
                    "isnull(A.AdvAmount,0) as TotAdvAmt,  " +
                    "isnull(B.Amount,0) DedAmount, " +
                    "(isnull(A.AdvAmount,0)-isnull(B.Amount,0)) BAmount, " +
                    "isnull(C.Amount,0) CAmount, " +
                    "isnull(C.Amount,0) HAmount " +                    
                    "from BillRegister A  " +
                    "Left Join (Select RegId,LabourId,Sum(Amount) Amount from LabourAdvAdjustment  " +
                    "Where RegId in (Select BillRegisterId from BillRegister Where CostCentreId="+argCCId+" and ContractorID="+argContId+" and FormatType='B' and KeyNo<>0)  " +
                    "group by RegId,LabourId) B on A.BillRegisterId=B.RegId  " +
                    "Left Join LabourAdvAdjustment C on A.BillRegisterId=C.RegId and C.BillRegisterId="+argBillRegId+" " +
                    "Where A.CostCentreId="+argCCId+" and A.ContractorID="+argContId+" and A.FormatType='B' and A.KeyNo<>0  " +
                    "and ((isnull(A.AdvAmount,0)-isnull(B.Amount,0))>0   "  +
                    "or A.BillRegisterId in (Select RegId from LabourAdvAdjustment Where BillRegisterId=" + argBillRegId + ")) ";

                if (argBillRegId != 0)
                {
                    sSql = sSql + " and ((isnull(A.AdvAmount,0)-isnull(B.Amount,0)) >0  or A.BillRegisterId in (Select RegId from LabourAdvAdjustment Where BillRegisterId=" + argBillRegId + "))";
                }
                else
                {
                    sSql = sSql + " and (isnull(A.AdvAmount,0)-isnull(B.Amount,0)) >0 ";
                }

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        public DataTable GetAdvBillAdjustment(int argRegId)
        {
            string sSql = "";
            SqlDataAdapter sda;
            DataTable dt = null;
            BsfGlobal.OpenWPMDB();
            try
            {
                sSql = "Select A.WORegisterId,0 as RegId,A.WONo RefNo,A.WODate RefDate,isnull(B.PaidAmount,0) as TotAdvAmt,isnull(B.PaidAmount,0) - ISNull((Select SUM(Amount) From AdvAdjustment  " +
                       "Where WORegisterId=A.WORegisterId ),0) BalAmount,ISNull((Select SUM(Amount) From AdvAdjustment  " +
                       "Where WORegisterId=A.WORegisterId ),0) DedAmount,cast(0 as Decimal(18,3)) Adjust,C.Amount HiddenAmount From WORegister A " +
                       "Left Join WOPaymentTermsNew B On A.WORegisterId=B.WORegisterId  " +
                       "Inner Join AdvAdjustment C On A.WORegisterId=C.WORegisterId " +
                       "Inner Join BillRegister D On C.BillRegisterId=D.BillRegisterId Where A.KeyNo>0 And D.BillRegisterId=" + argRegId + " ";
                     
                
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                 BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }        
        
        public  DataTable GetWOAdjustmemnt(int argVenId, int argCCId,int argWORegId)
        {
            string sSql = "";
            DataTable dt = null;
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            try
            {
                sSql = "Select A.WORegisterId,0 as RegId,A.WONo RefNo,A.WODate RefDate,isnull(B.PaidAmount,0) as TotAdvAmt,ISNull((Select SUM(Amount) From AdvAdjustment  " +
                       "Where WORegisterId=A.WORegisterId ),0) DedAmount, ISNULL((B.PaidAmount-ISNull((Select SUM(Amount) From AdvAdjustment  " +
                       "Where WORegisterId=A.WORegisterId ),0)),0) BalAmount,Cast(0 as Decimal(18,3)) Adjust, " +
                      "Cast(0 As Decimal(18,3)) HiddenAmount From WORegister A  " +
                      "Left Join WOPaymentTermsNew B On A.WORegisterId=B.WORegisterId " +
                       "Inner Join AdvAdjustment C On A.WORegisterId=C.WORegisterId " +
                      "Where A.KeyNo>0 And A.ContractorId=" + argVenId + " And A.WORegisterId="+argWORegId+" And CostCentreId=" + argCCId + " And  " +
                      "A.KeyNo IN (Select BillRegisterId From [" + BsfGlobal.g_sFaDBName + "].dbo.BillRegister " +
                      "Where PaidAmount > 0 And BillType='A')  ";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                 BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        public DataTable PopulateTDSQualifier()
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                sSql = "select QualMId,QualifierName from ["+BsfGlobal.g_sRateAnalDBName+"].dbo.QualifierMaster";
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                dt.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
               BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }


        public decimal GetDPEBillLSRate(int argResId,string argDBName)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            decimal dLbrResRate = 0;
            BsfGlobal.OpenWPMDB();
            try
            {
                sSql = "Select Qualified_Rate Rate from ["+argDBName+"].dbo.Resource_Rate where Qualified_Rate<>0 and Resource_ID=" + argResId;
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                if (dt.Rows.Count > 0)
                {
                    dLbrResRate = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[0]["Rate"], CommFun.datatypes.vartypenumeric));
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dLbrResRate;
        }        

        public DataTable PopulateDetailsPrintNew(int argCCId, int argContId, int argCompId, DateTime argFDate, DateTime argTDate, int argBillRegId)
        {
            SqlDataAdapter da;
            DataTable dt = new DataTable();
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            string frmdat = string.Format("{0:dd MMM yyyy}", argFDate);
            string tdat = string.Format("{0:dd MMM yyyy}", argTDate.AddDays(1));

            try
            {
                sSql = "Select C.VendorName,B.EDate,B.VNo,B.BillNo,F.CostCentreName,D.TypeName, " +
                    "Sum(Case When A.Add_Less_Flag='-' then A.Amount*(-1) else A.Amount End) Amount,Sum(E.PaidAmount) PaidAmt From BillFormatTrans A " +
                    "Inner Join BillRegister B On A.BillRegisterId=B.BillRegisterId " +
                    "Left Join ["+BsfGlobal.g_sVendorDBName+"].dbo.VendorMaster C On B.ContractorId=C.VendorId " +                    
                    "join (Select TypeId,TypeName from BillFormatMaster where Header=0) D on A.TypeId=D.TypeID " +
                    "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.BillRegister E on B.KeyNo=E.BillRegisterId " +
                    "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostcentre F on B.CostCentreId=F.CostCentreId " +
                    "Where B.EDate BetWeen '" + frmdat + "' and  '" + tdat + "' And " +
                    "B.CostCentreID Not in " +
                    "(SELECT CostCentreId FROM [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.UserCostCentreTrans WHERE UserId=" + BsfGlobal.g_lUserId + ") ";
               
                if (argCCId != 0) { sSql = sSql + " and B.CostCentreId = " + argCCId; }
                if (argContId != 0) { sSql = sSql + " and B.ContractorId = " + argContId; }

                sSql = sSql + " Group by C.VendorName,B.EDate,B.VNo,B.BillNo,F.CostCentreName,D.TypeName,A.TypeId,B.ContractorId";

                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(dt);
                da.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public  DataSet PopulateDetailsPrint(int argCCId,int argContId,int argCompId,DateTime argFDate,DateTime argTDate,int argBillRegId)
        {
            SqlDataAdapter da;
            DataSet ds = new DataSet();
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                string frmdat = string.Format("{0:dd MMM yyyy}", argFDate);
                string tdat = string.Format("{0:dd MMM yyyy}", argTDate.AddDays(1));

                sSql = "Select A.BillRegisterId,A.EDate,A.VNo,A.BillNo,C.CostCentreName,B.VendorName,A.BillAmount From BillRegister A " +
                    "Left Join ["+BsfGlobal.g_sWorkFlowDBName+"].dbo.OperationalCostCentre C on A.CostCentreId=C.CostCentreId " +
                    "Inner Join ["+BsfGlobal.g_sVendorDBName+"].dbo.VendorMaster B on A.ContractorId=B.VendorId " +
                    "Where A.EDate BetWeen '" + frmdat + "' and  '" + tdat + "' And " +
                    "A.CostCentreID Not in " +
                    "(SELECT CostCentreId FROM [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.UserCostCentreTrans WHERE UserId=" + BsfGlobal.g_lUserId + ") ";

                if (argBillRegId != 0)
                    sSql = sSql + " and A.BillRegisterId=" + argBillRegId;

                sSql = sSql + " Order by A.EDate,A.VNo,A.BillRegisterID";            

                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(ds, "BillRegister");
                da.Dispose();                

                sSql = "Select BillRegisterId,TypeId,Amount from BillFormatTrans ";
                   

                if (argBillRegId != 0)
                    sSql = sSql + " Where BillRegisterId=" + argBillRegId;

                sSql=sSql + " Order by BillRegisterId,TypeId";


                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(ds, "BillFormatTrans");
                da.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return ds;
        }


        public DataTable GetDetailsColumn(int argCCId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                if (argCCId == 0)
                {
                    sSql = "Select TypeId,TypeName,AddType,Header From BillFormatMaster Order by OrderNo";
                }
                else
                {
                    sSql = "Select A.TypeId,B.TypeName,B.AddType,B.Header From BillFormat A " +
                        "Inner Join BillFormatMaster B on A.TypeId=B.TypeID " +
                        "Where A.CostCentreId = "+argCCId+" Order by A.OrderNo";                    
                }

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }


        public void UpdateTmpCumLabourType(int argBillRegId, int argCCId, int argContId,string argWOREgId)
        {
            BsfGlobal.OpenWPMDB();
            string sSql = "";
            SqlCommand cmd = null;
            DataTable dt = new DataTable();            

            try
            {
                sSql = "Truncate Table TmpLabourTypeTrans ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();


                sSql = "Insert Into TmpLabourTypeTrans(LabourTypeId,CumQty,CumAmount) " +
                    "Select LabourTypeId,Sum(Qty),Sum(Amount) from BillLabourType Where BillRegisterId in " +
                    "(Select BillRegisterID from BillRegister Where BillRegisterID<= " + argBillRegId + " and " +
                    "CostCentreId = " + argCCId + " and ContractorId=" + argContId;
                if (argWOREgId !="") { sSql = sSql + " WORegisterId in (" + argWOREgId + ")"; }
                sSql = sSql + " )Group by LabourTypeId";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "Update TmpLabourTypeTrans Set CurQty=BillLabourType.Qty,CurRate=BillLabourType.Qty, " +
                    "CurAmount=BillLabourType.Amount From BillLabourType " +
                    "Where TmpLabourTypeTrans.LabourTypeId=BillLabourType.LabourTypeId  " +
                    "And BillLabourType.BillRegisterId = " + argBillRegId;
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }

        }


        public void UpdateTmpIOW(int argBillRegId, int argCCId, int argContId, ArrayList argBillType,string argWORegId)
        {
            BsfGlobal.OpenWPMDB();
            string sSql = "";
            SqlCommand cmd = null;
            DataTable dt = new DataTable();
            

            try
            {
                sSql = "Truncate Table TmpBillIOWTrans ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                for (int k = 0; k < argBillType.Count; k++)
                {
                    if (argBillType[k].ToString() != "I")
                    {
                        sSql = "Insert Into TmpBillIOWTrans(BillRegisterId,TypeID,Comp_ID,IOW_ID,CumQty,AnalysisHeadId) " +
                            "Select " + argBillRegId + ",B.TypeId,B.Comp_Id,A.IOW_ID,Sum(A.Qty) as Qtty,A.AnalysisHeadID from BillIOWTrans A " +
                            "Inner Join BillTrans B on A.BillTransID=B.BillTransID " +
                            "Where B.Comp_ID <> 0 and B.BillRegisterId in (Select BillRegisterID from BillRegister Where BillRegisterID<= " + argBillRegId + " and " +
                            "CostCentreId = " + argCCId + " and ContractorId=" + argContId;

                        if (argWORegId != "") { sSql = sSql + " and WORegisterId in (" + argWORegId + ")"; }

                        sSql = sSql + " and BillType In ('" + argBillType[k].ToString() + "') ) Group by B.TypeId,B.comp_ID,A.IOW_ID,A.AnalysisHeadID";
                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                    }
                }

                sSql = "Update TmpBillIOWTrans Set Qty =BillIOWTrans.Qty From BillIOWTrans,BillTrans " +
                    "Where TmpBillIOWTrans.TypeId =BillTrans.TypeId and TmpBillIOWTrans.Comp_ID = BillTrans.Comp_ID and TmpBillIOWTrans.IOW_ID = BillIOWTrans.IOW_ID " +
                    " And TmpBillIOWTrans.AnalysisHeadId = BillIOWTrans.AnalysisHeadId " +
                    " And BillIOWTrans.BillTransID=BillTrans.BillTransId And BillTrans.BillRegisterId = " + argBillRegId;
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();               
                
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }

        }

        public void UpdateTmpComp(int argBillRegId, int argCCId, int argContId,ArrayList argBillType,string argWORegId)
        {
            BsfGlobal.OpenWPMDB();
            string sSql = "";
            SqlCommand cmd = null;
            DataTable dt = new DataTable();
            SqlDataAdapter da = null;

            try
            {
                sSql = "Truncate Table TmpBillTrans ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "Insert Into TmpBillTrans(BillRegisterId,TypeID,Comp_ID,IOW_ID,UnitId,CumQty,CumAmt,AnalysisHeadId) " +
                    "Select " + argBillRegId + ",TypeId,Comp_Id,IOW_ID,UnitId,Sum(Qty) as Qtty,Sum(Amount) as Amt,AnalysisHeadID from BillTrans Where BillRegisterId in " +
                    "(Select BillRegisterID from BillRegister Where BillRegisterID<= " + argBillRegId + " and " +
                    "CostCentreId = " + argCCId + " and ContractorId=" + argContId;

                if (argWORegId !="") { sSql = sSql + " and WORegisterId in (" + argWORegId + ")"; }

                sSql = sSql + " ) Group by TypeId,Comp_ID,IOW_ID,UnitId,AnalysisHeadID";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();


                sSql = "Select TypeId,Comp_ID,IOW_ID,Qty,Rate,Amount,AnalysisHeadId from BillTrans Where BillRegisterId = " + argBillRegId;
                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(dt);
                da.Dispose();
                if (dt.Rows.Count > 0)
                {
                    for (int u = 0; u < dt.Rows.Count; u++)
                    {                        
                        sSql = "Update TmpBillTrans set Qty =Qty+" + CommFun.IsNullCheck(dt.Rows[u]["Qty"].ToString(), CommFun.datatypes.vartypenumeric) + ",Rate = " + CommFun.IsNullCheck(dt.Rows[u]["Rate"].ToString(), CommFun.datatypes.vartypenumeric) + ",Amount = Amount+" + CommFun.IsNullCheck(dt.Rows[u]["Amount"].ToString(), CommFun.datatypes.vartypenumeric) + " " +
                            "Where TypeId = " + CommFun.IsNullCheck(dt.Rows[u]["TypeId"].ToString(), CommFun.datatypes.vartypenumeric) + " and Comp_ID = " + CommFun.IsNullCheck(dt.Rows[u]["Comp_Id"].ToString(), CommFun.datatypes.vartypenumeric) + " and AnalysisHeadID = " + CommFun.IsNullCheck(dt.Rows[u]["AnalysisHeadId"].ToString(), CommFun.datatypes.vartypenumeric);
                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        cmd.ExecuteNonQuery();
                    }
                    cmd.Dispose();
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
        }

        public void UpdateCumulateBillTrans(int argBillRegId, int argCCId, int argContId,string argWORegId)
        {                        
            BsfGlobal.OpenWPMDB();         
            string sSql = "";
            SqlCommand cmd = null;
            DataTable dt = new DataTable();
            SqlDataAdapter da = null;

            try
            {
                sSql = "Truncate Table TmpBillFormatTrans ";
                cmd = new SqlCommand(sSql,BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = " Insert into TmpBillFormatTrans (BillRegisterId,TypeID,CumAmt,Header) " +
                    "Select " + argBillRegId + ",A.TypeId, " +
                    "Sum(Case When C.AddType='0' then A.Amount*(-1) else A.Amount End) Amt,case when C.Header='True' then 1 else 0 end Header  " +
                    "from BillFormatTrans A " +
                    "join (Select BillRegisterID from BillRegister Where BillRegisterID<= " + argBillRegId + " and CostCentreId = " + argCCId + " and ContractorId=" + argContId;
                if (argWORegId != "") { sSql = sSql + " and WORegisterId in (" + argWORegId + ")"; }
                
                sSql = sSql + ") B on " +
                    "A.BillRegisterId=B.BillRegisterId  " +
                    "join (Select TypeId,AddType,Header from BillFormatMaster) C on A.TypeId=C.TypeID  " +
                    //"Where A.Amount>0 " +
                    "Group by A.TypeId,C.Header ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                //sSql = "Select TypeId, Amount,AccountId from BillFormatTrans Where BillRegisterId = " + argBillRegId;
                sSql = "Select A.TypeId,(Case When B.AddType='0' then A.Amount*(-1) else A.Amount End) Amount,A.AccountId,case when B.Header='True' then 1 else 0 end Header from BillFormatTrans A  " + 
                    "join (Select TypeId,AddType,Header from BillFormatMaster) B on A.TypeId=B.TypeID  " +
                    "Where A.BillRegisterId = " + argBillRegId; 
                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(dt);
                da.Dispose();

                if (dt.Rows.Count > 0)
                {
                    for(int u=0;u<dt.Rows.Count;u++)
                    {
                        sSql = "Update TmpBillFormatTrans set CurAmt = " + CommFun.IsNullCheck(dt.Rows[u]["Amount"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                            "AccountId = " + CommFun.IsNullCheck(dt.Rows[u]["AccountId"].ToString(), CommFun.datatypes.vartypenumeric) + ", " + 
                            "Header=" + CommFun.IsNullCheck(dt.Rows[u]["Header"].ToString(), CommFun.datatypes.vartypenumeric) + " " + 
                            "Where TypeId = " + CommFun.IsNullCheck(dt.Rows[u]["TypeId"].ToString(), CommFun.datatypes.vartypenumeric);
                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        cmd.ExecuteNonQuery();
                    }
                    cmd.Dispose();
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
        }

        public DataSet GetCumBillDetails(int argBRegId)
        {           
            DataSet ds = new DataSet();
            string sSql = "";
            SqlDataAdapter da;
            BsfGlobal.OpenWPMDB();
            try
            {
                sSql = "Select Sum(CumAmt-CurAmt) PAmt,Sum(CumAmt) CumAmt from TmpBillFormatTrans " +
                    "where BillRegisterId="+argBRegId+" and Header=0 ";
                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(ds, "TmpBillFormatTrans");
                da.Dispose();
                BsfGlobal.g_WPMDB.Close();


                sSql = "Select Sum(Case When C.AddType='0' then A.Amount*(-1) else A.Amount End) CurAmt " +
                    "from BillFormatTrans A " +
                    "join (Select BillRegisterID from BillRegister Where BillRegisterID= "+argBRegId+") B on " +
                    "A.BillRegisterId=B.BillRegisterId  " +
                    "join (Select TypeId,AddType from BillFormatMaster Where Header=0) C on A.TypeId=C.TypeID  " +
                    "Where A.Amount>0 ";
                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(ds, "BillFormatTrans");
                da.Dispose();
                BsfGlobal.g_WPMDB.Close();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {

            }
            return ds;
        }

        public DataTable GetWOBillDetails(int argBillRegId)
        {            
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();            
            string sVoucherType = "";
            
            try
            {
                sVoucherType = BsfGlobal.GetVoucherType(10);

                sSql = "Select WORegisterId, ";
                if (sVoucherType == "CC")
                    sSql = sSql + " CCWONO as WONo,";
                else if (sVoucherType == "CO")
                    sSql = sSql + " CompanyVNO as WONo,";
                else
                    sSql = sSql + " WONo as WONo ,";
                sSql = sSql + " WODate,isnull(Amount,0) as Amount, Case When WOType='A' Then 'Activity' when WOType='L' then 'Labour' when WOType='I' then 'IOW' when WOType='S' then 'Sub-IOW' when WOType='T' then 'TurnKey' else '' end WOType  from WORegister " +
                    "Where WORegisterId in(Select WORegisterId From BillRegister Where BillRegisterId=" + argBillRegId + ")";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        public void TruncateLbrTrans()
        {
            BsfGlobal.OpenWPMDB();
            string sSql = "";
            SqlCommand cmd = null;
            DataTable dt = new DataTable();          

            try
            {
                sSql = "Truncate Table TempLabourTrans ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "Truncate Table TmpBillFormatTrans ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "Truncate Table TmpBillTrans ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "Truncate Table TmpCompWOSpec ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "Truncate Table TmpIOWWOSpec ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();
                
                sSql = "Truncate Table TmpBillIOWTrans ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }

        }

        public void GetEStAmt(string argType, int argResId, int argIOWId, string argSplit, string argDBName, int argRevId, string argRateType, int argWORegId,int argBillId,int argCCId,string argDPERegId, ref decimal argEstAmt, ref decimal argWOAmt,ref decimal argWOBillAmt,ref decimal argTotBillAmt, ref decimal argCurAmt)
        {

            BsfGlobal.OpenWPMDB();
            string sSql = "";
            SqlCommand cmd;
            SqlDataReader dr;
           
            decimal dQty = 0;
            decimal dRate = 0;

            decimal dEstAmt = 0;
            decimal dWOAmt=0;
            decimal dTotBillAmt = 0;
            decimal dWOBillAmt = 0;
            decimal dCurAmt = 0;

            string sWORegId = "";

            if (argWORegId != 0)
            {
                sWORegId = CommFun.GetAmendWORegIdNew(argWORegId, BsfGlobal.g_WPMDB);
            }


            //Estmate
            if (argType == "L" || argType == "A")
            {

                if (argType == "A")
                {
                    if (argSplit == "N")
                    {
                        sSql = "Select A.Qtty,A.Qualified_Rate Unit_Rate from [" + argDBName + "].dbo.Project_ComponentsC A " +
                                "Where A.Resource_Id = " + argResId + " and A.Revision_ID=" + argRevId + " and A.RateType ='" + argRateType + "'";
                    }
                    else
                    {
                        sSql = "Select sum((A.Qtty/B.Qtty)*D.Qty) Qtty,(Select Qualified_Rate from [" + argDBName + "].dbo.Resource_Rate " +
                               "Where Resource_Id=" + argResId + " and Rev_ID=" + argRevId + " and RateType = '" + argRateType + "') Unit_Rate from [" + argDBName + "].dbo.Project_DetailsC A  " +
                               "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + argRevId + " " +
                               "Inner Join [" + argDBName + "].dbo.AnalysisIOWC D on A.ProjIOWId=D.ProjIOWId and D.Revision_Id=" + argRevId + " " +
                               "Where A.Resource_Id=" + argResId + " and RateType='" + argRateType + "'";
                    }
                }
                else if (argType == "L")
                {
                    if (argSplit == "N")
                    {
                        sSql = "Select isnull(Sum(G.Qty),0) Qtty,(Select Qualified_Rate from [" + argDBName + "].dbo.Resource_Rate " +
                               " where Resource_Id=" + argResId + " and Rev_ID=" + argRevId + " and RateType = '" + argRateType + "') Unit_Rate from ( " +
                               "Select A.Qtty Qty from [" + argDBName + "].dbo.Project_DetailsC A " +
                               "Where A.Resource_ID=" + argResId + " and A.Revision_ID=" + argRevId + " " +
                               "Union All " +
                               "Select (A.Qtty*C.Qty) Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                               "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                               "Where A.Resource_ID=" + argResId + " and A.Rev_Id=" + argRevId + " and A.Analysis_Type='M') C " +
                               "on A.Resource_ID=C.MResource_ID and A.RateType='M' " +
                               "Where A.Revision_ID=" + argRevId + " " +
                               "Union All  " +
                               "Select (A.Qtty*C.Qty) Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                               "Inner Join (Select MResource_Id,Case When B.AAnalysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                               "Where A.Resource_ID=" + argResId + " and A.Rev_Id=" + argRevId + " and A.Analysis_Type='A') C  " +
                               "on A.Resource_ID=C.MResource_ID and A.RateType='A'  Where A.Revision_ID=" + argRevId + ") G  Where G.Qty>0";
                    }
                    else
                    {
                        sSql = "Select isnull(Sum(G.Qty),0) Qtty,(Select Qualified_Rate from [" + argDBName + "].dbo.Resource_Rate " +
                        "where Resource_Id=" + argResId + " and Rev_ID=" + argRevId + " and RateType = '" + argRateType + "') Unit_Rate from(Select (A.Qtty/B.Qtty)*C.Qty Qty from [" + argDBName + "].dbo.Project_DetailsC A   " +
                        "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + argRevId + "   " +
                        "Inner Join [" + argDBName + "].dbo.AnalysisIOWC C on A.ProjIOWId=C.ProjIOWId and C.Revision_Id=" + argRevId + " " +
                        "Where A.Resource_ID=" + argResId + " and A.Revision_ID=" + argRevId + " " +
                        "Union All   " +
                        "Select ((A.Qtty*C.Qty)/B.Qtty)*D.Qty Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                        "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + argRevId + "   " +
                        "Inner Join [" + argDBName + "].dbo.AnalysisIOWC D on A.ProjIOWId=D.ProjIOWId and D.Revision_Id=" + argRevId + "   " +
                        "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                        "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                        "Where A.Resource_ID=" + argResId + " and A.Rev_Id=" + argRevId + " and A.Analysis_Type='M') C on A.Resource_ID=C.MResource_ID and A.RateType='M'  " +
                        "Where A.Revision_ID=" + argRevId + "   " +
                        "Union All   " +
                        "Select ((A.Qtty*C.Qty)/B.Qtty)*D.Qty Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                        "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + argRevId + "  " +
                        "Inner Join [" + argDBName + "].dbo.AnalysisIOWC D on A.ProjIOWId=D.ProjIOWId and D.Revision_Id=" + argRevId + "   " +
                        "Inner Join (Select MResource_Id,Case When B.AAnalysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                        "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                        "Where A.Resource_ID=" + argResId + " and A.Rev_Id=" + argRevId + " and A.Analysis_Type='A') C on A.Resource_ID=C.MResource_ID and A.RateType='A'  " +
                        "Where A.Revision_ID=" + argRevId + ") G  " +
                        "Where G.Qty>0  ";
                    }
                }
               


                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    dQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"], CommFun.datatypes.vartypenumeric));
                    dRate = Convert.ToDecimal(CommFun.IsNullCheck(dr["Unit_Rate"], CommFun.datatypes.vartypenumeric));
                    dEstAmt = dQty * dRate;

                }
                dr.Close();

            }
            else if (argType == "I")
            {

                if (argSplit != "Y")
                {
                    sSql = "Select Qtty,Qualified_Rate from [" + argDBName + "].dbo.IOWC  " +
                        "where ProjIOWID = " + argIOWId + "  And Revision_ID=" + argRevId;
                }
                else
                {
                    sSql = "Select Sum(G.Qty) Qtty,G.Qualified_Rate from (" +
                            "Select A.Qty,(Select Qualified_Rate from [" + argDBName + "].dbo.IOWC " +
                            "where ProjIOWID=" + argIOWId + " and Revision_ID=" + argRevId + ") Qualified_Rate from [" + argDBName + "].dbo.AnalysisIOWC A  " +
                            "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWID=B.ProjIOWId " +
                            "Where B.ProjIOWID = " + argIOWId + " And B.Revision_ID=" + argRevId + ") G Group BY G.Qualified_Rate ";

                }
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    dQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"], CommFun.datatypes.vartypenumeric));
                    dRate = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qualified_Rate"], CommFun.datatypes.vartypenumeric));
                    dEstAmt = dQty * dRate;
                }
                dr.Close();
            }



            //WO

            if (argType == "L" || argType == "A")
            {
                sSql = "Select SUM(Case When B.CancelWO=0 then Qtty else A.WOBilledQty end) Qty,Sum(isnull(A.Amount,0)) as Amt from WOTrans A " +
                       "Inner Join WORegister B on A.WORegisterId=B.WORegisterId " +
                       "Where B.CostCentreId = " + argCCId + " and B.LiveWO=0 and B.Approve='Y'  and A.Comp_ID = " + argResId + " and RateType = '" + argRateType + "'";
                if (argWORegId != 0) { sSql = sSql + " and A.WORegisterId = " + argWORegId; }

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    dWOAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                } dr.Close();
            }
            else
            {
                sSql = "Select SUM(Case When B.CancelWO=0 then Qtty else A.WOBilledQty end) Qty,Sum(isnull(A.Amount,0)) as Amt from WOTrans A " +
                      "Inner Join WORegister B on A.WORegisterId=B.WORegisterId " +
                      "Where B.CostCentreId = " + argCCId + " and B.LiveWO=0 and B.Approve='Y'  and A.IOW_Id = " + argIOWId;
                if (argWORegId != 0) { sSql = sSql + " and A.WORegisterId = " + argWORegId; }

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    dWOAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                } dr.Close();
            }

            //TotBilled

            dTotBillAmt = 0;

            if (argType == "L" || argType == "A")
            {
                sSql = "Select Sum(A.Qty) as Qty,Sum(A.Amount) Amt from BillTrans A " +
                           "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                           "Where B.CostCentreId = " + argCCId + " and A.Ratetype = '" + argRateType + "'" +
                           "and Comp_ID = " + argResId + "";

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    dTotBillAmt = dTotBillAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                }
                dr.Close();

                sSql = "Select Sum(A.Qty) as Qty,Sum(A.Amount) Amt from DPETrans A " +
                       "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                       "Where B.ConvertBill=0 and B.CostCentreId = " + argCCId + " and A.RateType= '" + argRateType + "' " +
                       "and A.Comp_ID = " + argResId + " ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    dTotBillAmt = dTotBillAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                }
                dr.Close();


                
                if (argType == "A")
                {

                    sSql = "Select Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty Else 0 End)) as Qty,Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty*C.Rate Else 0 End)) as Amt from [" + argDBName + "].dbo.Project_DetailsC A " +
                           "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + argRevId + "" +
                           "Inner Join BillTrans C on B.ProjIOWID=C.IOW_ID " +
                           "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId " +
                           "Where A.Resource_ID = " + argResId + " And D.CostCentreId = " + argCCId + " And A.Incl_Est_Flag=1 and A.RateType= '" + argRateType + "'";
                }

                else
                {

                    sSql = "Select Sum(Qty) Qty,Sum(Amt) Amt from  (Select A.Qty*B.Qty Qty,A.Amount Amt from BillTrans A " +
                           "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty,A.Amount Amt from [" + argDBName + "].dbo.Activity_Analysis A  " +
                           "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                           "Where A.Resource_ID=" + argResId + " and A.Rev_Id=" + argRevId + " and A.Analysis_Type='M') B on A.Comp_Id=B.MResource_Id " +
                           "Inner Join BillRegister C on A.BillRegisterId=C.BillRegisterId " +
                           "Where C.CostCentreId=" + argCCId + " and A.BillType='A'";
                    sSql = sSql + " and A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argResId + " and Analysis_Type='M' and Rev_Id=" + argRevId + ") " +
                           "Union All " +
                           "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*C.Qty Else 0 End as Qty,C.Amount Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                           "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + argRevId + " " +
                           "Inner Join BillTrans C on A.ProjIOWId=C.IOW_ID " +
                           "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId " +
                           "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                           "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                           "Where A.Resource_ID=" + argResId + " and A.Rev_Id=" + argRevId + " and A.Analysis_Type='M') E on E.MResource_Id=A.Resource_Id " +
                           "Where A.RateType='" + argRateType + "' and A.Incl_Est_Flag=1 and A.Resource_ID in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argResId + " and Analysis_Type='M' and Rev_Id=" + argRevId + ") And D.CostCentreId = " + argCCId;
                    sSql = sSql + " Union All " +
                            "Select A.Qty*B.Qty Qty,A.Amount Amt from BillTrans A " +
                            "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                            "Where A.Resource_ID=" + argResId + " and A.Rev_Id=" + argRevId + " and A.Analysis_Type='A') B on A.Comp_Id=B.MResource_Id " +
                            "Inner Join BillRegister C on A.BillRegisterId=C.BillRegisterId " +
                            "Where C.CostCentreId=" + argCCId + " and A.BillType='A'  and " +
                            "A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argResId + " and Analysis_Type='A' and Rev_Id=" + argRevId + ")";
                    sSql = sSql + " Union All " +
                           "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*C.Qty Else 0 End as Qty,C.Amount Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                           "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + argRevId + " " +
                           "Inner Join BillTrans C on A.ProjIOWId=C.IOW_ID " +
                           "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId " +
                           "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                           "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                           "Where A.Resource_ID=" + argResId + " and A.Rev_Id=" + argRevId + " and A.Analysis_Type='A') E on E.MResource_Id=A.Resource_Id " +
                           "Where A.RateType='" + argRateType + "' and A.Incl_Est_Flag=1 and A.Resource_ID in (Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argResId + " and Analysis_Type='A' and Rev_Id=" + argRevId + ")  And D.CostCentreId = " + argCCId;
                    sSql = sSql + " ) G";

                }
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    dTotBillAmt = dTotBillAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                } dr.Close();


                //DPE

                if (argType == "A")
                {

                    sSql = "Select Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty Else 0 End)) as Qty ,Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty*C.Rate Else 0 End)) as Amt from [" + argDBName + "].dbo.Project_DetailsC A " +
                           "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + argRevId + "" +
                           "Inner Join DPETrans C on B.ProjIOWID=C.IOW_ID " +
                           "Inner Join DPERegister D on C.DPERegisterId=D.DPERegisterId " +
                           "Where D.ConvertBill=0 and A.Resource_ID = " + argResId + " And D.CostCentreId = " + argCCId;
                    if (argDPERegId != "") { sSql = sSql + " and D.DPERegisterId not in (" + argDPERegId + ")"; }
                }

                else
                {

                    sSql = "Select Sum(Qty) Qty,Sum(Amt) Amt from  (Select A.Qty*B.Qty Qty,A.Amount Amt from DPETrans A " +
                           "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A  " +
                           "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                           "Where A.Resource_ID=" + argResId + " and A.Rev_Id=" + argRevId + " and A.Analysis_Type='M') B on A.Comp_Id=B.MResource_Id " +
                           "Inner Join DPERegister C on A.DPERegisterId=C.DPERegisterId " +
                           "Where C.ConvertBill=0 and C.CostCentreId=" + argCCId + " and A.BillType='A'";
                    if (argDPERegId != "") { sSql = sSql + " and C.DPERegisterId not in (" + argDPERegId + ")"; }
                    sSql = sSql + " and A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argResId + " and Analysis_Type='M' and Rev_Id=" + argRevId + ") " +
                           "Union All " +
                           "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*C.Qty Else 0 End as Qty,C.Amount Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                           "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + argRevId + " " +
                           "Inner Join DPETrans C on A.ProjIOWId=C.IOW_ID " +
                           "Inner Join DPERegister D on C.DPERegisterId=D.DPERegisterId " +
                           "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                           "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                           "Where A.Resource_ID=" + argResId + " and A.Rev_Id=" + argRevId + " and A.Analysis_Type='M') E on E.MResource_Id=A.Resource_Id " +
                           "Where D.ConvertBill=0 and A.Resource_ID in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argResId + " and Analysis_Type='M' and Rev_Id=" + argRevId + ") And D.CostCentreId = " + argCCId;
                    if (argDPERegId != "") { sSql = sSql + " and D.DPERegisterId not in (" + argDPERegId + ")"; }
                    sSql = sSql + " Union All " +
                            "Select A.Qty*B.Qty Qty,A.Amount Amt from DPETrans A " +
                            "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                            "Where A.Resource_ID=" + argResId + " and A.Rev_Id=" + argRevId + " and A.Analysis_Type='A') B on A.Comp_Id=B.MResource_Id " +
                            "Inner Join DPERegister C on A.DPERegisterId=C.DPERegisterId " +
                            "Where C.ConvertBill=0 and C.CostCentreId=" + argCCId + " and A.BillType='A'  and " +
                            "A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argResId + " and Analysis_Type='A' and Rev_Id=" + argRevId + ")";
                    if (argDPERegId != "") { sSql = sSql + " and C.DPERegisterId not in (" + argDPERegId + ")"; }
                    sSql = sSql + " Union All " +
                           "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*C.Qty Else 0 End as Qty,C.Amount Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                           "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + argRevId + " " +
                           "Inner Join DPETrans C on A.ProjIOWId=C.IOW_ID " +
                           "Inner Join DPERegister D on C.DPERegisterId=D.DPERegisterId " +
                           "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                           "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                           "Where A.Resource_ID=" + argResId + " and A.Rev_Id=" + argRevId + " and A.Analysis_Type='A') E on E.MResource_Id=A.Resource_Id " +
                           "Where D.ConvertBill=0 and  A.Resource_ID in (Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argResId + " and Analysis_Type='A' and Rev_Id=" + argRevId + ")  And D.CostCentreId = " + argCCId;
                    if (argDPERegId != "") { sSql = sSql + " and D.DPERegisterId not in (" + argDPERegId + ")"; }
                    sSql = sSql + " ) G";
                }

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    dTotBillAmt = dTotBillAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                } dr.Close();

            }
            else if (argType =="I")
            {
                sSql = "Select Sum(G.Qtty) as Qty,Sum(G.Amt) Amt from " +
                        "(Select SUM(Qty) Qtty,Sum(A.Amount) Amt  from BillTrans A " +
                        "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                        "Where A.IOW_ID=" + argIOWId + " and B.CostCentreId=" + argCCId + " and A.BillType='I'";
                sSql = sSql + " Union All " +
                    "Select Sum((Case When E.Qtty<>0 then (D.Qtty/E.Qtty)*(A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                    "from BillIOWTrans A  " +
                    "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                    "Inner Join BillRegister C on B.WORegisterId=C.WORegisterId " +
                    "Inner Join [" + argDBName + "].dbo.Project_DetailsC D on A.IOW_Id=D.ProjIOWId and D.Revision_ID=" + argRevId + " " +
                    "Inner Join [" + argDBName + "].dbo.IOWC E on D.ProjIOWId=E.ProjIOWId And E.Revision_ID=" + argRevId + " " +
                    "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And D.Resource_Id=F.Comp_Id " +
                    "Where A.IOW_Id = " + argIOWId + " and C.CostCentreId = " + argCCId + " and B.BillType='A'";
                sSql = sSql + " Union All " +
                     "Select Sum((Case When D.RateAnalQty<>0 then (E.Qtty/D.RateAnalQty)* (A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt  " +
                     "from BillIOWTrans A  " +
                     "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                     "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                     "Inner Join [" + argDBName + "].dbo.IOW D on A.IOW_ID=D.ProjIOWId And D.Revision_ID=" + argRevId + " " +
                     "Inner Join [" + argDBName + "].dbo.IOW G on B.IOW_Id=G.ProjIOWId And G.Revision_ID=" + argRevId + " " +
                     "Inner Join [" + argDBName + "].dbo.Rate_Analysis E on D.IOW_Trans_Id=E.IOW_Trans_Id and IOW_In_IOW_Id=G.IOW_Trans_Id " +
                     "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And F.IOW_In_IOW_Id=G.ProjIOWId " +
                     "Where A.IOW_Id = " + argIOWId + "  And C.CostCentreId = " + argCCId + "  AND B.BillType='S'";
                sSql = sSql + " )G ";

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    dTotBillAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                } dr.Close();


                sSql = "Select Sum(G.Qtty) as Qty,Sum(G.Amt) Amt from " +
                      "(Select SUM(Qty) Qtty ,Sum(A.Amount) Amt from DPETrans A " +
                      "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                      "Where A.IOW_ID=" + argIOWId + " and B.CostCentreId=" + argCCId + " and A.BillType='I' and B.ConvertBill=0";
                if (argDPERegId != "") { sSql = sSql + " and B.DPERegisterId not in (" + argDPERegId + ")"; }

                sSql = sSql + " Union All " +
                    "Select Sum((Case When E.Qtty<>0 then (D.Qtty/E.Qtty)*(A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt  " +
                    "from DPEIOWTrans A  " +
                    "Inner Join DPETrans B on A.DPETransId=B.DPETransId " +
                    "Inner Join DPERegister C on B.DPERegisterId=C.DPERegisterId " +
                    "Inner Join [" + argDBName + "].dbo.Project_DetailsC D on A.IOW_Id=D.ProjIOWId and D.Revision_ID=" + argRevId + " " +
                    "Inner Join [" + argDBName + "].dbo.IOWC E on D.ProjIOWId=E.ProjIOWId And E.Revision_ID=" + argRevId + " " +
                    "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And D.Resource_Id=F.Comp_Id " +
                    "Where A.IOW_Id = " + argIOWId + " and C.CostCentreId = " + argCCId + " and B.BillType='A' and C.ConvertBill=0 ";
                if (argDPERegId != "") { sSql = sSql + " and C.DPERegisterId not in (" + argDPERegId + ")"; }
                sSql = sSql + " Union All " +
                     "Select Sum((Case When D.RateAnalQty<>0 then (E.Qtty/D.RateAnalQty)* (A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt  " +
                     "from DPEIOWTrans A  " +
                     "Inner Join DPETrans B on A.DPETransId=B.DPETransId " +
                     "Inner Join DPERegister C on B.DPERegisterId=C.DPERegisterId " +
                     "Inner Join [" + argDBName + "].dbo.IOW D on A.IOW_ID=D.ProjIOWId And D.Revision_ID=" + argRevId + " " +
                     "Inner Join [" + argDBName + "].dbo.IOW G on B.IOW_Id=G.ProjIOWId And G.Revision_ID=" + argRevId + " " +
                     "Inner Join [" + argDBName + "].dbo.Rate_Analysis E on D.IOW_Trans_Id=E.IOW_Trans_Id and IOW_In_IOW_Id=G.IOW_Trans_Id " +
                     "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And F.IOW_In_IOW_Id=G.ProjIOWId " +
                     "Where A.IOW_Id = " + argIOWId + "  And C.CostCentreId = " + argCCId + " and B.BillType='S' and C.ConvertBill=0 ";
                if (argDPERegId != "") { sSql = sSql + " and C.DPERegisterId not in (" + argDPERegId + ")"; }
                sSql = sSql + " )G ";

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    dTotBillAmt = dTotBillAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                } dr.Close();

            }
            
            //WOBilled

            dWOBillAmt = 0;

            if (sWORegId != "")
            {

                if (argType == "L" || argType == "A")
                {
                    sSql = "Select Sum(A.Qty) as Qty,Sum(A.Amount) Amt from BillTrans A " +
                               "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                               "Where B.CostCentreId = " + argCCId + " and A.Ratetype = '" + argRateType + "'" +
                               "and Comp_ID = " + argResId + " and B.WOREgisterId in (" + sWORegId + ")";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dWOBillAmt = dWOBillAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    }
                    dr.Close();

                    sSql = "Select Sum(A.Qty) as Qty,Sum(A.Amount) Amt from DPETrans A " +
                           "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                           "Where B.ConvertBill=0 and B.CostCentreId = " + argCCId + " and A.RateType= '" + argRateType + "' " +
                           "and A.Comp_ID = " + argResId + " and B.WOREgisterId in (" + sWORegId + ")";
                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dWOBillAmt = dWOBillAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    }
                    dr.Close();
                }

                else if (argType =="I")
                {
                    sSql = "Select Sum(A.Qty) as Qty,Sum(A.Amount) Amt from BillTrans A " +
                               "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                               "Where B.CostCentreId = " + argCCId + " and A.Ratetype = '" + argRateType + "'" +
                               "and IOW_ID = " + argIOWId + " and B.WOREgisterId in (" + sWORegId + ")";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dWOBillAmt = dWOBillAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    }
                    dr.Close();

                    sSql = "Select Sum(A.Qty) as Qty,Sum(A.Amount) Amt from DPETrans A " +
                           "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                           "Where B.ConvertBill=0 and B.CostCentreId = " + argCCId + " and A.RateType= '" + argRateType + "' " +
                           "and A.IOW_ID = " + argIOWId + " and B.WOREgisterId in (" + sWORegId + ")";
                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dWOBillAmt = dWOBillAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    }
                    dr.Close();
                }

            }

            //CurBill

            dCurAmt=0;

            if (argType == "L" || argType == "A")
            {
                sSql = "Select Sum(A.Qty) as Qty,Sum(A.Amount) Amt from BillTrans A " +
                           "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                           "Where B.CostCentreId = " + argCCId + " and A.Ratetype = '" + argRateType + "'" +
                           "and Comp_ID = " + argResId + " and B.BillREgisterId = " + argBillId;

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    dCurAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                }
                dr.Close();
            }

            else if (argType == "I")
            {
                sSql = "Select Sum(A.Qty) as Qty,Sum(A.Amount) Amt from BillTrans A " +
                           "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                           "Where B.CostCentreId = " + argCCId + " and A.Ratetype = '" + argRateType + "'" +
                           "and IOW_ID = " + argIOWId + " and B.BillREgisterId = " + argBillId;

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dr = cmd.ExecuteReader();
                while (dr.Read())
                {
                    dCurAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                }
                dr.Close();
            }

            BsfGlobal.g_WPMDB.Close();

            argEstAmt = dEstAmt;
            argWOAmt = dWOAmt;
            argWOBillAmt = dWOBillAmt;
            argTotBillAmt = dTotBillAmt;
            argCurAmt = dCurAmt;

        }

        public DataTable BindGridDetails(string argType, int argID, int argCCId, int argContractId, int m_lRevId, int argPartRate, decimal argRate, string argSplit, int argAHeadId, int argWoRegId, int argLbrResId, int argBillRegId, string argMode, bool argWOAmdment, string argRateType,string argDBName,string argDPERegId)
        {
            SqlDataReader dr;
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd;
            DataTable dtFinal = new DataTable();
            string sSql = "";
            decimal dNQty = 0;
            decimal dNAmt = 0;
            string sWORegId = "";
          

            dtFinal.Columns.Add("Estimated", typeof(string));
            dtFinal.Columns.Add("WorkOrder", typeof(string));
            dtFinal.Columns.Add("WOBilled", typeof(string));
            dtFinal.Columns.Add("Client Billed", typeof(string));
            dtFinal.Columns.Add("Total Billed", typeof(string));
            dtFinal.Columns.Add("Current Billed", typeof(string));
            dtFinal.Columns.Add("PartQty", typeof(string));
            dtFinal.Columns.Add("DPEQty", typeof(string));

            dtFinal.Rows.Add("","","","","","","","");
            dtFinal.Rows.Add("", "", "", "", "","","","");
            //dtFinal.Rows.Add("", "", "", "", "", "");      

            try
            {
                if (argWoRegId != 0)
                {
                    sWORegId = CommFun.GetAmendWORegIdNew(argWoRegId, BsfGlobal.g_WPMDB);
                }
                else
                {
                    sWORegId = argWoRegId.ToString();
                }

                #region WOType L && A

                #region Estimate Qty Rate
                if (argType == "L" || argType == "A")
                {

                    if (argType == "A")
                    {
                        if (argSplit == "N")
                        {
                            sSql = "Select A.Qtty,A.Qualified_Rate Unit_Rate from [" + argDBName + "].dbo.Project_ComponentsC A " +
                                    "Where A.Resource_Id = " + argID + " and A.Revision_ID=" + m_lRevId + " and A.RateType ='" + argRateType + "'";
                        }
                        else
                        {
                            sSql = "Select sum((A.Qtty/B.Qtty)*D.Qty) Qtty,(Select Qualified_Rate from [" + argDBName + "].dbo.Resource_Rate " +
                                   "Where Resource_Id=" + argID + " and Rev_ID=" + m_lRevId + " and RateType = '" + argRateType + "') Unit_Rate from [" + argDBName + "].dbo.Project_DetailsC A  " +
                                   "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + m_lRevId + " " +
                                   "Inner Join [" + argDBName + "].dbo.AnalysisIOWC D on A.ProjIOWId=D.ProjIOWId and D.Revision_Id=" + m_lRevId + " " +
                                   "Where A.Revision_ID=" + m_lRevId + " and A.Resource_Id=" + argID + " and RateType='" + argRateType + "'";
                        }
                    }
                    else if (argType == "L")
                    {
                        if (argSplit == "N")
                        {
                            sSql = "Select isnull(Sum(G.Qty),0) Qtty,(Select Qualified_Rate from [" + argDBName + "].dbo.Resource_Rate " +
                                   " where Resource_Id=" + argID + " and Rev_ID=" + m_lRevId + " and RateType = '" + argRateType + "') Unit_Rate from ( " +
                                   "Select A.Qtty Qty from [" + argDBName + "].dbo.Project_DetailsC A " +
                                   "Where A.Resource_ID=" + argID + " and A.Revision_ID=" + m_lRevId + " " +
                                   "Union All " +
                                   "Select (A.Qtty*C.Qty) Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                                   "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                                   "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                                   "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') C " +
                                   "on A.Resource_ID=C.MResource_ID and A.RateType='M' " +
                                   "Where A.Revision_ID=" + m_lRevId + " " +
                                   "Union All  " +
                                   "Select (A.Qtty*C.Qty) Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                                   "Inner Join (Select MResource_Id,Case When B.AAnalysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                                   "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                                   "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') C  " +
                                   "on A.Resource_ID=C.MResource_ID and A.RateType='A'  Where A.Revision_ID=" + m_lRevId + ") G  Where G.Qty>0";
                        }
                        else
                        {
                            sSql = "Select isnull(Sum(G.Qty),0) Qtty,(Select Qualified_Rate from [" + argDBName + "].dbo.Resource_Rate " +
                            "where Resource_Id=" + argID + " and Rev_ID=" + m_lRevId + " and RateType = '" + argRateType + "') Unit_Rate from(Select (A.Qtty/B.Qtty)*C.Qty Qty from [" + argDBName + "].dbo.Project_DetailsC A   " +
                            "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + m_lRevId + "   " +
                            "Inner Join [" + argDBName + "].dbo.AnalysisIOWC C on A.ProjIOWId=C.ProjIOWId and C.Revision_Id=" + m_lRevId + " " +
                            "Where A.Resource_ID=" + argID + " and A.Revision_ID=" + m_lRevId + " " +
                            "Union All   " +
                            "Select ((A.Qtty*C.Qty)/B.Qtty)*D.Qty Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                            "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + m_lRevId + "   " +
                            "Inner Join [" + argDBName + "].dbo.AnalysisIOWC D on A.ProjIOWId=D.ProjIOWId and D.Revision_Id=" + m_lRevId + "   " +
                            "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                            "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') C on A.Resource_ID=C.MResource_ID and A.RateType='M'  " +
                            "Where A.Revision_ID=" + m_lRevId + "   " +
                            "Union All   " +
                            "Select ((A.Qtty*C.Qty)/B.Qtty)*D.Qty Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                            "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + m_lRevId + "  " +
                            "Inner Join [" + argDBName + "].dbo.AnalysisIOWC D on A.ProjIOWId=D.ProjIOWId and D.Revision_Id=" + m_lRevId + "   " +
                            "Inner Join (Select MResource_Id,Case When B.AAnalysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                            "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') C on A.Resource_ID=C.MResource_ID and A.RateType='A'  " +
                            "Where A.Revision_ID=" + m_lRevId + ") G  " +
                            "Where G.Qty>0  ";
                        }
                    }
                    decimal dQty = 0;
                    decimal dRate = 0;
                    decimal dAmount = 0;

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"], CommFun.datatypes.vartypenumeric));
                        dRate = Convert.ToDecimal(CommFun.IsNullCheck(dr["Unit_Rate"], CommFun.datatypes.vartypenumeric));
                        dAmount = dQty * dRate;

                        dtFinal.Rows[0]["Estimated"] = CommFun.FormatNum1(dQty.ToString(), BsfGlobal.g_iQtyDigit);
                        dtFinal.Rows[1]["Estimated"] = CommFun.FormatNum1(dRate.ToString(), BsfGlobal.g_iCurrencyDigit);
                        //dtFinal.Rows[2]["Estimated"] = CommFun.FormatNum1(dAmount.ToString(), BsfGlobal.g_iCurrencyDigit);
                    }
                    dr.Close();

                    dNQty = 0;
                    dNAmt = 0;

                #endregion

                    #region WorkOrdetails

                    sSql = "Select SUM(Case When B.CancelWO=0 then Qtty else A.WOBilledQty end) Qty,Sum(isnull(A.Amount,0)) as Amt from WOTrans A " +
                     "Inner Join WORegister B on A.WORegisterId=B.WORegisterId " +
                     "Where B.LiveWO=0 and B.Approve='Y' and B.CostCentreId = " + argCCId + " and A.Comp_ID = " + argID + " and A.RateType= '" + argRateType + "' and B.ContractorId = " + argContractId;
                    if (argWoRegId != 0) { sSql = sSql + " and A.WORegisterId = " + argWoRegId; }

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();

                    if (argType == "A")
                    {
                        sSql = "Select Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)* (Case When D.CancelWO=0 then C.Qtty else C.WOBilledQty end) Else 0 End)) as Qty,Sum(isnull(C.Amount,0)) Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                               "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + " " +
                               "Inner Join WOTrans C on A.ProjIOWId=C.IOW_ID " +
                               "Inner Join WORegister D on C.WORegisterId=D.WORegisterId Where A.Revision_ID=" + m_lRevId + " and D.LiveWO=0 and A.Resource_ID = " + argID + " And D.CostCentreId = " + argCCId + " and D.Approve='Y' and D.ContractorID = " + argContractId;
                        if (argWoRegId != 0) { sSql = sSql + " and D.WORegisterId = " + argWoRegId; }
                    }
                    else
                    {

                        sSql = "Select Sum(Qty) Qty,Sum(Amt) Amt from  (Select (Case When C.CancelWO=0 then A.Qtty else A.WOBilledQty end)*B.Qty Qty,isnull(A.Amount,0) Amt from Wotrans A " +
                               "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A  " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                               "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') B on A.Comp_Id=B.MResource_Id " +
                               "Inner Join WORegister C on A.WORegisterId=C.WORegisterId " +
                               "Where C.CostCentreId=" + argCCId + " and A.WOType='A' and C.Approve='Y' and C.LiveWO=0 and C.ContractorId = " + argContractId;
                        if (argWoRegId != 0) { sSql = sSql + " and C.WORegisterId = " + argWoRegId; }
                        sSql = sSql + " and A.RateType = 'M' and A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='M' and Rev_Id=" + m_lRevId + ") " +
                               "Union All " +
                               "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*(Case When D.CancelWO=0 then C.Qtty else C.WOBilledQty end) Else 0 End as Qty,isnull(C.Amount,0) Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                               "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + " " +
                               "Inner Join WOTrans C on A.ProjIOWId=C.IOW_ID " +
                               "Inner Join WORegister D on C.WORegisterId=D.WORegisterId " +
                               "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                               "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') E on E.MResource_Id=A.Resource_Id " +
                               "Where A.Revision_ID=" + m_lRevId + " and D.LiveWO=0 and D.Approve='Y' and A.Resource_ID in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='M' and Rev_Id=" + m_lRevId + ") And D.CostCentreId = " + argCCId + "  and D.ContractorId = " + argContractId;
                        if (argWoRegId != 0) { sSql = sSql + " and C.WORegisterId = " + argWoRegId; }
                        sSql = sSql + " Union All " +
                                "Select (Case When C.CancelWO=0 then A.Qtty else A.WOBilledQty end)*B.Qty Qty,isnull(A.Amount,0) Amt from Wotrans A " +
                                "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                                "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                                "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') B on A.Comp_Id=B.MResource_Id " +
                                "Inner Join WORegister C on A.WORegisterId=C.WORegisterId " +
                                "Where C.CostCentreId=" + argCCId + " and C.Approve='Y' and A.WOType='A' and C.LiveWO=0  and " +
                                "A.RateType ='A' and A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='A' and Rev_Id=" + m_lRevId + ") and C.ContractorId = " + argContractId;
                        if (argWoRegId != 0) { sSql = sSql + " and C.WORegisterId = " + argWoRegId; }
                        sSql = sSql + " Union All " +
                               "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*(Case When D.CancelWO=0 then C.Qtty else C.WOBilledQty end) Else 0 End as Qty,isnull(C.Amount,0) Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                               "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + " " +
                               "Inner Join WOTrans C on A.ProjIOWId=C.IOW_ID " +
                               "Inner Join WORegister D on C.WORegisterId=D.WORegisterId " +
                               "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                               "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') E on E.MResource_Id=A.Resource_Id " +
                               "Where A.Revision_ID=" + m_lRevId + " and D.LiveWO=0 and D.Approve='Y' and A.Resource_ID in (Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='A' and Rev_Id=" + m_lRevId + ")  And D.CostCentreId = " + argCCId + " and D.contractorId = " + argContractId;
                        if (argWoRegId != 0) { sSql = sSql + " and D.WORegisterId = " + argWoRegId; }
                        sSql = sSql + " ) G";
                    }


                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();

                    dtFinal.Rows[0]["WorkOrder"] = CommFun.FormatNum1(dNQty.ToString(), BsfGlobal.g_iQtyDigit);
                    if (dNAmt != 0 && dNQty != 0)
                    {
                        dtFinal.Rows[1]["WorkOrder"] = CommFun.FormatNum1((dNAmt / dNQty).ToString(), BsfGlobal.g_iCurrencyDigit);
                    }


                    dNQty = 0;
                    dNAmt = 0;
                    #endregion

                    #region WO Billed Qty

                    if (sWORegId != "")
                    {
                        sSql = "Select Sum(A.Qty) as Qty,Sum(isnull(A.Amount,0)) as Amt from BillTrans A " +
                               "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                               "Where B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContractId + " " +
                               "and Comp_ID = " + argID + " and B.WORegisterId in (" + sWORegId + ")";


                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                            dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                        } dr.Close();


                        //cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        //if ((cmd.ExecuteScalar() != DBNull.Value) && (cmd.ExecuteScalar() != null))
                        //{
                        //    dNQty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                        //    dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                        //}

                        sSql = "Select Sum(A.Qty) as Qty,Sum(isnull(A.Amount,0)) as Amt from DPETrans A " +
                               "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                               "Where B.ConvertBill=0 and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContractId + " " +
                               "and A.Comp_ID = " + argID + " and B.WORegisterId in (" + sWORegId + ")";
                        if (argDPERegId != "") { sSql = sSql + " and B.DPERegisterId not in (" + argDPERegId + ")"; }


                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                            dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                        } dr.Close();
                    }
                    //Bill
                    //if (argType == "A")
                    //{
                    //    sSql = "Select Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty Else 0 End)) as Qty,Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty*C.Rate Else 0 End)) as Amt from [" + argDBName + "].dbo.Project_DetailsC A " +
                    //        "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + "" +
                    //        "Inner Join BillTrans C on B.ProjIOWID=C.IOW_ID " +
                    //        "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId " +
                    //        "Where A.Resource_ID = " + argID + " And D.CostCentreId = " + argCCId + " and D.ContractorId = " + argContractId + "";
                    //}
                    //else
                    //{
                    //    sSql = "Select Sum(Qty) Qty,Sum(Amt) Amt from  (Select A.Qty*B.Qty Qty,A.Amount Amt from BillTrans A " +
                    //           "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A  " +
                    //           "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                    //           "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') B on A.Comp_Id=B.MResource_Id " +
                    //           "Inner Join BillRegister C on A.BillRegisterId=C.BillRegisterId " +
                    //           "Where C.CostCentreId=" + argCCId + " and A.BillType='A' and C.ContractorId = " + argContractId;
                    //    sSql = sSql + " and A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='M' and Rev_Id=" + m_lRevId + ") " +
                    //           "Union All " +
                    //           "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*C.Qty Else 0 End as Qty,C.Amount Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                    //           "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + " " +
                    //           "Inner Join BillTrans C on A.ProjIOWId=C.IOW_ID " +
                    //           "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId " +
                    //           "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                    //           "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                    //           "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') E on E.MResource_Id=A.Resource_Id " +
                    //           "Where A.Resource_ID in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='M' and Rev_Id=" + m_lRevId + ") And D.CostCentreId = " + argCCId + "  and D.ContractorId = " + argContractId;
                    //    sSql = sSql + " Union All " +
                    //            "Select A.Qty*B.Qty Qty,A.Amount Amt from BillTrans A " +
                    //            "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                    //            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                    //            "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') B on A.Comp_Id=B.MResource_Id " +
                    //            "Inner Join BillRegister C on A.BillRegisterId=C.BillRegisterId " +
                    //            "Where C.CostCentreId=" + argCCId + " and A.BillType='A'  and " +
                    //            "A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='A' and Rev_Id=" + m_lRevId + ") and C.ContractorId = " + argContractId;
                    //    sSql = sSql + " Union All " +
                    //           "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*C.Qty Else 0 End as Qty,C.Amount Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                    //           "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + " " +
                    //           "Inner Join BillTrans C on A.ProjIOWId=C.IOW_ID " +
                    //           "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId " +
                    //           "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                    //           "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                    //           "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') E on E.MResource_Id=A.Resource_Id " +
                    //           "Where A.Resource_ID in (Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='A' and Rev_Id=" + m_lRevId + ")  And D.CostCentreId = " + argCCId + " and D.contractorId = " + argContractId;
                    //    sSql = sSql + " ) G";

                    //}
                    //cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    //dr = cmd.ExecuteReader();
                    //while (dr.Read())
                    //{
                    //    dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                    //    dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    //} dr.Close();
                    ////DPE

                    //if (argType == "A")
                    //{
                    //    sSql = "Select Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty Else 0 End)) as Qty,Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty*C.Rate Else 0 End)) as Amt from [" + argDBName + "].dbo.Project_DetailsC A " +
                    //        "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + "" +
                    //        "Inner Join DPETrans C on B.ProjIOWID=C.IOW_ID " +
                    //        "Inner Join DPERegister D on C.DPERegisterId=D.DPERegisterId " +
                    //        "Where D.ConvertBill=0 and A.Resource_ID = " + argID + " And D.CostCentreId = " + argCCId + " and D.ContractorId = " + argContractId + "";
                    //}
                    //else
                    //{
                    //    sSql = "Select Sum(Qty) Qty,Sum(Amt) Amt from  (Select A.Qty*B.Qty Qty,A.Amount Amt from DPETrans A " +
                    //        "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A  " +
                    //        "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                    //        "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') B on A.Comp_Id=B.MResource_Id " +
                    //        "Inner Join DPERegister C on A.DPERegisterId=C.DPERegisterId " +
                    //        "Where C.ConvertBill=0 and C.CostCentreId=" + argCCId + " and A.BillType='A' and C.ContractorId = " + argContractId;
                    //    sSql = sSql + " and A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='M' and Rev_Id=" + m_lRevId + ") " +
                    //        "Union All " +
                    //        "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*C.Qty Else 0 End as Qty,C.Amount Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                    //           "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + " " +
                    //           "Inner Join DPETrans C on A.ProjIOWId=C.IOW_ID " +
                    //           "Inner Join DPERegister D on C.DPERegisterId=D.DPERegisterId " +
                    //           "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                    //           "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                    //           "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') E on E.MResource_Id=A.Resource_Id " +
                    //           "Where D.ConvertBill=0 and A.Resource_ID in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='M' and Rev_Id=" + m_lRevId + ") And D.CostCentreId = " + argCCId + "  and D.ContractorId = " + argContractId;
                    //    sSql = sSql + " Union All " +
                    //            "Select A.Qty*B.Qty Qty,A.Amount from DPETrans A " +
                    //            "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                    //            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                    //            "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') B on A.Comp_Id=B.MResource_Id " +
                    //            "Inner Join DPERegister C on A.DPERegisterId=C.DPERegisterId " +
                    //            "Where C.ConvertBill=0 and C.CostCentreId=" + argCCId + " and A.BillType='A'  and " +
                    //            "A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='A' and Rev_Id=" + m_lRevId + ") and C.ContractorId = " + argContractId;
                    //    sSql = sSql + " Union All " +
                    //           "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*C.Qty Else 0 End as Qty,C.Amount Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                    //           "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + " " +
                    //           "Inner Join DPETrans C on A.ProjIOWId=C.IOW_ID " +
                    //           "Inner Join DPERegister D on C.DPERegisterId=D.DPERegisterId " +
                    //           "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                    //           "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                    //           "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') E on E.MResource_Id=A.Resource_Id " +
                    //           "Where D.ConvertBill=0 and  A.Resource_ID in (Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='A' and Rev_Id=" + m_lRevId + ")  And D.CostCentreId = " + argCCId + " and D.contractorId = " + argContractId;
                    //    sSql = sSql + " ) G";
                    //}

                    //cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    //dr = cmd.ExecuteReader();
                    //while (dr.Read())
                    //{
                    //    dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                    //    dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    //} dr.Close();

                    dtFinal.Rows[0]["WOBilled"] = CommFun.FormatNum1(dNQty.ToString(), BsfGlobal.g_iQtyDigit);
                    //if (dNAmt != 0 && dNQty != 0)
                    //{
                    //    dtFinal.Rows[1]["Contractor Billed"] = CommFun.FormatNum1((dNAmt / dNQty).ToString(), BsfGlobal.g_iCurrencyDigit);
                    //}                  

                    dNQty = 0;
                    dNAmt = 0;

                    #endregion

                    #region Client Billed Qty

                    dtFinal.Rows[0]["Client Billed"] = CommFun.FormatNum1("0", BsfGlobal.g_iQtyDigit);
                    //dtFinal.Rows[1]["Client Billed"] =CommFun.FormatNum1("0",BsfGlobal.g_iCurrencyDigit);                    
                    dNQty = 0;
                    dNAmt = 0;

                    #endregion

                    #region Total Billed Qty

                    sSql = "Select Sum(A.Qty) as Qty,Sum(A.Amount) Amt from BillTrans A " +
                       "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                       "Where B.CostCentreId = " + argCCId + " and A.Ratetype = '" + argRateType + "'" +
                       "and Comp_ID = " + argID + "";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();

                    sSql = "Select Sum(A.Qty) as Qty,Sum(A.Amount) Amt from DPETrans A " +
                           "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                           "Where B.ConvertBill=0 and B.CostCentreId = " + argCCId + " and A.RateType= '" + argRateType + "' " +
                           "and A.Comp_ID = " + argID + " ";
                    if (argDPERegId != "") { sSql = sSql + " and B.DPERegisterId not in (" + argDPERegId + ")"; }
                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();


                    //Bill
                    if (argType == "A")
                    {

                        sSql = "Select Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty Else 0 End)) as Qty,Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty*C.Rate Else 0 End)) as Amt from [" + argDBName + "].dbo.Project_DetailsC A " +
                               "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + "" +
                               "Inner Join BillTrans C on B.ProjIOWID=C.IOW_ID " +
                               "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId " +
                               "Where A.Revision_ID=" + m_lRevId + " and A.Resource_ID = " + argID + " And D.CostCentreId = " + argCCId + " And A.Incl_Est_Flag=1 and A.RateType= '" + argRateType + "'";
                    }

                    else
                    {

                        sSql = "Select Sum(Qty) Qty,Sum(Amt) Amt from  (Select A.Qty*B.Qty Qty,A.Amount Amt from BillTrans A " +
                               "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty,A.Amount Amt from [" + argDBName + "].dbo.Activity_Analysis A  " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                               "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') B on A.Comp_Id=B.MResource_Id " +
                               "Inner Join BillRegister C on A.BillRegisterId=C.BillRegisterId " +
                               "Where C.CostCentreId=" + argCCId + " and A.BillType='A'";
                        sSql = sSql + " and A.RateType='M' and A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='M' and Rev_Id=" + m_lRevId + ") " +
                               "Union All " +
                               "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*C.Qty Else 0 End as Qty,C.Amount Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                               "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + " " +
                               "Inner Join BillTrans C on A.ProjIOWId=C.IOW_ID " +
                               "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId " +
                               "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                               "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') E on E.MResource_Id=A.Resource_Id " +
                               "Where A.Revision_ID=" + m_lRevId + " and A.RateType='" + argRateType + "' and A.Incl_Est_Flag=1 and A.Resource_ID in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='M' and Rev_Id=" + m_lRevId + ") And D.CostCentreId = " + argCCId;
                        sSql = sSql + " Union All " +
                                "Select A.Qty*B.Qty Qty,A.Amount Amt from BillTrans A " +
                                "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                                "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                                "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') B on A.Comp_Id=B.MResource_Id " +
                                "Inner Join BillRegister C on A.BillRegisterId=C.BillRegisterId " +
                                "Where C.CostCentreId=" + argCCId + " and A.BillType='A'  and " +
                                "A.RateType ='A' and A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='A' and Rev_Id=" + m_lRevId + ")";
                        sSql = sSql + " Union All " +
                               "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*C.Qty Else 0 End as Qty,C.Amount Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                               "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + " " +
                               "Inner Join BillTrans C on A.ProjIOWId=C.IOW_ID " +
                               "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId " +
                               "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                               "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') E on E.MResource_Id=A.Resource_Id " +
                               "Where A.Revision_ID=" + m_lRevId + " and A.RateType='" + argRateType + "' and A.Incl_Est_Flag=1 and A.Resource_ID in (Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='A' and Rev_Id=" + m_lRevId + ")  And D.CostCentreId = " + argCCId;
                        sSql = sSql + " ) G";

                    }
                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();


                    //DPE

                    if (argType == "A")
                    {

                        sSql = "Select Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty Else 0 End)) as Qty ,Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty*C.Rate Else 0 End)) as Amt from [" + argDBName + "].dbo.Project_DetailsC A " +
                               "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + "" +
                               "Inner Join DPETrans C on B.ProjIOWID=C.IOW_ID " +
                               "Inner Join DPERegister D on C.DPERegisterId=D.DPERegisterId " +
                               "Where A.Revision_ID=" + m_lRevId + " and D.ConvertBill=0 and A.Resource_ID = " + argID + " And D.CostCentreId = " + argCCId;
                        if (argDPERegId != "") { sSql = sSql + " and D.DPERegisterId not in (" + argDPERegId + ")"; }
                    }

                    else
                    {

                        sSql = "Select Sum(Qty) Qty,Sum(Amt) Amt from  (Select A.Qty*B.Qty Qty,A.Amount Amt from DPETrans A " +
                               "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A  " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                               "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') B on A.Comp_Id=B.MResource_Id " +
                               "Inner Join DPERegister C on A.DPERegisterId=C.DPERegisterId " +
                               "Where C.ConvertBill=0 and C.CostCentreId=" + argCCId + " and A.BillType='A'";
                        if (argDPERegId != "") { sSql = sSql + " and C.DPERegisterId not in (" + argDPERegId + ")"; }
                        sSql = sSql + " and A.RateType='M' and A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='M' and Rev_Id=" + m_lRevId + ") " +
                               "Union All " +
                               "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*C.Qty Else 0 End as Qty,C.Amount Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                               "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + " " +
                               "Inner Join DPETrans C on A.ProjIOWId=C.IOW_ID " +
                               "Inner Join DPERegister D on C.DPERegisterId=D.DPERegisterId " +
                               "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                               "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') E on E.MResource_Id=A.Resource_Id " +
                               "Where A.Revision_ID=" + m_lRevId + " and D.ConvertBill=0 and A.Resource_ID in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='M' and Rev_Id=" + m_lRevId + ") And D.CostCentreId = " + argCCId;
                        if (argDPERegId != "") { sSql = sSql + " and D.DPERegisterId not in (" + argDPERegId + ")"; }
                        sSql = sSql + " Union All " +
                                "Select A.Qty*B.Qty Qty,A.Amount Amt from DPETrans A " +
                                "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                                "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                                "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') B on A.Comp_Id=B.MResource_Id " +
                                "Inner Join DPERegister C on A.DPERegisterId=C.DPERegisterId " +
                                "Where C.ConvertBill=0 and C.CostCentreId=" + argCCId + " and A.BillType='A'  and " +
                                "A.RateType ='A' and A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='A' and Rev_Id=" + m_lRevId + ")";
                        if (argDPERegId != "") { sSql = sSql + " and C.DPERegisterId not in (" + argDPERegId + ")"; }
                        sSql = sSql + " Union All " +
                               "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*C.Qty Else 0 End as Qty,C.Amount Amt from [" + argDBName + "].dbo.Project_DetailsC A  " +
                               "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + " " +
                               "Inner Join DPETrans C on A.ProjIOWId=C.IOW_ID " +
                               "Inner Join DPERegister D on C.DPERegisterId=D.DPERegisterId " +
                               "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                               "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') E on E.MResource_Id=A.Resource_Id " +
                               "Where A.Revision_ID=" + m_lRevId + " and D.ConvertBill=0 and  A.Resource_ID in (Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='A' and Rev_Id=" + m_lRevId + ")  And D.CostCentreId = " + argCCId;
                        if (argDPERegId != "") { sSql = sSql + " and D.DPERegisterId not in (" + argDPERegId + ")"; }
                        sSql = sSql + " ) G";
                    }

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();

                    dtFinal.Rows[0]["Total Billed"] = CommFun.FormatNum1(dNQty.ToString(), BsfGlobal.g_iQtyDigit);
                    //if (dNAmt != 0 && dNQty != 0)
                    //{
                    //    dtFinal.Rows[1]["Total Billed"] = CommFun.FormatNum1((dNAmt / dNQty).ToString(), BsfGlobal.g_iCurrencyDigit);
                    //}               

                    dNQty = 0;
                    dNAmt = 0;

                    #endregion

                }

                #endregion

                #region WoType I

                #region Estimate Qty

                if (argType == "I")
                {
                    if (argSplit != "Y")
                    {
                        sSql = "Select Qtty,Qualified_Rate from [" + argDBName + "].dbo.IOWC  " +
                               "Where ProjIOWID = " + argID + "  And Revision_ID=" + m_lRevId;
                    }
                    else
                    {
                        sSql = "Select Sum(G.Qty) Qtty,G.Qualified_Rate from (" +
                                "Select A.Qty,(Select Qualified_Rate from [" + argDBName + "].dbo.IOWC " +
                                "Where ProjIOWID=" + argID + " and Revision_ID=" + m_lRevId + ") Qualified_Rate from [" + argDBName + "].dbo.AnalysisIOWC A  " +
                                "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWID=B.ProjIOWId " +
                                "Where B.ProjIOWID = " + argID + " And B.Revision_ID=" + m_lRevId + ") G Group BY G.Qualified_Rate ";
                    }
                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dtFinal.Rows[0]["Estimated"] = CommFun.FormatNum1(Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"].ToString(), CommFun.datatypes.vartypenumeric)).ToString(), BsfGlobal.g_iQtyDigit);
                        dtFinal.Rows[1]["Estimated"] = CommFun.FormatNum1(Convert.ToDecimal(CommFun.IsNullCheck(dr["Qualified_Rate"].ToString(), CommFun.datatypes.vartypenumeric)).ToString(), BsfGlobal.g_iCurrencyDigit);
                    }
                    dr.Close();

                    dNQty = 0;
                    dNAmt = 0;

                #endregion

                    #region Work Order Details
                    //WOQty

                    sSql = "Select Sum(G.Qtty) as Qty,Sum(G.Amt) Amt from " +
                        "(Select SUM(Case When B.CancelWO=0 then Qtty else A.WOBilledQty end) Qtty,Sum(A.Amount) Amt from WOTrans A " +
                        "Inner Join WOREgister B on A.WOREgisterId=B.WORegisterId " +
                        "Where B.LiveWO=0 and B.Approve='Y' and A.IOW_ID=" + argID + "  and B.CostCentreId=" + argCCId + " and A.WOType='I' and A.WORegisterID = " + argWoRegId + " " +
                        "Union All " +
                        "Select Sum((Case When E.Qtty<>0 then (D.Qtty/E.Qtty)* (Case When C.CancelWO=0 then A.Qty else A.WOBilledQty end)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                        "from WOIOWTrans A  " +
                        "Inner Join WOTrans B on A.WOTransId=B.WOTransId " +
                        "Inner Join WORegister C on B.WORegisterId=C.WORegisterId " +
                        "Inner Join [" + argDBName + "].dbo.Project_DetailsC D on A.IOW_Id=D.ProjIOWId and D.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.IOWC E on D.ProjIOWId=E.ProjIOWId And E.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And D.Resource_Id=F.Comp_Id " +
                        "Where C.LiveWO=0 and C.Approve='Y' and A.IOW_Id = " + argID + "  And C.CostCentreId = " + argCCId + " AND C.WORegisterId = " + argWoRegId + " and B.WOType='A' " +
                        "Union All " +
                        "Select Sum((Case When D.RateAnalQty<>0 then (E.Qtty/D.RateAnalQty)* (Case When C.CancelWO=0 then A.Qty else A.WOBilledQty end)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                        "from WOIOWTrans A  " +
                        "Inner Join WOTrans B on A.WOTransId=B.WOTransId " +
                        "Inner Join WORegister C on B.WORegisterId=C.WORegisterId " +
                        "Inner Join [" + argDBName + "].dbo.IOW D on A.IOW_ID=D.ProjIOWId And D.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.IOW G on B.IOW_Id=G.ProjIOWId And G.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.Rate_Analysis E on D.IOW_Trans_Id=E.IOW_Trans_Id and IOW_In_IOW_Id=G.IOW_Trans_Id " +
                        "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And F.IOW_In_IOW_Id=G.ProjIOWId " +
                        "Where C.LiveWO=0 and C.Approve='Y' and A.IOW_Id = " + argID + "  And C.CostCentreId = " + argCCId + "  AND C.WORegisterId = " + argWoRegId + "  and B.WOType='S' " +
                        ")G ";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();

                    dtFinal.Rows[0]["WorkOrder"] = CommFun.FormatNum1(dNQty.ToString(), BsfGlobal.g_iQtyDigit);
                    if (dNAmt != 0 && dNQty != 0)
                    {
                        dtFinal.Rows[1]["WorkOrder"] = CommFun.FormatNum1((dNAmt / dNQty).ToString(), BsfGlobal.g_iCurrencyDigit);
                    }

                    dNQty = 0;
                    dNAmt = 0;

                    #endregion

                    #region Contractor Billed

                    //WO Billed

                    if (sWORegId != "")
                    {
                        dNQty = 0;
                        sSql = "Select SUM(Qty) Qty,Sum(A.Amount) Amt from BillTrans A " +
                              "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                              "Where A.IOW_ID=" + argID + " and B.CostCentreId=" + argCCId + " and A.BillType='I' and B.ContractorId = " + argContractId + " and B.WORegisterId in (" + sWORegId + ")";



                        //sSql = "Select Sum(G.Qtty) as Qty,Sum(G.Amt) Amt from " +
                        //      "(Select SUM(Qty) Qtty,Sum(A.Amount) Amt from BillTrans A " +
                        //      "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                        //      "Where A.IOW_ID=" + argID + " and B.CostCentreId=" + argCCId + " and A.BillType='I' and B.ContractorId = " + argContractId;
                        //sSql = sSql + " Union All " +
                        //    "Select Sum((Case When E.Qtty<>0 then (D.Qtty/E.Qtty)*(A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                        //    "from BillIOWTrans A  " +
                        //    "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        //    "Inner Join BillRegister C on B.WORegisterId=C.WORegisterId " +
                        //    "Inner Join [" + argDBName + "].dbo.Project_DetailsC D on A.IOW_Id=D.ProjIOWId and D.Revision_ID=" + m_lRevId + " " +
                        //    "Inner Join [" + argDBName + "].dbo.IOWC E on D.ProjIOWId=E.ProjIOWId And E.Revision_ID=" + m_lRevId + " " +
                        //    "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And D.Resource_Id=F.Comp_Id " +
                        //    "Where A.IOW_Id = " + argID + " and C.CostCentreId = " + argCCId + " and B.BillType='A' and C.ContractorId = " + argContractId;
                        //sSql = sSql + " Union All " +
                        //     "Select Sum((Case When D.RateAnalQty<>0 then (E.Qtty/D.RateAnalQty)* (A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                        //     "from BillIOWTrans A  " +
                        //     "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        //     "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                        //     "Inner Join [" + argDBName + "].dbo.IOW D on A.IOW_ID=D.ProjIOWId And D.Revision_ID=" + m_lRevId + " " +
                        //     "Inner Join [" + argDBName + "].dbo.IOW G on B.IOW_Id=G.ProjIOWId And G.Revision_ID=" + m_lRevId + " " +
                        //     "Inner Join [" + argDBName + "].dbo.Rate_Analysis E on D.IOW_Trans_Id=E.IOW_Trans_Id and IOW_In_IOW_Id=G.IOW_Trans_Id " +
                        //     "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And F.IOW_In_IOW_Id=G.ProjIOWId " +
                        //     "Where A.IOW_Id = " + argID + "  And C.CostCentreId = " + argCCId + "  AND C.ContractorId = " + argContractId + " and B.BillType='S'";
                        //sSql = sSql + " )G ";

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                            dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                        } dr.Close();


                        sSql = "Select SUM(Qty) Qty,Sum(A.Amount) Amt from DPETrans A " +
                              "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                              "Where A.IOW_ID=" + argID + " and B.CostCentreId=" + argCCId + " and A.BillType='I' and B.ConvertBill=0 and B.ContractorId = " + argContractId + " and B.WORegisterId in (" + sWORegId + ")";
                        if (argDPERegId != "") { sSql = sSql + " and B.DPERegisterId not in (" + argDPERegId + ")"; }

                        //sSql = "Select Sum(G.Qtty) as Qty,Sum(G.Amt) Amt from " +
                        //      "(Select SUM(Qty) Qtty,Sum(A.Amount) Amt from DPETrans A " +
                        //      "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                        //      "Where A.IOW_ID=" + argID + " and B.CostCentreId=" + argCCId + " and A.BillType='I' and B.ConvertBill=0 and B.ContractorId = " + argContractId;
                        //if (argDPERegId != "") { sSql = sSql + " and B.DPERegisterId not in (" + argDPERegId + ")"; }
                        //sSql = sSql + " Union All " +
                        //    "Select Sum((Case When E.Qtty<>0 then (D.Qtty/E.Qtty)*(A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                        //    "from DPEIOWTrans A  " +
                        //    "Inner Join DPETrans B on A.DPETransId=B.DPETransId " +
                        //    "Inner Join DPERegister C on B.DPERegisterId=C.DPERegisterId " +
                        //    "Inner Join [" + argDBName + "].dbo.Project_DetailsC D on A.IOW_Id=D.ProjIOWId and D.Revision_ID=" + m_lRevId + " " +
                        //    "Inner Join [" + argDBName + "].dbo.IOWC E on D.ProjIOWId=E.ProjIOWId And E.Revision_ID=" + m_lRevId + " " +
                        //    "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And D.Resource_Id=F.Comp_Id " +
                        //    "Where A.IOW_Id = " + argID + " and C.CostCentreId = " + argCCId + " and C.ConvertBill=0 and B.BillType='A' and C.ContractorId = " + argContractId;
                        //if (argDPERegId != "") { sSql = sSql + " and C.DPERegisterId not in (" + argDPERegId + ")"; }
                        //sSql = sSql + " Union All " +
                        //     "Select Sum((Case When D.RateAnalQty<>0 then (E.Qtty/D.RateAnalQty)* (A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                        //     "from DPEIOWTrans A  " +
                        //     "Inner Join DPETrans B on A.DPETransId=B.DPETransId " +
                        //     "Inner Join DPERegister C on B.DPERegisterId=C.DPERegisterId " +
                        //     "Inner Join [" + argDBName + "].dbo.IOW D on A.IOW_ID=D.ProjIOWId And D.Revision_ID=" + m_lRevId + " " +
                        //     "Inner Join [" + argDBName + "].dbo.IOW G on B.IOW_Id=G.ProjIOWId And G.Revision_ID=" + m_lRevId + " " +
                        //     "Inner Join [" + argDBName + "].dbo.Rate_Analysis E on D.IOW_Trans_Id=E.IOW_Trans_Id and IOW_In_IOW_Id=G.IOW_Trans_Id " +
                        //     "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And F.IOW_In_IOW_Id=G.ProjIOWId " +
                        //     "Where A.IOW_Id = " + argID + "  And C.CostCentreId = " + argCCId + "  AND C.ContractorId = " + argContractId + " and C.ConvertBill=0 and B.BillType='S'";
                        //if (argDPERegId != "") { sSql = sSql + " and C.DPERegisterId not in (" + argDPERegId + ")"; }
                        //sSql = sSql + " )G ";

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                            dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                        } dr.Close();

                        dtFinal.Rows[0]["WOBilled"] = CommFun.FormatNum1(dNQty.ToString(), BsfGlobal.g_iQtyDigit);
                        if (dNAmt != 0 && dNQty != 0)
                        {
                            dtFinal.Rows[1]["WOBilled"] = CommFun.FormatNum1((dNAmt / dNQty).ToString(), BsfGlobal.g_iCurrencyDigit);
                        }
                    }
                    #endregion

                    #region Client Billed Qty

                    dtFinal.Rows[0]["Client Billed"] = CommFun.FormatNum1("0", BsfGlobal.g_iQtyDigit);
                    //dtFinal.Rows[1]["Client Billed"] =CommFun.FormatNum1("0",BsfGlobal.g_iCurrencyDigit);                    
                    dNQty = 0;
                    dNAmt = 0;

                    #endregion

                    #region Total Billed

                    //TOtal(DPE+Bill)

                    dNQty = 0;
                    dNAmt = 0;
                    sSql = "Select Sum(G.Qtty) as Qty,Sum(G.Amt) Amt from " +
                          "(Select SUM(Qty) Qtty,Sum(A.Amount) Amt  from BillTrans A " +
                          "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                          "Where A.IOW_ID=" + argID + " and B.CostCentreId=" + argCCId + " and A.BillType='I'";
                    sSql = sSql + " Union All " +
                        "Select Sum((Case When E.Qtty<>0 then (D.Qtty/E.Qtty)*(A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                        "from BillIOWTrans A  " +
                        "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        "Inner Join BillRegister C on B.WORegisterId=C.WORegisterId " +
                        "Inner Join [" + argDBName + "].dbo.Project_DetailsC D on A.IOW_Id=D.ProjIOWId and D.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.IOWC E on D.ProjIOWId=E.ProjIOWId And E.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And D.Resource_Id=F.Comp_Id " +
                        "Where A.IOW_Id = " + argID + " and C.CostCentreId = " + argCCId + " and B.BillType='A'";
                    sSql = sSql + " Union All " +
                         "Select Sum((Case When D.RateAnalQty<>0 then (E.Qtty/D.RateAnalQty)* (A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt  " +
                         "from BillIOWTrans A  " +
                         "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                         "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                         "Inner Join [" + argDBName + "].dbo.IOW D on A.IOW_ID=D.ProjIOWId And D.Revision_ID=" + m_lRevId + " " +
                         "Inner Join [" + argDBName + "].dbo.IOW G on B.IOW_Id=G.ProjIOWId And G.Revision_ID=" + m_lRevId + " " +
                         "Inner Join [" + argDBName + "].dbo.Rate_Analysis E on D.IOW_Trans_Id=E.IOW_Trans_Id and IOW_In_IOW_Id=G.IOW_Trans_Id " +
                         "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And F.IOW_In_IOW_Id=G.ProjIOWId " +
                         "Where A.IOW_Id = " + argID + "  And C.CostCentreId = " + argCCId + "  AND B.BillType='S'";
                    sSql = sSql + " )G ";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();


                    sSql = "Select Sum(G.Qtty) as Qty,Sum(G.Amt) Amt from " +
                          "(Select SUM(Qty) Qtty ,Sum(A.Amount) Amt from DPETrans A " +
                          "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                          "Where A.IOW_ID=" + argID + " and B.CostCentreId=" + argCCId + " and A.BillType='I' and B.ConvertBill=0";
                    if (argDPERegId != "") { sSql = sSql + " and B.DPERegisterId not in (" + argDPERegId + ")"; }

                    sSql = sSql + " Union All " +
                        "Select Sum((Case When E.Qtty<>0 then (D.Qtty/E.Qtty)*(A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt  " +
                        "from DPEIOWTrans A  " +
                        "Inner Join DPETrans B on A.DPETransId=B.DPETransId " +
                        "Inner Join DPERegister C on B.DPERegisterId=C.DPERegisterId " +
                        "Inner Join [" + argDBName + "].dbo.Project_DetailsC D on A.IOW_Id=D.ProjIOWId and D.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.IOWC E on D.ProjIOWId=E.ProjIOWId And E.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And D.Resource_Id=F.Comp_Id " +
                        "Where A.IOW_Id = " + argID + " and C.CostCentreId = " + argCCId + " and B.BillType='A' and C.ConvertBill=0 ";
                    if (argDPERegId != "") { sSql = sSql + " and C.DPERegisterId not in (" + argDPERegId + ")"; }
                    sSql = sSql + " Union All " +
                         "Select Sum((Case When D.RateAnalQty<>0 then (E.Qtty/D.RateAnalQty)* (A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt  " +
                         "from DPEIOWTrans A  " +
                         "Inner Join DPETrans B on A.DPETransId=B.DPETransId " +
                         "Inner Join DPERegister C on B.DPERegisterId=C.DPERegisterId " +
                         "Inner Join [" + argDBName + "].dbo.IOW D on A.IOW_ID=D.ProjIOWId And D.Revision_ID=" + m_lRevId + " " +
                         "Inner Join [" + argDBName + "].dbo.IOW G on B.IOW_Id=G.ProjIOWId And G.Revision_ID=" + m_lRevId + " " +
                         "Inner Join [" + argDBName + "].dbo.Rate_Analysis E on D.IOW_Trans_Id=E.IOW_Trans_Id and IOW_In_IOW_Id=G.IOW_Trans_Id " +
                         "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And F.IOW_In_IOW_Id=G.ProjIOWId " +
                         "Where A.IOW_Id = " + argID + "  And C.CostCentreId = " + argCCId + " and B.BillType='S' and C.ConvertBill=0 ";
                    if (argDPERegId != "") { sSql = sSql + " and C.DPERegisterId not in (" + argDPERegId + ")"; }
                    sSql = sSql + " )G ";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();

                    dtFinal.Rows[0]["Total Billed"] = CommFun.FormatNum1(dNQty.ToString(), BsfGlobal.g_iQtyDigit);
                    if (dNAmt != 0 && dNQty != 0)
                    {
                        dtFinal.Rows[1]["Total Billed"] = CommFun.FormatNum1((dNAmt / dNQty).ToString(), BsfGlobal.g_iCurrencyDigit);
                    }

                    if (argSplit !="Y")
                    {
                        if (argDPERegId != "")
                        {
                            dNQty = 0;
                            sSql = "Select SUM(Qty) Qty from DPETrans A " +
                                  "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                                  "Where A.IOW_ID=" + argID + " and B.CostCentreId=" + argCCId + " and A.BillType='I' and B.DPERegisterId not in (" + argDPERegId + ")"; 

                             cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                             dr = cmd.ExecuteReader();
                             while (dr.Read())
                             {
                                 dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"], CommFun.datatypes.vartypenumeric));
                                 
                              }
                              dr.Close();

                              dtFinal.Rows[0]["DPEQty"] = CommFun.FormatNum1(dNQty.ToString(), BsfGlobal.g_iQtyDigit);
                        }
                    }



                    #endregion

                #endregion

             
                }


                #region WoType SubIOW

                #region Estimate Qty

                if (argType == "S")
                {
                    if (argSplit != "Y")
                    {

                        sSql = "Select Sum(A.Qtty*I.Qty) Qtty,A.Qualified_Rate from [" + argDBName + "].dbo.IOWC A  " +
                            "Join  " +
                            "(Select C1.ProjIOWId,A1.Qtty/C1.RateAnalQty Qty from [" + argDBName + "].dbo.Rate_Analysis A1   " +
                            "Inner Join [" + argDBName + "].dbo.IOW B1 on A1.IOW_In_IOW_Id=B1.IOW_Trans_ID   " +
                            "Inner Join [" + argDBName + "].dbo.IOW C1 on A1.IOW_Trans_ID=C1.IOW_Trans_ID    " +
                            "Where B1.Revision_ID=" + m_lRevId + " and B1.ProjIOWID=" + argID + " and IOW_In_IOW_Id<>0) I on A.ProjIOWId = I.ProjIOWId and A.Revision_Id=" + m_lRevId + " " +
                            "Where A.Revision_Id=" + m_lRevId + " Group by A.Qualified_Rate";
                    }
                    else
                    {

                        sSql = "Select Sum(G.Qty) Qtty,G.Qualified_Rate from (" +
                                "Select A.Qty,(Select Qualified_Rate from [" + argDBName + "].dbo.IOWC " +
                                "Where ProjIOWID=" + argID + " and Revision_ID=" + m_lRevId + ") Qualified_Rate from [" + argDBName + "].dbo.AnalysisIOWC A  " +
                                "Join  " +
                                "(Select C1.ProjIOWId,A1.Qtty/C1.RateAnalQty Qty from [" + argDBName + "].dbo.Rate_Analysis A1   " +
                                "Inner Join [" + argDBName + "].dbo.IOW B1 on A1.IOW_In_IOW_Id=B1.IOW_Trans_ID    " +
                                "Inner Join [" + argDBName + "].dbo.IOW C1 on A1.IOW_Trans_ID=C1.IOW_Trans_ID    " +
                                "Where B1.Revision_ID=" + m_lRevId + " and B1.ProjIOWID=" + argID + " and IOW_In_IOW_Id<>0) I on A.ProjIOWId = I.ProjIOWId and A.Revision_Id=" + m_lRevId + " " +
                                "Where A.Revision_Id=" + m_lRevId + ")G Group by G.Qualified_Rate";
                    }
                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dtFinal.Rows[0]["Estimated"] = CommFun.FormatNum1(Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"].ToString(), CommFun.datatypes.vartypenumeric)).ToString(), BsfGlobal.g_iQtyDigit);
                        dtFinal.Rows[1]["Estimated"] = CommFun.FormatNum1(Convert.ToDecimal(CommFun.IsNullCheck(dr["Qualified_Rate"].ToString(), CommFun.datatypes.vartypenumeric)).ToString(), BsfGlobal.g_iCurrencyDigit);
                    }
                    dr.Close();

                    dNQty = 0;
                    dNAmt = 0;

                #endregion

                    #region Work Order Details
                    //WOQty

                    sSql = "Select Sum(G.Qtty) as Qty,Sum(G.Amt) Amt from " +
                        "(Select SUM(Case When B.CancelWO=0 then Qtty else A.WOBilledQty end) Qtty,Sum(A.Amount) Amt from WOTrans A " +
                        "Inner Join WOREgister B on A.WOREgisterId=B.WORegisterId " +
                        "Where B.LiveWO=0 and B.Approve='Y' and A.IOW_ID=" + argID + "  and B.CostCentreId=" + argCCId + " and A.WOType='I' and A.WORegisterID = " + argWoRegId + " " +
                        "Union All " +
                        "Select Sum((Case When E.Qtty<>0 then (D.Qtty/E.Qtty)* (Case When C.CancelWO=0 then A.Qty else A.WOBilledQty end)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                        "from WOIOWTrans A  " +
                        "Inner Join WOTrans B on A.WOTransId=B.WOTransId " +
                        "Inner Join WORegister C on B.WORegisterId=C.WORegisterId " +
                        "Inner Join [" + argDBName + "].dbo.Project_DetailsC D on A.IOW_Id=D.ProjIOWId and D.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.IOWC E on D.ProjIOWId=E.ProjIOWId And E.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And D.Resource_Id=F.Comp_Id " +
                        "Where C.LiveWO=0 and C.Approve='Y' and A.IOW_Id = " + argID + "  And C.CostCentreId = " + argCCId + " AND C.WORegisterId = " + argWoRegId + " and B.WOType='A' " +
                        "Union All " +
                        "Select Sum((Case When D.RateAnalQty<>0 then (E.Qtty/D.RateAnalQty)* (Case When C.CancelWO=0 then A.Qty else A.WOBilledQty end)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                        "from WOIOWTrans A  " +
                        "Inner Join WOTrans B on A.WOTransId=B.WOTransId " +
                        "Inner Join WORegister C on B.WORegisterId=C.WORegisterId " +
                        "Inner Join [" + argDBName + "].dbo.IOW D on A.IOW_ID=D.ProjIOWId And D.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.IOW G on B.IOW_Id=G.ProjIOWId And G.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.Rate_Analysis E on D.IOW_Trans_Id=E.IOW_Trans_Id and IOW_In_IOW_Id=G.IOW_Trans_Id " +
                        "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And F.IOW_In_IOW_Id=G.ProjIOWId " +
                        "Where C.LiveWO=0 and C.Approve='Y' and A.IOW_Id = " + argID + "  And C.CostCentreId = " + argCCId + "  AND C.WORegisterId = " + argWoRegId + "  and B.WOType='S' " +
                        ")G ";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();

                    dtFinal.Rows[0]["WorkOrder"] = CommFun.FormatNum1(dNQty.ToString(), BsfGlobal.g_iQtyDigit);
                    if (dNAmt != 0 && dNQty != 0)
                    {
                        dtFinal.Rows[1]["WorkOrder"] = CommFun.FormatNum1((dNAmt / dNQty).ToString(), BsfGlobal.g_iCurrencyDigit);
                    }

                    dNQty = 0;
                    dNAmt = 0;

                    #endregion

                    #region Contractor Billed

                    //WO Billed

                    if (sWORegId != "")
                    {
                        dNQty = 0;
                        sSql = "Select SUM(Qty) Qty,Sum(A.Amount) Amt from BillTrans A " +
                              "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                              "Where A.IOW_ID=" + argID + " and B.CostCentreId=" + argCCId + " and A.BillType='S' and B.ContractorId = " + argContractId + " and B.WORegisterId in (" + sWORegId + ")";



                        //sSql = "Select Sum(G.Qtty) as Qty,Sum(G.Amt) Amt from " +
                        //      "(Select SUM(Qty) Qtty,Sum(A.Amount) Amt from BillTrans A " +
                        //      "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                        //      "Where A.IOW_ID=" + argID + " and B.CostCentreId=" + argCCId + " and A.BillType='I' and B.ContractorId = " + argContractId;
                        //sSql = sSql + " Union All " +
                        //    "Select Sum((Case When E.Qtty<>0 then (D.Qtty/E.Qtty)*(A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                        //    "from BillIOWTrans A  " +
                        //    "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        //    "Inner Join BillRegister C on B.WORegisterId=C.WORegisterId " +
                        //    "Inner Join [" + argDBName + "].dbo.Project_DetailsC D on A.IOW_Id=D.ProjIOWId and D.Revision_ID=" + m_lRevId + " " +
                        //    "Inner Join [" + argDBName + "].dbo.IOWC E on D.ProjIOWId=E.ProjIOWId And E.Revision_ID=" + m_lRevId + " " +
                        //    "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And D.Resource_Id=F.Comp_Id " +
                        //    "Where A.IOW_Id = " + argID + " and C.CostCentreId = " + argCCId + " and B.BillType='A' and C.ContractorId = " + argContractId;
                        //sSql = sSql + " Union All " +
                        //     "Select Sum((Case When D.RateAnalQty<>0 then (E.Qtty/D.RateAnalQty)* (A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                        //     "from BillIOWTrans A  " +
                        //     "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        //     "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                        //     "Inner Join [" + argDBName + "].dbo.IOW D on A.IOW_ID=D.ProjIOWId And D.Revision_ID=" + m_lRevId + " " +
                        //     "Inner Join [" + argDBName + "].dbo.IOW G on B.IOW_Id=G.ProjIOWId And G.Revision_ID=" + m_lRevId + " " +
                        //     "Inner Join [" + argDBName + "].dbo.Rate_Analysis E on D.IOW_Trans_Id=E.IOW_Trans_Id and IOW_In_IOW_Id=G.IOW_Trans_Id " +
                        //     "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And F.IOW_In_IOW_Id=G.ProjIOWId " +
                        //     "Where A.IOW_Id = " + argID + "  And C.CostCentreId = " + argCCId + "  AND C.ContractorId = " + argContractId + " and B.BillType='S'";
                        //sSql = sSql + " )G ";

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                            dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                        } dr.Close();


                        sSql = "Select SUM(Qty) Qty,Sum(A.Amount) Amt from DPETrans A " +
                              "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                              "Where A.IOW_ID=" + argID + " and B.CostCentreId=" + argCCId + " and A.BillType='S' and B.ConvertBill=0 and B.ContractorId = " + argContractId + " and B.WORegisterId in (" + sWORegId + ")";
                        if (argDPERegId != "") { sSql = sSql + " and B.DPERegisterId not in (" + argDPERegId + ")"; }

                        //sSql = "Select Sum(G.Qtty) as Qty,Sum(G.Amt) Amt from " +
                        //      "(Select SUM(Qty) Qtty,Sum(A.Amount) Amt from DPETrans A " +
                        //      "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                        //      "Where A.IOW_ID=" + argID + " and B.CostCentreId=" + argCCId + " and A.BillType='I' and B.ConvertBill=0 and B.ContractorId = " + argContractId;
                        //if (argDPERegId != "") { sSql = sSql + " and B.DPERegisterId not in (" + argDPERegId + ")"; }
                        //sSql = sSql + " Union All " +
                        //    "Select Sum((Case When E.Qtty<>0 then (D.Qtty/E.Qtty)*(A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                        //    "from DPEIOWTrans A  " +
                        //    "Inner Join DPETrans B on A.DPETransId=B.DPETransId " +
                        //    "Inner Join DPERegister C on B.DPERegisterId=C.DPERegisterId " +
                        //    "Inner Join [" + argDBName + "].dbo.Project_DetailsC D on A.IOW_Id=D.ProjIOWId and D.Revision_ID=" + m_lRevId + " " +
                        //    "Inner Join [" + argDBName + "].dbo.IOWC E on D.ProjIOWId=E.ProjIOWId And E.Revision_ID=" + m_lRevId + " " +
                        //    "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And D.Resource_Id=F.Comp_Id " +
                        //    "Where A.IOW_Id = " + argID + " and C.CostCentreId = " + argCCId + " and C.ConvertBill=0 and B.BillType='A' and C.ContractorId = " + argContractId;
                        //if (argDPERegId != "") { sSql = sSql + " and C.DPERegisterId not in (" + argDPERegId + ")"; }
                        //sSql = sSql + " Union All " +
                        //     "Select Sum((Case When D.RateAnalQty<>0 then (E.Qtty/D.RateAnalQty)* (A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                        //     "from DPEIOWTrans A  " +
                        //     "Inner Join DPETrans B on A.DPETransId=B.DPETransId " +
                        //     "Inner Join DPERegister C on B.DPERegisterId=C.DPERegisterId " +
                        //     "Inner Join [" + argDBName + "].dbo.IOW D on A.IOW_ID=D.ProjIOWId And D.Revision_ID=" + m_lRevId + " " +
                        //     "Inner Join [" + argDBName + "].dbo.IOW G on B.IOW_Id=G.ProjIOWId And G.Revision_ID=" + m_lRevId + " " +
                        //     "Inner Join [" + argDBName + "].dbo.Rate_Analysis E on D.IOW_Trans_Id=E.IOW_Trans_Id and IOW_In_IOW_Id=G.IOW_Trans_Id " +
                        //     "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And F.IOW_In_IOW_Id=G.ProjIOWId " +
                        //     "Where A.IOW_Id = " + argID + "  And C.CostCentreId = " + argCCId + "  AND C.ContractorId = " + argContractId + " and C.ConvertBill=0 and B.BillType='S'";
                        //if (argDPERegId != "") { sSql = sSql + " and C.DPERegisterId not in (" + argDPERegId + ")"; }
                        //sSql = sSql + " )G ";

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                            dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                        } dr.Close();

                        dtFinal.Rows[0]["WOBilled"] = CommFun.FormatNum1(dNQty.ToString(), BsfGlobal.g_iQtyDigit);
                        if (dNAmt != 0 && dNQty != 0)
                        {
                            dtFinal.Rows[1]["WOBilled"] = CommFun.FormatNum1((dNAmt / dNQty).ToString(), BsfGlobal.g_iCurrencyDigit);
                        }
                    }
                    #endregion

                    #region Client Billed Qty

                    dtFinal.Rows[0]["Client Billed"] = CommFun.FormatNum1("0", BsfGlobal.g_iQtyDigit);
                    //dtFinal.Rows[1]["Client Billed"] =CommFun.FormatNum1("0",BsfGlobal.g_iCurrencyDigit);                    
                    dNQty = 0;
                    dNAmt = 0;

                    #endregion

                    #region Total Billed

                    //TOtal(DPE+Bill)

                    dNQty = 0;
                    dNAmt = 0;
                    sSql = "Select Sum(G.Qtty) as Qty,Sum(G.Amt) Amt from " +
                          "(Select SUM(Qty) Qtty,Sum(A.Amount) Amt  from BillTrans A " +
                          "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                          "Where A.IOW_ID=" + argID + " and B.CostCentreId=" + argCCId + " and A.BillType='I'";
                    sSql = sSql + " Union All " +
                        "Select Sum((Case When E.Qtty<>0 then (D.Qtty/E.Qtty)*(A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt " +
                        "from BillIOWTrans A  " +
                        "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                        "Inner Join BillRegister C on B.WORegisterId=C.WORegisterId " +
                        "Inner Join [" + argDBName + "].dbo.Project_DetailsC D on A.IOW_Id=D.ProjIOWId and D.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.IOWC E on D.ProjIOWId=E.ProjIOWId And E.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And D.Resource_Id=F.Comp_Id " +
                        "Where A.IOW_Id = " + argID + " and C.CostCentreId = " + argCCId + " and B.BillType='A'";
                    sSql = sSql + " Union All " +
                         "Select Sum((Case When D.RateAnalQty<>0 then (E.Qtty/D.RateAnalQty)* (A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt  " +
                         "from BillIOWTrans A  " +
                         "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                         "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                         "Inner Join [" + argDBName + "].dbo.IOW D on A.IOW_ID=D.ProjIOWId And D.Revision_ID=" + m_lRevId + " " +
                         "Inner Join [" + argDBName + "].dbo.IOW G on B.IOW_Id=G.ProjIOWId And G.Revision_ID=" + m_lRevId + " " +
                         "Inner Join [" + argDBName + "].dbo.Rate_Analysis E on D.IOW_Trans_Id=E.IOW_Trans_Id and IOW_In_IOW_Id=G.IOW_Trans_Id " +
                         "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And F.IOW_In_IOW_Id=G.ProjIOWId " +
                         "Where A.IOW_Id = " + argID + "  And C.CostCentreId = " + argCCId + "  AND B.BillType='S'";
                    sSql = sSql + " )G ";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();


                    sSql = "Select Sum(G.Qtty) as Qty,Sum(G.Amt) Amt from " +
                          "(Select SUM(Qty) Qtty ,Sum(A.Amount) Amt from DPETrans A " +
                          "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                          "Where A.IOW_ID=" + argID + " and B.CostCentreId=" + argCCId + " and A.BillType='I' and B.ConvertBill=0";
                    if (argDPERegId != "") { sSql = sSql + " and B.DPERegisterId not in (" + argDPERegId + ")"; }

                    sSql = sSql + " Union All " +
                        "Select Sum((Case When E.Qtty<>0 then (D.Qtty/E.Qtty)*(A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt  " +
                        "from DPEIOWTrans A  " +
                        "Inner Join DPETrans B on A.DPETransId=B.DPETransId " +
                        "Inner Join DPERegister C on B.DPERegisterId=C.DPERegisterId " +
                        "Inner Join [" + argDBName + "].dbo.Project_DetailsC D on A.IOW_Id=D.ProjIOWId and D.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.IOWC E on D.ProjIOWId=E.ProjIOWId And E.Revision_ID=" + m_lRevId + " " +
                        "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And D.Resource_Id=F.Comp_Id " +
                        "Where A.IOW_Id = " + argID + " and C.CostCentreId = " + argCCId + " and B.BillType='A' and C.ConvertBill=0 ";
                    if (argDPERegId != "") { sSql = sSql + " and C.DPERegisterId not in (" + argDPERegId + ")"; }
                    sSql = sSql + " Union All " +
                         "Select Sum((Case When D.RateAnalQty<>0 then (E.Qtty/D.RateAnalQty)* (A.Qty)*(F.Percentage/100) Else 0 End)) as Qty,Sum(B.Amount) Amt  " +
                         "from DPEIOWTrans A  " +
                         "Inner Join DPETrans B on A.DPETransId=B.DPETransId " +
                         "Inner Join DPERegister C on B.DPERegisterId=C.DPERegisterId " +
                         "Inner Join [" + argDBName + "].dbo.IOW D on A.IOW_ID=D.ProjIOWId And D.Revision_ID=" + m_lRevId + " " +
                         "Inner Join [" + argDBName + "].dbo.IOW G on B.IOW_Id=G.ProjIOWId And G.Revision_ID=" + m_lRevId + " " +
                         "Inner Join [" + argDBName + "].dbo.Rate_Analysis E on D.IOW_Trans_Id=E.IOW_Trans_Id and IOW_In_IOW_Id=G.IOW_Trans_Id " +
                         "Inner Join [" + argDBName + "].dbo.ClaimItem F on A.IOW_Id=F.IOW_ID And F.IOW_In_IOW_Id=G.ProjIOWId " +
                         "Where A.IOW_Id = " + argID + "  And C.CostCentreId = " + argCCId + " and B.BillType='S' and C.ConvertBill=0 ";
                    if (argDPERegId != "") { sSql = sSql + " and C.DPERegisterId not in (" + argDPERegId + ")"; }
                    sSql = sSql + " )G ";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();

                    dtFinal.Rows[0]["Total Billed"] = CommFun.FormatNum1(dNQty.ToString(), BsfGlobal.g_iQtyDigit);
                    if (dNAmt != 0 && dNQty != 0)
                    {
                        dtFinal.Rows[1]["Total Billed"] = CommFun.FormatNum1((dNAmt / dNQty).ToString(), BsfGlobal.g_iCurrencyDigit);
                    }

                    if (argSplit != "Y")
                    {
                        if (argDPERegId != "")
                        {
                            dNQty = 0;
                            sSql = "Select SUM(Qty) Qty from DPETrans A " +
                                  "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                                  "Where A.IOW_ID=" + argID + " and B.CostCentreId=" + argCCId + " and A.BillType='S' and B.DPERegisterId not in (" + argDPERegId + ")";

                            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                            dr = cmd.ExecuteReader();
                            while (dr.Read())
                            {
                                dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"], CommFun.datatypes.vartypenumeric));

                            }
                            dr.Close();

                            dtFinal.Rows[0]["DPEQty"] = CommFun.FormatNum1(dNQty.ToString(), BsfGlobal.g_iQtyDigit);
                        }
                    }



                    #endregion

                #endregion


                }

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dtFinal;
        }

        public DataTable BindGridDetails_Old(string argType, int argID, int argCCId, int argContractId, int m_lRevId, int argPartRate, decimal argRate, string argSplit, int argAHeadId, int argWoRegId, int argLbrResId, int argBillRegId, string argMode, bool argWOAmdment, string argRateType,string argDBName)
        {
            SqlDataReader dr;
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd;
            DataTable dtFinal = new DataTable();
            string sSql = "";
            decimal dNQty = 0;
            decimal dNAmt = 0;
            decimal dWOCurrQty = 0;
            decimal dCBCurrQty=0;
            decimal dWOAmdBilledQty = 0;
            string sWORegId = "";
            DataRow drw;


            //Estimate
            dtFinal.Columns.Add("EstimatedQty", typeof(decimal));
            dtFinal.Columns.Add("EstimatedRate", typeof(decimal));
            dtFinal.Columns.Add("EstimatedAmount", typeof(decimal));
            dtFinal.Columns.Add("EstimatedPRate", typeof(decimal));
            //dtFinal.Columns.Add("EstimatedCurQty", typeof(decimal));
            dtFinal.Columns.Add("EstimatedPRQty", typeof(decimal));

            //Work Order
            dtFinal.Columns.Add("WorkOrderQty", typeof(decimal));           
            dtFinal.Columns.Add("WorkOrderRate", typeof(decimal));
            dtFinal.Columns.Add("WorkOrderAmount", typeof(decimal));
            dtFinal.Columns.Add("WorkOrderPRate", typeof(decimal));
            //dtFinal.Columns.Add("WorkOrderCurQty", typeof(decimal));
            dtFinal.Columns.Add("WorkOrderPRQty", typeof(decimal));

            //Contractor Billed
            dtFinal.Columns.Add("Contractor BilledQty", typeof(decimal));            
            dtFinal.Columns.Add("Contractor BilledRate", typeof(decimal));
            dtFinal.Columns.Add("Contractor BilledAmount", typeof(decimal));
            dtFinal.Columns.Add("Contractor BilledPRate", typeof(decimal));
            //dtFinal.Columns.Add("Contractor BilledCurQty", typeof(decimal));
            dtFinal.Columns.Add("Contractor BilledPRQty", typeof(decimal));


            //Total Billed
            dtFinal.Columns.Add("Client BilledQty", typeof(decimal));
            dtFinal.Columns.Add("Client BilledRate", typeof(decimal));
            dtFinal.Columns.Add("Client BilledAmount", typeof(decimal));
            dtFinal.Columns.Add("Client BilledPRate", typeof(decimal));
            //dtFinal.Columns.Add("Client BilledCurQty", typeof(decimal));
            dtFinal.Columns.Add("Client BilledPRQty", typeof(decimal));

            //Total Billed
            dtFinal.Columns.Add("Total BilledQty", typeof(decimal));
            dtFinal.Columns.Add("Total BilledRate", typeof(decimal));
            dtFinal.Columns.Add("Total BilledAmount", typeof(decimal));
            dtFinal.Columns.Add("Total BilledPRate", typeof(decimal));
            dtFinal.Columns.Add("Total BilledCurQty", typeof(decimal));
            dtFinal.Columns.Add("Total BilledPRQty", typeof(decimal));

            try
            {
                if (argWOAmdment == true)
                {
                    if (argWoRegId != 0)
                    {
                        sWORegId = CommFun.GetAmendWORegIdNew(argWoRegId, BsfGlobal.g_WPMDB);
                    }
                }                

                #region WOType L && A
                if (argType == "L" || argType == "A")
                {

                    drw = dtFinal.NewRow();

                    if (argType == "A")
                    {
                        if (argSplit == "N")
                        {
                            sSql = "Select A.Qtty,A.Qualified_Rate Unit_Rate from [" + argDBName + "].dbo.Project_ComponentsC A " +
                                    "Where A.Resource_Id = " + argID + " and A.Revision_ID=" + m_lRevId + " and A.RateType ='" + argRateType + "'";
                        }
                        else
                        {
                            sSql = "Select sum((A.Qtty/B.Qtty)*D.Qty) Qtty,(Select Qualified_Rate from [" + argDBName + "].dbo.Resource_Rate " +
                                   "Where Resource_Id=" + argID + " and Rev_ID=" + m_lRevId + " and RateType = '" + argRateType + "') Unit_Rate from [" + argDBName + "].dbo.Project_DetailsC A  " +
                                   "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + m_lRevId + " " +
                                   "Inner Join [" + argDBName + "].dbo.AnalysisIOWC D on A.ProjIOWId=D.ProjIOWId and D.Revision_Id=" + m_lRevId + " " +
                                   "Where A.Resource_Id=" + argID + " and RateType='" + argRateType + "'";
                        }

                    }
                    else if (argType == "L")
                    {                      

                        if (argSplit == "N")
                        {
                            sSql = "Select isnull(Sum(G.Qty),0) Qtty,(Select Qualified_Rate from [" + argDBName + "].dbo.Resource_Rate " +
                                   " where Resource_Id=" + argID + " and Rev_ID=" + m_lRevId + " and RateType = '" + argRateType + "') Unit_Rate from ( " +
                                   "Select A.Qtty Qty from [" + argDBName + "].dbo.Project_DetailsC A " +
                                   "Where A.Resource_ID=" + argID + " and A.Revision_ID=" + m_lRevId + " " +
                                   "Union All " +
                                   "Select (A.Qtty*C.Qty) Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                                   "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                                   "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                                   "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') C " +
                                   "on A.Resource_ID=C.MResource_ID and A.RateType='M' " +
                                   "Where A.Revision_ID=" + m_lRevId + " " +
                                   "Union All  " +
                                   "Select (A.Qtty*C.Qty) Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                                   "Inner Join (Select MResource_Id,Case When B.AAnalysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                                   "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                                   "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') C  " +
                                   "on A.Resource_ID=C.MResource_ID and A.RateType='A'  Where A.Revision_ID=" + m_lRevId + ") G  Where G.Qty>0";
                        }
                        else
                        {
                            sSql = "Select isnull(Sum(G.Qty),0) Qtty,(Select Qualified_Rate from [" + argDBName + "].dbo.Resource_Rate " +
                            "where Resource_Id=" + argID + " and Rev_ID=" + m_lRevId + " and RateType = '" + argRateType + "') Unit_Rate from(Select (A.Qtty/B.Qtty)*C.Qty Qty from [" + argDBName + "].dbo.Project_DetailsC A   " +
                            "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + m_lRevId + "   " +
                            "Inner Join [" + argDBName + "].dbo.AnalysisIOWC C on A.ProjIOWId=C.ProjIOWId and C.Revision_Id=" + m_lRevId + " " +
                            "Where A.Resource_ID=" + argID + " and A.Revision_ID=" + m_lRevId + " " +
                            "Union All   " +
                            "Select ((A.Qtty*C.Qty)/B.Qtty)*D.Qty Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                            "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + m_lRevId + "   " +
                            "Inner Join [" + argDBName + "].dbo.AnalysisIOWC D on A.ProjIOWId=D.ProjIOWId and D.Revision_Id=" + m_lRevId + "   " +
                            "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                            "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') C on A.Resource_ID=C.MResource_ID and A.RateType='M'  " +
                            "Where A.Revision_ID=" + m_lRevId + "   " +
                            "Union All   " +
                            "Select ((A.Qtty*C.Qty)/B.Qtty)*D.Qty Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                            "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + m_lRevId + "  " +
                            "Inner Join [" + argDBName + "].dbo.AnalysisIOWC D on A.ProjIOWId=D.ProjIOWId and D.Revision_Id=" + m_lRevId + "   " +
                            "Inner Join (Select MResource_Id,Case When B.AAnalysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                            "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') C on A.Resource_ID=C.MResource_ID and A.RateType='A'  " +
                            "Where A.Revision_ID=" + m_lRevId + ") G  " +
                            "Where G.Qty>0  ";
                        }
                    }

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        drw["EstimatedQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"].ToString(), CommFun.datatypes.vartypenumeric)).ToString();
                        drw["EstimatedRate"] = Convert.ToDecimal(CommFun.IsNullCheck(dr["Unit_Rate"].ToString(), CommFun.datatypes.vartypenumeric)).ToString();                        
                        drw["EstimatedAmount"] =(Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"].ToString(), CommFun.datatypes.vartypenumeric)) * Convert.ToDecimal(CommFun.IsNullCheck(dr["Unit_Rate"].ToString(), CommFun.datatypes.vartypenumeric))).ToString();

                    }
                    dr.Close();

                    dNQty = 0;
                    dNAmt = 0;

                    #region WorkOrdetails

                    sSql = "Select SUM(Case When B.CancelWO=0 then Qtty else A.WOBilledQty end) Qty from WOTrans A " +
                     "Inner Join WORegister B on A.WORegisterId=B.WORegisterId " +
                     "Where B.LiveWO=0 and B.Approve='Y' and B.CostCentreId = " + argCCId + " and A.Comp_ID = " + argID + " and B.ContractorId = " + argContractId;
                    if (argWoRegId != 0) { sSql = sSql + " and A.WORegisterId = " + argWoRegId; }
                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    if ((cmd.ExecuteScalar() != DBNull.Value) && (cmd.ExecuteScalar() != null))
                    {
                        dNQty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                    }

                    if (argType == "A")
                    {
                        sSql = "Select Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)* (Case When D.CancelWO=0 then C.Qtty else C.WOBilledQty end) Else 0 End)) as Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                               "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + " " +
                               "Inner Join WOTrans C on A.ProjIOWId=C.IOW_ID " +
                               "Inner Join WORegister D on C.WORegisterId=D.WORegisterId Where D.LiveWO=0 and A.Resource_ID = " + argID + " And D.CostCentreId = " + argCCId + " and D.Approve='Y' and D.ContractorID = " + argContractId;
                        if (argWoRegId != 0) { sSql = sSql + " and D.WORegisterId = " + argWoRegId; }
                    }

                    else
                    {

                        sSql = "Select Sum(Qty) Qty from  (Select (Case When C.CancelWO=0 then A.Qtty else A.WOBilledQty end)*B.Qty Qty from Wotrans A " +
                               "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A  " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                               "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') B on A.Comp_Id=B.MResource_Id " +
                               "Inner Join WORegister C on A.WORegisterId=C.WORegisterId " +
                               "Where C.CostCentreId=" + argCCId + " and A.WOType='A' and C.Approve='Y' and C.LiveWO=0 and C.ContractorId = " + argContractId;
                        if (argWoRegId != 0) { sSql = sSql + " and C.WORegisterId = " + argWoRegId; }
                        sSql = sSql + " A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='M' and Rev_Id=" + m_lRevId + ") " +
                               "Union All " +
                               "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*(Case When D.CancelWO=0 then C.Qtty else C.WOBilledQty end) Else 0 End as Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                               "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + " " +
                               "Inner Join WOTrans C on A.ProjIOWId=C.IOW_ID " +
                               "Inner Join WORegister D on C.WORegisterId=D.WORegisterId " +
                               "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.Analysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                               "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='M') E on E.MResource_Id=A.Resource_Id " +
                               "Where D.LiveWO=0 and D.Approve='Y' and A.Resource_ID in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='M' and Rev_Id=" + m_lRevId + ") And D.CostCentreId = " + argCCId + "  and D.ContractorId = " + argContractId;
                        if (argWoRegId != 0) { sSql = sSql + " and C.WORegisterId = " + argWoRegId; }
                        sSql = sSql + " Union All " +
                                "Select (Case When C.CancelWO=0 then A.Qtty else A.WOBilledQty end)*B.Qty Qty from Wotrans A " +
                                "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                                "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                                "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') B on A.Comp_Id=B.MResource_Id " +
                                "Inner Join WORegister C on A.WORegisterId=C.WORegisterId " +
                                "Where C.CostCentreId=" + argCCId + " and C.Approve='Y' and A.WOType='A' and C.LiveWO=0  and " +
                                "A.Comp_Id in(Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='A' and Rev_Id=" + m_lRevId + ") and C.ContractorId = " + argContractId;
                        if (argWoRegId != 0) { sSql = sSql + " and C.WORegisterId = " + argWoRegId; }
                        sSql = sSql + " Union All " +
                               "Select Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*E.Qty*(Case When D.CancelWO=0 then C.Qtty else C.WOBilledQty end) Else 0 End as Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                               "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWId And B.Revision_ID=" + m_lRevId + " " +
                               "Inner Join WOTrans C on A.ProjIOWId=C.IOW_ID " +
                               "Inner Join WORegister D on C.WORegisterId=D.WORegisterId " +
                               "Inner Join (Select A.MResource_Id,Case When B.Analysis_Qty<>0 then A.Qty/B.AAnalysis_Qty else 0 End Qty from [" + argDBName + "].dbo.Activity_Analysis A " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.MResource_Id=B.Resource_Id " +
                               "Where A.Resource_ID=" + argID + " and A.Rev_Id=" + m_lRevId + " and A.Analysis_Type='A') E on E.MResource_Id=A.Resource_Id " +
                               "Where D.LiveWO=0 and D.Approve='Y' and A.Resource_ID in (Select MResource_Id from [" + argDBName + "].dbo.Activity_Analysis Where Resource_Id=" + argID + " and Analysis_Type='A' and Rev_Id=" + m_lRevId + ")  And D.CostCentreId = " + argCCId + " and D.contractorId = " + argContractId;
                        if (argWoRegId != 0) { sSql = sSql + " and D.WORegisterId = " + argWoRegId; }
                        sSql = sSql + " ) G";
                    }


                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                       // dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();                   
                    drw["WorkOrderQty"] = dNQty;
                    dNQty = 0;

                    #endregion

                    //WorkOrderQty
                    //sSql = "Select Sum(isnull(A.Qtty,0)) as Qty,sum(isnull(A.Amount,0)) as Amount from WOTrans A " +
                    //"Inner Join WORegister B on A.WORegisterId=B.WORegisterId " +
                    //"Where B.LiveWO=0 and B.CancelWO=0 and B.Approve='Y' and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContractId + " " +
                    //"and Comp_ID = " + argID + "";

                    //if (argWoRegId != 0)
                    //    sSql = sSql + "and  B.WORegisterId=" + argWoRegId + " ";

                    //cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    //dr = cmd.ExecuteReader();
                    //while (dr.Read())
                    //{                     
                    //    dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                    //    dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amount"].ToString(), CommFun.datatypes.vartypenumeric));
                    //}
                    //dr.Close();

                    ////
                    //sSql = "Select Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qtty Else 0 End)) as Qty, " +
                    //   "Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qtty*C.Rate Else 0 End)) as Amt " +
                    //   "from [" + argDBName + "].dbo.Project_Details A " +
                    //   "Inner Join [" + argDBName + "].dbo.IOW B on A.IOW_Trans_ID=B.IOW_Trans_ID  and  B.Revision_ID=" + m_lRevId + " " +
                    //   "Inner Join WOTrans C on B.ProjIOWID=C.IOW_ID " +
                    //   "Inner Join WORegister D on C.WORegisterId=D.WORegisterId " +
                    //   "Where D.LiveWO=0 and D.CancelWO=0  and D.Approve='Y' and A.Resource_ID = " + argID + " And D.CostCentreId = " + argCCId + " and D.ContractorId = " + argContractId + "";

                    //if (argWoRegId != 0)
                    //    sSql = sSql + "and  C.WORegisterId=" + argWoRegId + " ";
                    
                    //cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    //dr = cmd.ExecuteReader();
                    //while (dr.Read())
                    //{                       
                    //    dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                    //    dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    //} dr.Close();

                    ////If Select Work Order

                    //if (argWoRegId != 0)
                    //{
                    //    sSql = "Select isnull(A.Qtty,0) as CurWOQty from WOTrans A " +
                    //        "Inner Join WORegister B on A.WORegisterId=B.WORegisterId " +
                    //        "Where B.LiveWO=0 and B.CancelWO=0 and B.Approve='Y' and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContractId + " " +
                    //        "and Comp_ID = " + argID + " and  B.WORegisterId=" + argWoRegId ;   
                    //    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    //    dr = cmd.ExecuteReader();
                    //    while (dr.Read())
                    //    {
                    //        dWOCurrQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["CurWOQty"].ToString(), CommFun.datatypes.vartypenumeric));
                    //    }
                    //    dr.Close();

                    //    sSql = "Select isnull(C.Qtty,0) as CurWOQty " +                           
                    //       "from [" + argDBName + "].dbo.Project_Details A " +
                    //       "Inner Join [" + argDBName + "].dbo.IOW B on A.IOW_Trans_ID=B.IOW_Trans_ID  and  B.Revision_ID=" + m_lRevId + " " +
                    //       "Inner Join WOTrans C on B.ProjIOWID=C.IOW_ID " +
                    //       "Inner Join WORegister D on C.WORegisterId=D.WORegisterId " +
                    //       "Where D.LiveWO=0 and D.CancelWO=0  and D.Approve='Y' and A.Resource_ID = " + argID + " " +
                    //       "And D.CostCentreId = " + argCCId + " and D.ContractorId = " + argContractId + " and  C.WORegisterId=" + argWoRegId ;

                    //    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    //    dr = cmd.ExecuteReader();
                    //    while (dr.Read())
                    //    {
                    //        dWOCurrQty = dWOCurrQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["CurWOQty"].ToString(), CommFun.datatypes.vartypenumeric));
                    //    }
                    //    dr.Close();


                    //    //Privous Bill WOQty
                        
                    //    decimal dBWOQty = 0;

                    //    sSql = "Select Sum(A.Qty) Qty From BillTrans A " +
                    //        "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                    //        "Where B.ContractorId = " + argContractId + " and " +
                    //        "B.CostCentreId = " + argCCId + " and A.Comp_ID = " + argID + " and A.BillType='" + argType + "' ";                        
                        
                    //    if (argWoRegId != 0)
                    //        sSql = sSql + " and A.WORegisterId=" + argWoRegId + " ";

                    //    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    //    if (cmd.ExecuteScalar() == null || cmd.ExecuteScalar() == DBNull.Value) { }
                    //    else
                    //    {
                    //        dBWOQty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                    //    }
                    //    if (argMode == "A")
                    //    {
                    //        dWOCurrQty = dWOCurrQty - dBWOQty;
                    //    }
                    //    else 
                    //    {
                    //        dWOCurrQty = dBWOQty;
                    //    }
                    //}
                    //dr.Close();

                    //Get Amendment WorkOrder BilledQty Modified 09/04/2013
                    //if (argWOAmdment == true)
                    //{
                    //    sSql = "Select Sum(A.BilledQty) BilledQty from WOTrans A  " +
                    //        "Left Join WORegister B on A.WORegisterId=B.WORegisterId " +
                    //        "Where A.WORegisterId In ("+sWORegId.TrimEnd(',')+") " +
                    //        "and B.CostCentreId=" + argCCId + " and B.ContractorId=" + argContractId + " and A.Comp_Id =" + argID + " ";

                    //    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    //    dr = cmd.ExecuteReader();
                    //    while (dr.Read())
                    //    {
                    //        if (dr["BilledQty"].ToString() != "")
                    //            dWOAmdBilledQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["BilledQty"].ToString(), CommFun.datatypes.vartypenumeric));
                    //        else
                    //            dWOAmdBilledQty = 0;
                    //    }
                    //    dr.Close();
                    //}


                    //if (dNQty != 0)
                    //{
                    //    drw["WorkOrderQty"] = Convert.ToDecimal(CommFun.IsNullCheck((dNQty ), CommFun.datatypes.vartypenumeric));
                    //    drw["WorkOrderRate"] = Convert.ToDecimal(CommFun.IsNullCheck((dNAmt / dNQty), CommFun.datatypes.vartypenumeric));
                    //}
                    //else
                    //    drw["WorkOrderRate"] = "0";
                    ////if (dWOCurrQty != 0)
                    ////    drw["WorkOrderCurQty"] = (dWOCurrQty).ToString();

                    //drw["WorkOrderAmount"] = (Convert.ToDecimal(CommFun.IsNullCheck(drw["WorkOrderQty"], CommFun.datatypes.vartypenumeric)) * Convert.ToDecimal(CommFun.IsNullCheck(drw["WorkOrderRate"], CommFun.datatypes.vartypenumeric))); //dNAmt;
                    
                 
                    dNQty = 0;
                    dWOAmdBilledQty = 0;
                    dWOCurrQty = 0;
                    dNAmt = 0;

                    #region Contractor Billed Qty

                    #endregion

                    // Contractor Billed Qty
                    sSql = "Select Sum(isnull(A.Qty,0)) as Qtty,sum(isnull(A.Amount,0)) as Amount from BillTrans A " +
                       "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                       "Where A.PartRate=0 and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContractId + " " +
                       "and A.Comp_ID = " + argID + " ";

                    if (argWoRegId != 0)
                        sSql = sSql + " and B.WORegisterId=" + argWoRegId + " ";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {                        
                        dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amount"].ToString(), CommFun.datatypes.vartypenumeric));
                    }
                    dr.Close();
                    //

                    sSql = "Select Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty Else 0 End)) as Qty, " +
                       "Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty*C.Rate Else 0 End)) as Amt " +
                       "from [" + argDBName + "].dbo.Project_Details A " +
                       "Inner Join [" + argDBName + "].dbo.IOW B on A.IOW_Trans_ID=B.IOW_Trans_ID and  B.Revision_ID=" + m_lRevId + " " +
                       "Inner Join BillTrans C on B.ProjIOWID=C.IOW_ID " +
                       "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId " +
                       "Where C.PartRate=0 and  A.Resource_ID = " + argID + " And D.CostCentreId = " + argCCId + " and D.ContractorId = " + argContractId + " ";

                    if (argWoRegId != 0)
                        sSql = sSql + " and D.WORegisterId=" + argWoRegId + " ";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {                        
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();

                    //If Select Work Order
                    if (argWoRegId != 0)
                    {
                        sSql = "Select isnull(A.Qty,0) as CurCBQty from BillTrans A " +
                       "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                       "Where A.PartRate=0 and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContractId + " " +
                       "and A.Comp_ID = " + argID + " and B.WORegisterId = " + argWoRegId ;

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            dCBCurrQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["CurCBQty"].ToString(), CommFun.datatypes.vartypenumeric));
                        }
                        dr.Close();


                        sSql = "Select isnull(C.Qty,0) as CurCBQty " +
                       "from [" + argDBName + "].dbo.Project_Details A " +
                       "Inner Join [" + argDBName + "].dbo.IOW B on A.IOW_Trans_ID=B.IOW_Trans_ID and  B.Revision_ID=" + m_lRevId + " " +
                       "Inner Join BillTrans C on B.ProjIOWID=C.IOW_ID " +
                       "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId " +
                       "Where C.PartRate=0 and  A.Resource_ID = " + argID + " And D.CostCentreId = " + argCCId + " and D.ContractorId = " + argContractId + " ";

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            dCBCurrQty = dCBCurrQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["CurCBQty"].ToString(), CommFun.datatypes.vartypenumeric));
                        }
                        dr.Close();
                    } 

                    drw["Contractor BilledQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dNQty, CommFun.datatypes.vartypenumeric)).ToString();
                    if (dNQty != 0)
                        drw["Contractor BilledRate"] = Convert.ToDecimal(CommFun.IsNullCheck((dNAmt / dNQty), CommFun.datatypes.vartypenumeric)).ToString();
                    else
                        drw["Contractor BilledRate"] = "0";

                    //drw["Contractor BilledCurQty"] = Convert.ToDecimal(dCBCurrQty).ToString();

                    drw["Contractor BilledAmount"] = Convert.ToDecimal(CommFun.IsNullCheck(dNAmt, CommFun.datatypes.vartypenumeric)).ToString();
                    dr.Close();
                    dNQty = 0;
                    dNAmt = 0;
                    
                    //Need to add Client BilledQty Details                   

                    drw["Client BilledQty"] = 0;
                    drw["Client BilledRate"] = 0;
                    drw["Client BilledAmount"] = 0;
                    drw["Client BilledPRate"] = 0;
                    //drw["Client BilledCurQty"] = 0;
                    drw["Client BilledPRQty"] = 0;                   

                    //Total Billed Qty
                    sSql = "Select Sum(isnull(A.Qty,0)) as Qtty,sum(isnull(A.Amount,0)) as Amount from BillTrans A " +
                       "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                       "Where A.PartRate=0 and B.CostCentreId = " + argCCId + " " +
                       "and Comp_ID = " + argID + "";
                    if (argWoRegId != 0)
                        sSql = sSql + " and B.WORegisterId=" + argWoRegId + " ";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amount"].ToString(), CommFun.datatypes.vartypenumeric));
                    }
                    dr.Close();

                    sSql = "Select Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty Else 0 End)) as Qty, " +
                        "Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty*C.Rate Else 0 End)) as Amt " +
                        "from [" + argDBName + "].dbo.Project_Details A " +
                        "Inner Join [" + argDBName + "].dbo.IOW B on A.IOW_Trans_ID=B.IOW_Trans_ID and  B.Revision_ID=" + m_lRevId + " " +
                        "Inner Join BillTrans C on B.ProjIOWID=C.IOW_ID " +
                        "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId " +
                        "Where C.PartRate=0 and A.Resource_ID = " + argID + " And D.CostCentreId = " + argCCId + "";

                    if (argWoRegId != 0)
                        sSql = sSql + " and D.WORegisterId=" + argWoRegId + " ";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    }

                    drw["Total BilledQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dNQty, CommFun.datatypes.vartypenumeric)).ToString();
                    if (dNQty != 0)
                        drw["Total BilledRate"] = Convert.ToDecimal(CommFun.IsNullCheck((dNAmt / dNQty), CommFun.datatypes.vartypenumeric)).ToString();
                    else
                        drw["Total BilledRate"] = "0";

                    drw["Total BilledAmount"] = Convert.ToDecimal(CommFun.IsNullCheck(dNAmt, CommFun.datatypes.vartypenumeric)).ToString();
                    dr.Close();

                    sSql = "Select A.QRate from [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorQuotationTrans A " +
                        "Inner Join [" + BsfGlobal.g_sVendorDBName + "].dbo.QuotationRegister B on A.QuotationId=B.QuotationId Where B.CostCentreId = " + argCCId + " and A.VendorId =  " + argContractId + " and A.ResourceId = " + argID;
                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        if (Convert.ToDecimal(CommFun.IsNullCheck(dr["QRate"].ToString(), CommFun.datatypes.vartypenumeric)) != 0)
                        {
                            drw["EstimatedPRate"] = Convert.ToDecimal(CommFun.IsNullCheck(dr["QRate"].ToString(), CommFun.datatypes.vartypenumeric));
                            drw["WorkOrderPRate"] = Convert.ToDecimal(CommFun.IsNullCheck(dr["QRate"].ToString(), CommFun.datatypes.vartypenumeric));
                            drw["Contractor BilledPRate"] = Convert.ToDecimal(CommFun.IsNullCheck(dr["QRate"].ToString(), CommFun.datatypes.vartypenumeric));
                            drw["Total BilledPRate"] = Convert.ToDecimal(CommFun.IsNullCheck(dr["QRate"].ToString(), CommFun.datatypes.vartypenumeric));
                        }
                        else
                        {
                            drw["EstimatedPRate"] = 0;
                            drw["WorkOrderPRate"] = 0;
                            drw["Contractor BilledPRate"] = 0;
                            drw["Total BilledPRate"] = 0;
                        }
                    }
                    dr.Close();

                    if (argPartRate == 1)
                    {
                        sSql = "Select Sum(A.Qty) as Qty from BillTrans A " +
                           "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                           "Where A.PartRate=1 and A.BillType='" + argType + "' and A.Comp_ID = " + argID + " and " +
                           "B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContractId + " and " +
                           "A.Rate = " + argRate;
                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            //get PartRateQty = To get PartRate Qty

                            drw["EstimatedPRQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                            drw["WorkOrderPRQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                            drw["Contractor BilledPRQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                            drw["Total BilledPRQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));


                            drw["EstimatedCurQty"] = 0;
                            //drw["WorkOrderCurQty"] = 0;
                            //drw["Contractor BilledCurQty"] = 0;
                            drw["Total BilledCurQty"] = 0;
                        }
                        dr.Close();
                    }
                    else
                    {
                        //get PartRateQty = 0
                        drw["EstimatedPRQty"] = 0;
                        drw["WorkOrderPRQty"] = 0;
                        drw["Contractor BilledPRQty"] = 0;
                        drw["Total BilledPRQty"] = 0;
                    }

                    dtFinal.Rows.Add(drw);

                }

                #endregion

                #region WOType S

                if (argType == "S")
                {
                    drw = dtFinal.NewRow();      

                    //New Query Changed  C--01/12/2012
                    if (argSplit != "Y")
                    {                        
                        //New Query Changed  C--01/12/2012

                        sSql = "Select Sum(A.Qtty*I.Qty) Qtty from [" + argDBName + "].dbo.IOWC A  " +
                            "Join  " +
                            "(Select C1.ProjIOWId,A1.Qtty/C1.RateAnalQty Qty from [" + argDBName + "].dbo.Rate_Analysis A1   " +
                            "Inner Join [" + argDBName + "].dbo.IOW B1 on A1.IOW_In_IOW_Id=B1.IOW_Trans_ID   " +
                            "Inner Join [" + argDBName + "].dbo.IOW C1 on A1.IOW_Trans_ID=C1.IOW_Trans_ID    " +
                            "Where B1.Revision_ID=" + m_lRevId + " and B1.ProjIOWID=" + argID + " and IOW_In_IOW_Id<>0) I on A.ProjIOWId = I.ProjIOWId and A.Revision_Id=" + m_lRevId + " " +
                            "Where A.Revision_Id=" + m_lRevId;
                    }
                    else
                    {         

                        //New Query Changed  C--01/12/2012

                        sSql = "Select Sum(A.Qty*I.Qty) Qtty from [" + argDBName + "].dbo.AnalysisIOWC A  " +
                              "Join  " +
                              "(Select C1.ProjIOWId,A1.Qtty/C1.RateAnalQty Qty from [" + argDBName + "].dbo.Rate_Analysis A1   " +
                              "Inner Join [" + argDBName + "].dbo.IOW B1 on A1.IOW_In_IOW_Id=B1.IOW_Trans_ID    " +
                              "Inner Join [" + argDBName + "].dbo.IOW C1 on A1.IOW_Trans_ID=C1.IOW_Trans_ID    " +
                              "Where B1.Revision_ID=" + m_lRevId + " and B1.ProjIOWID=" + argID + " and IOW_In_IOW_Id<>0) I on A.ProjIOWId = I.ProjIOWId and A.Revision_Id=" + m_lRevId + " " +
                              "Where A.Revision_Id=" + m_lRevId;

                        if (argAHeadId != 0)
                        {
                            sSql = sSql + " and A.Analysis_Id=" + argAHeadId;
                        }
                    } 

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    decimal EQty = 0;
                    while (dr.Read())
                    {
                        drw["EstimatedQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"].ToString(), CommFun.datatypes.vartypenumeric)).ToString();
                        EQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"].ToString(), CommFun.datatypes.vartypenumeric));
                    }
                    dr.Close();


                    sSql = "Select  isnull(Qualified_Rate,0) Unit_Rate from [" + argDBName + "].dbo.IOW where ProjIOWID = " + argID + " and  Revision_ID=" + m_lRevId;
                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    decimal ERate = 0;
                    while (dr.Read())
                    {
                        drw["EstimatedRate"] = Convert.ToDecimal(CommFun.IsNullCheck(dr["Unit_Rate"].ToString(), CommFun.datatypes.vartypenumeric)).ToString();
                        ERate = Convert.ToDecimal(CommFun.IsNullCheck(dr["Unit_Rate"].ToString(), CommFun.datatypes.vartypenumeric));
                    }
                    drw["EstimatedAmount"] = (EQty * ERate);
                    dr.Close();
                    dNQty = 0;
                    dNAmt = 0;

                    sSql = "Select Sum(isnull(A.Qtty,0)) as Qty,sum(isnull(A.Amount,0)) as Amount from WOTrans A " +
                       "Inner Join WORegister B on A.WORegisterId=B.WORegisterId " +
                       "Where B.LiveWO=0 and B.CancelWO=0  and B.Approve='Y' and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContractId + " " +
                       "and IOW_ID = " + argID + "";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amount"].ToString(), CommFun.datatypes.vartypenumeric));
                    }
                    dr.Close();

                    sSql = "Select Sum(Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qtty Else 0 End) as Qty, " +
                       "Sum(Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qtty*C.Rate Else 0 End) as Amt " +
                       "from [" + argDBName + "].dbo.Rate_Analysis A " +
                       "Inner Join [" + argDBName + "].dbo.IOW B on A.IOW_Trans_ID=B.IOW_Trans_ID  and  B.Revision_ID=" + m_lRevId + "" +
                       "Inner Join WOTrans C on B.ProjIOWID=C.IOW_ID " +
                       "Inner Join WORegister D on C.WORegisterId=D.WORegisterId " +
                       "Where D.LiveWO=0 and D.CancelWO=0  and D.CancelWO=0 and D.Approve='Y' and A.IOW_In_IOW_ID = " + argID + " And D.CostCentreId = " + argCCId + " and D.ContractorId = " + argContractId + "";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"], CommFun.datatypes.vartypenumeric));
                        dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"], CommFun.datatypes.vartypenumeric));
                    }

                    //If Select Work Order

                    if (argWoRegId != 0)
                    {
                        sSql = "Select Sum(isnull(A.Qtty,0)) as Qty,sum(isnull(A.Amount,0)) as Amount from WOTrans A " +
                           "Inner Join WORegister B on A.WORegisterId=B.WORegisterId " +
                           "Where B.LiveWO=0 and B.CancelWO=0  and B.Approve='Y' and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContractId + " " +
                           "and IOW_ID = " + argID + "";

                        if (argWoRegId != 0)
                            sSql = sSql + " and B.WORegisterId=" + argWoRegId + " ";


                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            dWOCurrQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["CurWOQty"].ToString(), CommFun.datatypes.vartypenumeric));
                        }
                        dr.Close();

                        sSql = "Select Sum(Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qtty Else 0 End) as Qty, " +
                       "Sum(Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qtty*C.Rate Else 0 End) as Amt " +
                       "from [" + argDBName + "].dbo.Rate_Analysis A " +
                       "Inner Join [" + argDBName + "].dbo.IOW B on A.IOW_Trans_ID=B.IOW_Trans_ID  and  B.Revision_ID=" + m_lRevId + "" +
                       "Inner Join WOTrans C on B.ProjIOWID=C.IOW_ID " +
                       "Inner Join WORegister D on C.WORegisterId=D.WORegisterId " +
                       "Where D.LiveWO=0 and D.CancelWO=0  and D.CancelWO=0 and D.Approve='Y' and A.IOW_In_IOW_ID = " + argID + " And D.CostCentreId = " + argCCId + " and D.ContractorId = " + argContractId + "  ";

                        if (argWoRegId != 0)
                            sSql = sSql + " and D.WORegisterId=" + argWoRegId + " ";
                       

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            dWOCurrQty = dWOCurrQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["CurWOQty"].ToString(), CommFun.datatypes.vartypenumeric));
                        }
                        dr.Close();


                        //Privous Bill WOQty
                        decimal dBWOQty = 0;

                        sSql = "Select Sum(A.Qty) Qty From BillTrans A " +
                            "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                            "Where B.ContractorId = " + argContractId + " and " +
                            "B.CostCentreId = " + argCCId + " and A.Comp_ID = " + argID + " and A.BillType='" + argType + "' ";

                        if (argWoRegId != 0)
                            sSql = sSql + " and A.WORegisterId=" + argWoRegId + " ";

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        if (cmd.ExecuteScalar() == null || cmd.ExecuteScalar() == DBNull.Value) { }
                        else
                        {
                            dBWOQty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                        }
                        if (argMode == "A")
                        {
                            dWOCurrQty = dWOCurrQty - dBWOQty;
                        }
                        else
                        {
                            dWOCurrQty = dBWOQty;
                        }
                    }
                    dr.Close();


                    //Get Amendment WorkOrder BilledQty Modified 09/04/2013
                    //if (argWOAmdment == true)
                    //{
                       
                    //    sSql = "Select Sum(A.BilledQty) BilledQty from WOTrans A  " +
                    //        "Left Join WORegister B on A.WORegisterId=B.WORegisterId " +
                    //        "Where A.WORegisterId In (" + sWORegId.TrimEnd(',') + ") " +
                    //        "and B.CostCentreId=" + argCCId + " and B.ContractorId=" + argContractId + " and A.IOW_ID =" + argID + " ";

                    //    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    //    dr = cmd.ExecuteReader();
                    //    while (dr.Read())
                    //    {
                    //        if (dr["BilledQty"].ToString() != "")
                    //            dWOAmdBilledQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["BilledQty"].ToString(), CommFun.datatypes.vartypenumeric));
                    //        else
                    //            dWOAmdBilledQty = 0;
                    //    }
                    //    dr.Close();
                    //}

                    if (dNQty != 0)// - Convert.ToDecimal(dWOAmdBilledQty)
                    {
                        drw["WorkOrderQty"] = (dNQty);
                        drw["WorkOrderRate"] = (Convert.ToDecimal(dNAmt / (dNQty - Convert.ToDecimal(dWOAmdBilledQty))));
                    }
                    else
                        drw["WorkOrderRate"] = "0";
                    //if (dWOCurrQty != 0)
                    //    drw["WorkOrderCurQty"] = (dWOCurrQty).ToString();

                    drw["WorkOrderAmount"] = (Convert.ToDecimal(CommFun.IsNullCheck(drw["WorkOrderQty"], CommFun.datatypes.vartypenumeric)) * Convert.ToDecimal(CommFun.IsNullCheck(drw["WorkOrderRate"], CommFun.datatypes.vartypenumeric))); //dNAmt;
                   
                    dNQty = 0;
                    dWOCurrQty = 0;
                    dWOAmdBilledQty = 0;
                    dNAmt = 0;

                    sSql = "Select Sum(isnull(A.Qty,0)) as Qtty,sum(isnull(A.Amount,0)) as Amount from BillTrans A " +
                       "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                       "Where A.PartRate=0 and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContractId + " " +
                       "and IOW_ID = " + argID + "";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amount"].ToString(), CommFun.datatypes.vartypenumeric));
                    }
                    dr.Close();

                    sSql = "Select Sum(Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty Else 0 End) as Qty, " +
                            "Sum(Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty*C.Rate Else 0 End) as Amt " +
                            "from [" + argDBName + "].dbo.Rate_Analysis A " +
                            "Inner Join [" + argDBName + "].dbo.IOW B on A.IOW_Trans_ID=B.IOW_Trans_ID and  B.Revision_ID=" + m_lRevId + " " +
                            "Inner Join BillTrans C on B.ProjIOWID=C.IOW_ID " +
                            "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId " +
                            "Where C.PartRate=0 and A.IOW_In_IOW_ID = " + argID + " And D.CostCentreId = " + argCCId + " and D.ContractorId = " + argContractId + "";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    }
                    drw["Contractor BilledQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dNQty, CommFun.datatypes.vartypenumeric)).ToString();
                    if (dNQty != 0)
                        drw["Contractor BilledRate"] = Convert.ToDecimal(CommFun.IsNullCheck((dNAmt / dNQty), CommFun.datatypes.vartypenumeric)).ToString();
                    else
                        drw["Contractor BilledRate"] = "0";

                    drw["Contractor BilledAmount"] = Convert.ToDecimal(CommFun.IsNullCheck(dNAmt, CommFun.datatypes.vartypenumeric)).ToString();
                    dr.Close();
                    dNQty = 0;
                    dNAmt = 0;


                    //Need to add Client BilledQty Details

                    drw["Client BilledQty"] = 0;
                    drw["Client BilledRate"] = 0;
                    drw["Client BilledAmount"] = 0;
                    drw["Client BilledPRate"] = 0;
                    //drw["Client BilledCurQty"] = 0;
                    drw["Client BilledPRQty"] = 0;

                    sSql = "Select Sum(isnull(A.Qty,0)) as Qtty,sum(isnull(A.Amount,0)) as Amount from BillTrans A " +
                        "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                        "Where A.PartRate=0 and B.CostCentreId = " + argCCId + " " +
                        "and IOW_ID = " + argID + "";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amount"].ToString(), CommFun.datatypes.vartypenumeric));
                    } dr.Close();

                    sSql = "Select Sum(Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty Else 0 End) as Qty, " +
                       "Sum(Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qty*C.Rate Else 0 End) as Amt " +
                       "from [" + argDBName + "].dbo.Rate_Analysis A " +
                       "Inner Join [" + argDBName + "].dbo.IOW B on A.IOW_Trans_ID=B.IOW_Trans_ID  and  B.Revision_ID=" + m_lRevId + "" +
                       "Inner Join BillTrans C on B.ProjIOWID=C.IOW_ID " +
                       "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId " +
                       "Where C.PartRate=0 and A.IOW_In_IOW_ID = " + argID + " And D.CostCentreId = " + argCCId + "";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                    }
                    drw["Total BilledQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dNQty, CommFun.datatypes.vartypenumeric)).ToString();
                    if (dNQty != 0)
                        drw["Total BilledRate"] = Convert.ToDecimal(CommFun.IsNullCheck((dNAmt / dNQty), CommFun.datatypes.vartypenumeric)).ToString();
                    else
                        drw["Total BilledRate"] = "0";

                    drw["Total BilledAmount"] = Convert.ToDecimal(CommFun.IsNullCheck(dNAmt, CommFun.datatypes.vartypenumeric)).ToString();
                    dr.Close();

                    sSql = "Select A.QRate from [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorQuotationTrans A " +
                        "Inner Join [" + BsfGlobal.g_sVendorDBName + "].dbo.QuotationRegister B on A.QuotationId=B.QuotationId Where B.CostCentreId = " + argCCId + " and A.VendorId =  " + argContractId + " and A.ResourceId = " + argID;
                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        //get PartRate=To get Quotation Qual Rate

                        if (Convert.ToDecimal(CommFun.IsNullCheck("QRate", CommFun.datatypes.vartypenumeric)) != 0)
                        {
                            drw["EstimatedPRate"] = Convert.ToDecimal(CommFun.IsNullCheck("QRate", CommFun.datatypes.vartypenumeric)).ToString();
                            drw["WorkOrderPRate"] = Convert.ToDecimal(CommFun.IsNullCheck("QRate", CommFun.datatypes.vartypenumeric)).ToString();
                            drw["Contractor BilledPRate"] = Convert.ToDecimal(CommFun.IsNullCheck("QRate", CommFun.datatypes.vartypenumeric)).ToString();
                            drw["Total BilledPRate"] = Convert.ToDecimal(CommFun.IsNullCheck("QRate", CommFun.datatypes.vartypenumeric)).ToString();
                        }
                        else
                        {
                            drw["EstimatedPRate"] = 0;
                            drw["WorkOrderPRate"] = 0;
                            drw["Contractor BilledPRate"] = 0;
                            drw["Total BilledPRate"] = 0;
                        }
                    }
                    dr.Close();

                    if (argPartRate == 1)
                    {
                        sSql = "Select Sum(A.Qty) as Qty from BillTrans A " +
                           "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                           "Where A.PartRate=1 and A.BillType='" + argType + "' and A.Comp_ID = " + argID + " and " +
                           "B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContractId + " and " +
                           "A.Rate = " + argRate;
                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            //get PartRateQty = To get PartRate Qty


                            drw["EstimatedPRQty"] = Convert.ToDecimal(CommFun.IsNullCheck("Qty", CommFun.datatypes.vartypenumeric)).ToString();
                            drw["WorkOrderPRQty"] = Convert.ToDecimal(CommFun.IsNullCheck("Qty", CommFun.datatypes.vartypenumeric)).ToString();
                            drw["Contractor BilledPRQty"] = Convert.ToDecimal(CommFun.IsNullCheck("Qty", CommFun.datatypes.vartypenumeric)).ToString();
                            drw["Total BilledPRQty"] = Convert.ToDecimal(CommFun.IsNullCheck("Qty", CommFun.datatypes.vartypenumeric)).ToString();


                            //drw["EstimatedCurQty"] = 0;
                            //drw["WorkOrderCurQty"] = 0;
                            //drw["Contractor BilledCurQty"] = 0;
                            drw["Total BilledCurQty"] = 0;
                        }
                        dr.Close();
                    }
                    else
                    {
                        //get PartRateQty = 0

                        drw["EstimatedPRQty"] = 0;
                        drw["WorkOrderPRQty"] = 0;
                        drw["Contractor BilledPRQty"] = 0;
                        drw["Total BilledPRQty"] = 0;
                    }

                    dtFinal.Rows.Add(drw);
                }

                #endregion
                
                #region WoType I

                if (argType == "I")
                {

                    drw = dtFinal.NewRow();

                    if (argSplit != "Y")
                    {
                        sSql = "Select Qtty,Qualified_Rate from [" + argDBName + "].dbo.IOWC  " +
                            "where ProjIOWID = " + argID + "  And Revision_ID=" + m_lRevId;
                    }
                    else
                    {

                        if (argAHeadId != 0)
                        {            
                            sSql = "Select B.Qtty,B.Qualified_Rate from [" + argDBName + "].dbo.AnalysisIOWC A  " +
                              "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWID=B.ProjIOWId " +
                              "Where B.ProjIOWID = " + argID + "  And B.Revision_ID=" + m_lRevId + " And A.Analysis_ID =" + argAHeadId;
                        }
                        else
                        {
                            sSql = "Select B.Qtty,B.Qualified_Rate from [" + argDBName + "].dbo.AnalysisIOWC A  " +
                                "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWID=B.ProjIOWId " +
                                "Where B.ProjIOWID = " + argID + " And B.Revision_ID=" + m_lRevId;                            
                        }                      
                    }
                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        drw["EstimatedQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"].ToString(), CommFun.datatypes.vartypenumeric)).ToString();
                        drw["EstimatedRate"] = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qualified_Rate"].ToString(), CommFun.datatypes.vartypenumeric)).ToString();
                        drw["EstimatedAmount"] = (Convert.ToDecimal(CommFun.IsNullCheck(dr["Qtty"].ToString(), CommFun.datatypes.vartypenumeric)) * Convert.ToDecimal(CommFun.IsNullCheck(dr["Qualified_Rate"].ToString(), CommFun.datatypes.vartypenumeric))).ToString();
                    }
                    dr.Close();

                    dNQty = 0;
                    dNAmt = 0;

                    //Item Work 
                    string s1 = "";
                    string s2 = "";

                    if (argSplit == "N")
                    {
                        if (argWoRegId != 0)
                        {
                            s1 = " and B.WORegisterId=" + argWoRegId + " ";
                            s2 = " and F.WORegisterId=" + argWoRegId + " ";
                        }
                        else
                        {
                            s1 = "";
                            s2 = "";
                        }
                    }

                    sSql = "Select Sum(isnull(G.Qtty,0)) as Qty,Sum(isnull(G.Amt,0)) as Amt from " +
                       "(Select Sum(A.Qtty) as Qtty,Sum(A.Amount) as Amt from WOTrans A " +
                       "Inner Join WORegister B on A.WOREgisterId=B.WORegisterId " +
                       "Where B.LiveWO=0 and B.CancelWO=0 and B.Approve='Y' and A.IOW_ID=  " + argID + " and A.AnalysisHeadId = " + argAHeadId + "  " +
                       "and B.CostCentreId=" + argCCId + " and A.WOType='I' and B.ContractorId = " + argContractId + " " + s1 + " " +
                       "Union All " +
                       "Select Sum((E.RateAnalQty/D.Qtty)*A.Qty*(C.Percentage/100)) As Qtty, " +
                       "Sum((E.RateAnalQty/D.Qtty)*A.Qty*(C.Percentage/100)*B.Rate) As Amt " +
                       "from WOWBSTrans A " +
                       "Inner Join WOTrans B on A.WOTransId=B.WOTransId " +
                       "Inner Join [" + argDBName + "].dbo.ClaimItem C on B.Comp_ID = C.Comp_Id " +
                       "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on  B.Comp_ID = D.Resource_Id " +
                       "Inner Join [" + argDBName + "].dbo.IOW E on E.ProjIOWID=" + argID + " and E.Revision_ID=" + m_lRevId + " " +
                       "Inner Join WORegister F on B.WOREgisterId=F.WORegisterId " +
                       "Where F.LiveWO=0 and F.CancelWO=0 and F.Approve='Y' and  A.AnalysisId = " + argAHeadId + " and F.CostCentreId= " + argCCId + " and " +
                       "C.Comp_ID<>0 and (B.WOType='I') and F.ContractorId = " + argContractId + " " + s2 + " and D.Qtty<>0 " +
                       "Union All " +
                       "Select Sum((E.RateAnalQty/D.Qtty)*A.Qty*(C.Percentage/100)) As Qtty, " +
                       "Sum((E.RateAnalQty/D.Qtty)*A.Qty*(C.Percentage/100)*B.Rate) As Amt " +
                       "from WOWBSTrans A " +
                       "Inner Join WOTrans B on A.WOTransId=B.WOTransId " +
                       "Inner Join [" + argDBName + "].dbo.ClaimItem C on  B.IOW_ID = C.IOW_In_IOW_Id " +
                       "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on  B.IOW_ID = D.IOW_In_IOW_Id " +
                       "Inner Join [" + argDBName + "].dbo.IOW E on E.ProjIOWID=" + argID + " and E.Revision_ID=" + m_lRevId + " " +
                       "Inner Join WORegister F on B.WOREgisterId=F.WORegisterId " +
                       "Where F.LiveWO=0 and F.CancelWO=0 and F.Approve='Y' and A.AnalysisId = " + argAHeadId + " and F.CostCentreId=" + argCCId + " " +
                       "and F.ContractorId = " + argContractId + " " + s2 + " and C.IOW_in_IOW_ID<>0 and B.WOType='I') G ";

                    
                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));

                    } dr.Close();



                    if (argWoRegId != 0)
                    {
                        if (argSplit == "Y")
                        {
                            sSql = "Select isnull(G.Qtty,0) as Qty from " +
                           "(Select A.Qtty as Qtty from WOTrans A " +
                           "Inner Join WOREgister B on A.WOREgisterId=B.WORegisterId " +
                           "Where B.LiveWO=0 and B.CancelWO=0 and B.Approve='Y' and A.IOW_ID=  " + argID + " and A.AnalysisHeadId = " + argAHeadId + " and B.CostCentreId=" + argCCId + " and A.WOType='I' and B.ContractorId = " + argContractId + " and B.WORegisterId=" + argWoRegId + " " +
                           "Union All " +
                           "Select (E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100) As Qtty " +
                           "from WOWBSTrans A " +
                           "Inner Join WOTrans B on A.WOTransId=B.WOTransId " +
                           "Inner Join [" + argDBName + "].dbo.ClaimItem C on B.Comp_ID = C.Comp_Id " +
                           "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on  B.Comp_ID = D.Resource_Id " +
                           "Inner Join [" + argDBName + "].dbo.IOW E on E.IOW_Trans_ID=" + argID + " and E.Revision_ID=" + m_lRevId + " " +
                           "Inner Join WOREgister F on B.WOREgisterId=F.WORegisterId " +
                           "Where F.LiveWO=0 and F.CancelWO=0 and F.Approve='Y' and  A.AnalysisId = " + argAHeadId + " and F.CostCentreId= " + argCCId + " and F.WORegisterId=" + argWoRegId + " and " +
                           "C.Comp_ID<>0 and (B.WOType='I') and F.ContractorId = " + argContractId + " and D.Qtty<>0 " +
                           "Union All " +
                           "Select (E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100) As Qtty " +
                           "from WOWBSTrans A " +
                           "Inner Join WOTrans B on A.WOTransId=B.WOTransId " +
                           "Inner Join [" + argDBName + "].dbo.ClaimItem C on  B.IOW_ID = C.IOW_In_IOW_Id " +
                           "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on  B.IOW_ID = D.IOW_In_IOW_Id " +
                           "Inner Join [" + argDBName + "].dbo.IOW E on E.IOW_Trans_ID=" + argID + " and E.Revision_ID=" + m_lRevId + " " +
                           "Inner Join WOREgister F on B.WOREgisterId=F.WORegisterId " +
                           "Where F.LiveWO=0 and F.CancelWO=0 and F.Approve='Y' and A.AnalysisId = " + argAHeadId + " and F.CostCentreId=" + argCCId + " " +
                           "and F.ContractorId = " + argContractId + " and F.WORegisterId=" + argWoRegId + " and C.IOW_in_IOW_ID<>0 and B.WOType='I') G ";
                        }
                        else
                        {
                            sSql = "Select sum(isnull(G.Qtty,0)) as Qty from (Select sum((A.Qty)) as Qtty from BillTrans A  " +
                                "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId Where A.IOW_ID=  " + argID + "  " +
                                "and A.AnalysisHeadId =" + argAHeadId + " and B.CostCentreId=" + argCCId + " and A.BillType='I'  " +
                                "and B.ContractorId = " + argContractId + " and B.WORegisterId=" + argWoRegId + " " +
                                "Union All  " +
                                "Select sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)) As Qtty from BillWBSTrans A  " +
                                "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                                "Inner Join [" + argDBName + "].dbo.ClaimItem C on B.Comp_ID = C.Comp_Id  " +
                                "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on  B.Comp_ID = D.Resource_Id  " +
                                "Inner Join [" + argDBName + "].dbo.IOW E on E.IOW_Trans_ID=9 and E.Revision_ID=" + m_lRevId + "  " +
                                "Inner Join BillRegister F on B.BillREgisterId=F.BillRegisterId  " +
                                "Where A.AnalysisId = " + argAHeadId + "  " +
                                "and F.CostCentreId= " + argCCId + " and F.WORegisterId=" + argWoRegId + "  and C.Comp_ID<>0 and (B.BillType='I')  " +
                                "and F.ContractorId = " + argContractId + " and ((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100))>0 and D.Qtty<>0  " +
                                "Union All  " +
                                "Select sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)) As Qtty from BillWBSTrans A  " +
                                "Inner Join BillTrans B on A.BillTransId=B.BillTransId  " +
                                "Inner Join [" + argDBName + "].dbo.ClaimItem C on  B.IOW_ID = C.IOW_In_IOW_Id  " +
                                "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on  B.IOW_ID = D.IOW_In_IOW_Id  " +
                                "Inner Join [" + argDBName + "].dbo.IOW E on E.IOW_Trans_ID=9 and E.Revision_ID=" + m_lRevId + "  " +
                                "Inner Join BillRegister F on B.BillRegisterId=F.BillRegisterId  " +
                                "Where A.AnalysisId = " + argAHeadId + "  " +
                                "and F.CostCentreId=" + argCCId + " and F.ContractorId = " + argContractId + " and ((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100))>0 and F.WORegisterId=" + argWoRegId + "  " +
                                "and C.IOW_in_IOW_ID<>0 and B.BillType='I') G  ";
                        }

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            dWOCurrQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));                           

                        }
                        dr.Close();


                        //Privous Bill WOQty
                        decimal dBWOQty = 0;

                        sSql = "Select Sum(A.Qty) Qty From BillTrans A " +
                            "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                            "Where B.ContractorId = " + argContractId + " and " +
                            "B.CostCentreId = " + argCCId + " and A.IOW_ID = " + argID + " and A.BillType='" + argType + "' ";

                        if (argWoRegId != 0)
                            sSql = sSql + " and A.WORegisterId=" + argWoRegId + " ";

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        if (cmd.ExecuteScalar() == null || cmd.ExecuteScalar() == DBNull.Value) { }
                        else
                        {
                            dBWOQty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                        }
                        if (argMode == "A")
                        {
                            dWOCurrQty = dWOCurrQty - dBWOQty;
                        }
                        else
                        {
                            dWOCurrQty = dBWOQty;
                        }               
                        dr.Close();

                        //Get Amendment WorkOrder BilledQty Modified 09/04/2013
                        //if (argWOAmdment == true)
                        //{
                        //    sSql = "Select Sum(A.BilledQty) BilledQty from WOTrans A  " +
                        //    "Left Join WORegister B on A.WORegisterId=B.WORegisterId " +
                        //    "Where A.WORegisterId In (" + sWORegId.TrimEnd(',') + ") " +
                        //    "and B.CostCentreId=" + argCCId + " and B.ContractorId=" + argContractId + " and A.IOW_ID =" + argID + " ";

                        //    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        //    dr = cmd.ExecuteReader();
                        //    while (dr.Read())
                        //    {
                        //        if (dr["BilledQty"].ToString() != "")
                        //            dWOAmdBilledQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["BilledQty"].ToString(), CommFun.datatypes.vartypenumeric));
                        //        else
                        //            dWOAmdBilledQty = 0;
                        //    }
                        //    dr.Close();
                        //}

                    }

                    if (dNQty != 0)//- Convert.ToDecimal(dWOAmdBilledQty)
                    {
                        drw["WorkOrderQty"] = Convert.ToDecimal(CommFun.IsNullCheck((dNQty ), CommFun.datatypes.vartypenumeric)).ToString();
                        drw["WorkOrderRate"] = Convert.ToDecimal(CommFun.IsNullCheck((dNAmt / dNQty), CommFun.datatypes.vartypenumeric)).ToString();
                    }
                    else
                    {
                        drw["WorkOrderRate"] = "0";
                        drw["WorkOrderQty"] = "0";
                    }

                    //if (dWOCurrQty != 0)
                    //    drw["WorkOrderCurQty"] = (dWOCurrQty);

                    drw["WorkOrderAmount"] = (Convert.ToDecimal(CommFun.IsNullCheck(drw["WorkOrderQty"], CommFun.datatypes.vartypenumeric)) * Convert.ToDecimal(CommFun.IsNullCheck(drw["WorkOrderRate"], CommFun.datatypes.vartypenumeric))); //dNAmt;
                    
                    dr.Close();

                    dNQty = 0;
                    dWOCurrQty = 0;
                    dWOAmdBilledQty = 0;

                    dNAmt = 0;

                    sSql = "Select Sum(isnull(G.Qtty,0)) as Qty,Sum(isnull(G.Amt,0)) as Amt from " +
                       "(Select Sum(A.Qty) as Qtty,Sum(A.Amount) as Amt from BillTrans A " +
                       "Inner Join BillREgister B on A.BillREgisterId=B.BillRegisterId " +
                       "Where A.PartRate=0 and A.IOW_ID=  " + argID + " and A.AnalysisHeadId = " + argAHeadId + " and B.CostCentreId=" + argCCId + " and A.BillType='I' and B.ContractorId = " + argContractId + " " +
                       "Union All " +
                       "Select Sum((E.RateAnalQty/D.Qtty)*A.Qty*(C.Percentage/100)) As Qtty, " +
                       "Sum((E.RateAnalQty/D.Qtty)*A.Qty*(C.Percentage/100)*B.Rate) As Amt " +
                       "from BillWBSTrans A " +
                       "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                       "Inner Join [" + argDBName + "].dbo.ClaimItem C on  B.Comp_ID = C.Comp_Id " +
                       "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on  B.Comp_ID = D.Resource_Id " +
                       "Inner Join [" + argDBName + "].dbo.IOW E on E.IOW_Trans_ID=" + argID + " and E.Revision_ID=" + m_lRevId + " " +
                       "Inner Join BillREgister F on B.BillREgisterId=F.BillRegisterId " +
                       "Where B.PartRate=0  and A.AnalysisId = " + argAHeadId + " and F.CostCentreId= " + argCCId + " and " +
                       "C.Comp_ID<>0 and (B.BillType='I') and F.ContractorId = " + argContractId + " and D.Qtty<>0 " +
                       "Union All " +
                       "Select Sum((E.RateAnalQty/D.Qtty)*A.Qty*(C.Percentage/100)) As Qtty, " +
                       "Sum((E.RateAnalQty/D.Qtty)*A.Qty*(C.Percentage/100)*B.Rate) As Amt " +
                       "from BillWBSTrans A " +
                       "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                       "Inner Join [" + argDBName + "].dbo.ClaimItem C on B.IOW_ID = C.IOW_In_IOW_Id " +
                       "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on  B.IOW_ID = D.IOW_In_IOW_Id " +
                       "Inner Join [" + argDBName + "].dbo.IOW E on E.IOW_Trans_ID=" + argID + " and E.Revision_ID=" + m_lRevId + " " +
                       "Inner Join BillREgister F on B.BillREgisterId=F.BillRegisterId " +
                       "Where B.PartRate=0 and  A.AnalysisId = " + argAHeadId + " and F.CostCentreId=" + argCCId + " " +
                       "and F.ContractorId = " + argContractId + " and C.IOW_in_IOW_ID<>0 and B.BillType='I') G ";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                        dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));

                    } dr.Close();

                    if (argWoRegId != 0)
                    {
                        sSql = "Select isnull(G.Qtty,0) as Qty from " +
                       "(Select A.Qty as Qtty from BillTrans A " +
                       "Inner Join BillREgister B on A.BillREgisterId=B.BillRegisterId " +
                       "Where A.PartRate=0 and A.IOW_ID=  " + argID + " and A.AnalysisHeadId = " + argAHeadId + " and B.CostCentreId=" + argCCId + " and A.BillType='I'  " + 
                       "and B.WORegisterId=" + argWoRegId + " and B.ContractorId = " + argContractId + " " +
                       "Union All " +
                       "Select (E.RateAnalQty/D.Qtty)*A.Qty*(C.Percentage/100) As Qtty " +                       
                       "from BillWBSTrans A " +
                       "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                       "Inner Join [" + argDBName + "].dbo.ClaimItem C on  B.Comp_ID = C.Comp_Id " +
                       "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on  B.Comp_ID = D.Resource_Id " +
                       "Inner Join [" + argDBName + "].dbo.IOW E on E.IOW_Trans_ID=" + argID + " and E.Revision_ID=" + m_lRevId + " " +
                       "Inner Join BillREgister F on B.BillREgisterId=F.BillRegisterId " +
                       "Where B.PartRate=0  and A.AnalysisId = " + argAHeadId + " and F.CostCentreId= " + argCCId + " and " +
                       "C.Comp_ID<>0 and (B.BillType='I') and F.WORegisterId=" + argWoRegId + " and F.ContractorId = " + argContractId + " and D.Qtty<>0 " +
                       "Union All " +
                       "Select (E.RateAnalQty/D.Qtty)*A.Qty*(C.Percentage/100) As Qtty " +                       
                       "from BillWBSTrans A " +
                       "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                       "Inner Join [" + argDBName + "].dbo.ClaimItem C on B.IOW_ID = C.IOW_In_IOW_Id " +
                       "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on  B.IOW_ID = D.IOW_In_IOW_Id " +
                       "Inner Join [" + argDBName + "].dbo.IOW E on E.IOW_Trans_ID=" + argID + " and E.Revision_ID=" + m_lRevId + " " +
                       "Inner Join BillREgister F on B.BillREgisterId=F.BillRegisterId " +
                       "Where B.PartRate=0 and  A.AnalysisId = " + argAHeadId + " and F.CostCentreId=" + argCCId + " and F.WORegisterId=" + argWoRegId + " " +
                       "and F.ContractorId = " + argContractId + " and C.IOW_in_IOW_ID<>0 and B.BillType='I') G ";
                    }
                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        dCBCurrQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));                      
                    }
                    drw["Contractor BilledQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dNQty, CommFun.datatypes.vartypenumeric)).ToString();
                    if (dNQty != 0)
                        drw["Contractor BilledRate"] = Convert.ToDecimal(CommFun.IsNullCheck((dNAmt / dNQty), CommFun.datatypes.vartypenumeric)).ToString();
                    else
                        drw["Contractor BilledRate"] = "0";

                    //drw["Contractor BilledCurQty"] = dCBCurrQty;    

                    drw["Contractor BilledAmount"] = Convert.ToDecimal(CommFun.IsNullCheck(dNAmt, CommFun.datatypes.vartypenumeric)).ToString();
                    dr.Close();

                    dNQty = 0;
                    dNAmt = 0;


                    //Need to add Client BilledQty Details
                    if (BsfGlobal.g_bBillDB == true)
                    {
                        sSql = "Select isnull(SUM(Case When B.CerApproved=1 then A.CerQty else A.Qty end),0) as Qty, " +
                            "isnull(SUM(Case When B.CerApproved=1 then A.CerRate else A.Rate end),0) as Rate, " +
                            "isnull(SUM(Case When B.CerApproved=1 then A.CerAmount else A.Amount end),0) as Amount from [" + BsfGlobal.g_sBillDBName + "].dbo.IOWTrans A " +
                            "Inner Join [" + BsfGlobal.g_sBillDBName + "].dbo.BillTrans B on A.BillId=B.BillId and A.CostCentreId=B.CostCentreId  " +
                            "Where A.IOWTransId=" + argID + " and A.CostCentreId=" + argCCId + " and PartRate=0 ";

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                            dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amount"].ToString(), CommFun.datatypes.vartypenumeric));
                        }
                        drw["Client BilledQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dNQty, CommFun.datatypes.vartypenumeric)).ToString();
                        if (dNQty != 0)
                            drw["Client BilledRate"] = Convert.ToDecimal(CommFun.IsNullCheck((dNAmt / dNQty), CommFun.datatypes.vartypenumeric)).ToString();
                        else
                            drw["Client BilledRate"] = "0";

                        drw["Client BilledAmount"] = Convert.ToDecimal(CommFun.IsNullCheck(dNAmt, CommFun.datatypes.vartypenumeric)).ToString();
                    }
                    
                    
                    drw["Client BilledPRate"] = 0;
                    //drw["Client BilledCurQty"] = 0;
                    drw["Client BilledPRQty"] = 0;

                    dr.Close();

                    dNQty = 0;
                    dNAmt = 0;

                    //get Total Billed Qty
                    string qryB = "";
                    string qryD = "";
                    if (argWoRegId != 0)
                    {
                        if (argWOAmdment == true)
                        {
                            if(sWORegId!="")
                            {
                                qryB = " and F.WORegisterId IN(" + sWORegId.TrimEnd(',') + ")";
                                qryD = " and F.WORegisterId IN(" + sWORegId.TrimEnd(',') + ")";
                            }
                        }
                        else
                        {
                            qryB = " and F.WORegisterId IN(" + argWoRegId + ")";
                            qryD = " and F.WORegisterId IN(" + argWoRegId + ")";
                        }
                        //Total Billed Qty for DPE 11/04/2013 for WOAmendment..
                        sSql = "Select Sum(isnull(G.Qtty,0)) as Qty,Sum(isnull(G.Amt,0)) as Amt from " +
                           "(Select Sum(A.Qty) as Qtty,Sum(A.Amount) as Amt from DPETrans A " +
                           "Inner Join DPEREgister B on A.DPEREgisterId=B.DPERegisterId " +
                           "Where A.IOW_ID=  " + argID + " and A.AnalysisHeadId = " + argAHeadId + " and B.CostCentreId=" + argCCId + " and A.BillType='I'  " +  //and B.ContractorId = " + argContractId + "
                           "Union All " +
                           "Select Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)) As Qtty, " +
                           "Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)*B.Rate) As Amt " +
                           "from DPEWBSTrans A " +
                           "Inner Join DPETrans B on A.DPETransId=B.DPETransId " +
                           "Inner Join [" + argDBName + "].dbo.ClaimItem C on  B.Comp_ID = C.Comp_Id " +
                           "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on B.Comp_ID = D.Resource_Id " +
                           "Inner Join [" + argDBName + "].dbo.IOW E on E.ProjIOWID=" + argID + " and E.Revision_ID=" + m_lRevId + "" +
                           "Inner Join DPEREgister F on B.DPEREgisterId=F.DPERegisterId  " + qryD + " " +
                           "Where A.AnalysisId = " + argAHeadId + " and F.CostCentreId= " + argCCId + " and " +
                           "C.Comp_ID<>0 and (B.BillType='I')  and D.Qtty<>0 " + //and F.ContractorId = " + argContractId + "
                           "Union All " +
                           "Select Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)) As Qtty, " +
                           "Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)*B.Rate) As Amt " +
                           "from DPEWBSTrans A " +
                           "Inner Join DPETrans B on A.DPETransId=B.DPETransId " +
                           "Inner Join [" + argDBName + "].dbo.ClaimItem C on  B.IOW_ID = C.IOW_In_IOW_Id " +
                           "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on  B.IOW_ID = D.IOW_In_IOW_Id " +
                           "Inner Join [" + argDBName + "].dbo.IOW E on E.ProjIOWID=" + argID + " and E.Revision_ID=" + m_lRevId + " " +
                           "Inner Join DPEREgister F on B.DPEREgisterId=F.DPERegisterId  " + qryD + " " +
                           "Where A.AnalysisId = " + argAHeadId + " and F.CostCentreId=" + argCCId + " " +
                           "and C.IOW_in_IOW_ID<>0 and B.BillType='I') G "; //and F.ContractorId = " + argContractId + "

                        //fgfh
                        if (sSql != "")
                        {
                            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                            dr = cmd.ExecuteReader();
                            while (dr.Read())
                            {
                                dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                                dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                            }
                            dr.Close();
                        }

                        //Total Billed Qty for Bill
                        sSql = "Select Sum(isnull(G.Qtty,0)) as Qty,Sum(isnull(G.Amt,0)) as Amt from " +
                           "(Select Sum(A.Qty) as Qtty,Sum(A.Amount) as Amt from BillTrans A " +
                           "Inner Join BillREgister B on A.BillREgisterId=B.BillRegisterId " +
                           "Where A.PartRate=0 and A.IOW_ID=  " + argID + " and A.AnalysisHeadId = " + argAHeadId + " and B.CostCentreId=" + argCCId + " and A.BillType='I'  " +  //and B.ContractorId = " + argContractId + "
                           "Union All " +
                           "Select Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)) As Qtty, " +
                           "Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)*B.Rate) As Amt " +
                           "from BillWBSTrans A " +
                           "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                           "Inner Join [" + argDBName + "].dbo.ClaimItem C on  B.Comp_ID = C.Comp_Id " +
                           "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on B.Comp_ID = D.Resource_Id " +
                           "Inner Join [" + argDBName + "].dbo.IOW E on E.ProjIOWID=" + argID + " and E.Revision_ID=" + m_lRevId + "" +
                           "Inner Join BillREgister F on B.BillREgisterId=F.BillRegisterId " + qryB + " " +
                           "Where B.PartRate=0 and  A.AnalysisId = " + argAHeadId + " and F.CostCentreId= " + argCCId + " and " +
                           "C.Comp_ID<>0 and (B.BillType='I')  and D.Qtty<>0 " + //and F.ContractorId = " + argContractId + "
                           "Union All " +
                           "Select Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)) As Qtty, " +
                           "Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)*B.Rate) As Amt " +
                           "from BillWBSTrans A " +
                           "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                           "Inner Join [" + argDBName + "].dbo.ClaimItem C on  B.IOW_ID = C.IOW_In_IOW_Id " +
                           "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on  B.IOW_ID = D.IOW_In_IOW_Id " +
                           "Inner Join [" + argDBName + "].dbo.IOW E on E.ProjIOWID=" + argID + " and E.Revision_ID=" + m_lRevId + " " +
                           "Inner Join BillREgister F on B.BillREgisterId=F.BillRegisterId  " + qryB + " " +
                           "Where B.PartRate=0 and A.AnalysisId = " + argAHeadId + " and F.CostCentreId=" + argCCId + " " +
                           "and C.IOW_in_IOW_ID<>0 and B.BillType='I') G "; //and F.ContractorId = " + argContractId + "

                        //fgfh
                        if (sSql != "")
                        {
                            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                            dr = cmd.ExecuteReader();
                            while (dr.Read())
                            {
                                dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                                dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                            }
                            drw["Total BilledQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dNQty, CommFun.datatypes.vartypenumeric)).ToString();
                            if (dNQty != 0)
                                drw["Total BilledRate"] = Convert.ToDecimal(CommFun.IsNullCheck((dNAmt / dNQty), CommFun.datatypes.vartypenumeric)).ToString();
                            else
                                drw["Total BilledRate"] = "0";

                            drw["Total BilledAmount"] = Convert.ToDecimal(CommFun.IsNullCheck(dNAmt, CommFun.datatypes.vartypenumeric)).ToString();
                            dr.Close();
                        }
                    }
                    else
                    {
                        //Total Billed Qty for DPE 11/04/2013 for WOAmendment..
                        sSql = "Select Sum(isnull(G.Qtty,0)) as Qty,Sum(isnull(G.Amt,0)) as Amt from " +
                           "(Select Sum(A.Qty) as Qtty,Sum(A.Amount) as Amt from DPETrans A " +
                           "Inner Join DPEREgister B on A.DPEREgisterId=B.DPERegisterId " +
                           "Where A.IOW_ID=  " + argID + " and A.AnalysisHeadId = " + argAHeadId + " and B.CostCentreId=" + argCCId + " and A.BillType='I'  " +  //and B.ContractorId = " + argContractId + "
                           "Union All " +
                           "Select Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)) As Qtty, " +
                           "Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)*B.Rate) As Amt " +
                           "from DPEWBSTrans A " +
                           "Inner Join DPETrans B on A.DPETransId=B.DPETransId " +
                           "Inner Join [" + argDBName + "].dbo.ClaimItem C on  B.Comp_ID = C.Comp_Id " +
                           "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on B.Comp_ID = D.Resource_Id " +
                           "Inner Join [" + argDBName + "].dbo.IOW E on E.ProjIOWID=" + argID + " and E.Revision_ID=" + m_lRevId + "" +
                           "Inner Join DPEREgister F on B.DPEREgisterId=F.DPERegisterId " +
                           "Where A.AnalysisId = " + argAHeadId + " and F.CostCentreId= " + argCCId + " and " +
                           "C.Comp_ID<>0 and (B.BillType='I')  and D.Qtty<>0 " + //and F.ContractorId = " + argContractId + "
                           "Union All " +
                           "Select Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)) As Qtty, " +
                           "Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)*B.Rate) As Amt " +
                           "from DPEWBSTrans A " +
                           "Inner Join DPETrans B on A.DPETransId=B.DPETransId " +
                           "Inner Join [" + argDBName + "].dbo.ClaimItem C on  B.IOW_ID = C.IOW_In_IOW_Id " +
                           "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on  B.IOW_ID = D.IOW_In_IOW_Id " +
                           "Inner Join [" + argDBName + "].dbo.IOW E on E.ProjIOWID=" + argID + " and E.Revision_ID=" + m_lRevId + " " +
                           "Inner Join DPEREgister F on B.DPEREgisterId=F.DPERegisterId " +
                           "Where A.AnalysisId = " + argAHeadId + " and F.CostCentreId=" + argCCId + " " +
                           "and C.IOW_in_IOW_ID<>0 and B.BillType='I') G "; //and F.ContractorId = " + argContractId + "

                        //fgfh
                        if (sSql != "")
                        {
                            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                            dr = cmd.ExecuteReader();
                            while (dr.Read())
                            {
                                dNQty = Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                                dNAmt = Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                            }
                            dr.Close();
                        }

                        //Total Billed Qty for Bill
                        sSql = "Select Sum(isnull(G.Qtty,0)) as Qty,Sum(isnull(G.Amt,0)) as Amt from " +
                           "(Select Sum(A.Qty) as Qtty,Sum(A.Amount) as Amt from BillTrans A " +
                           "Inner Join BillREgister B on A.BillREgisterId=B.BillRegisterId " +
                           "Where A.PartRate=0 and A.IOW_ID=  " + argID + " and A.AnalysisHeadId = " + argAHeadId + " and B.CostCentreId=" + argCCId + " and A.BillType='I'  " +  //and B.ContractorId = " + argContractId + "
                           "Union All " +
                           "Select Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)) As Qtty, " +
                           "Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)*B.Rate) As Amt " +
                           "from BillWBSTrans A " +
                           "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                           "Inner Join [" + argDBName + "].dbo.ClaimItem C on  B.Comp_ID = C.Comp_Id " +
                           "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on B.Comp_ID = D.Resource_Id " +
                           "Inner Join [" + argDBName + "].dbo.IOW E on E.ProjIOWID=" + argID + " and E.Revision_ID=" + m_lRevId + "" +
                           "Inner Join BillREgister F on B.BillREgisterId=F.BillRegisterId " +
                           "Where B.PartRate=0 and  A.AnalysisId = " + argAHeadId + " and F.CostCentreId= " + argCCId + " and " +
                           "C.Comp_ID<>0 and (B.BillType='I')  and D.Qtty<>0 " + //and F.ContractorId = " + argContractId + "
                           "Union All " +
                           "Select Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)) As Qtty, " +
                           "Sum((E.Qtty/D.Qtty)*A.Qty*(C.Percentage/100)*B.Rate) As Amt " +
                           "from BillWBSTrans A " +
                           "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                           "Inner Join [" + argDBName + "].dbo.ClaimItem C on  B.IOW_ID = C.IOW_In_IOW_Id " +
                           "Inner Join [" + argDBName + "].dbo.Rate_Analysis D on  B.IOW_ID = D.IOW_In_IOW_Id " +
                           "Inner Join [" + argDBName + "].dbo.IOW E on E.ProjIOWID=" + argID + " and E.Revision_ID=" + m_lRevId + " " +
                           "Inner Join BillREgister F on B.BillREgisterId=F.BillRegisterId " +
                           "Where B.PartRate=0 and A.AnalysisId = " + argAHeadId + " and F.CostCentreId=" + argCCId + " " +
                           "and C.IOW_in_IOW_ID<>0 and B.BillType='I') G "; //and F.ContractorId = " + argContractId + "

                        //fgfh
                        if (sSql != "")
                        {
                            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                            dr = cmd.ExecuteReader();
                            while (dr.Read())
                            {
                                dNQty = dNQty + Convert.ToDecimal(CommFun.IsNullCheck(dr["Qty"].ToString(), CommFun.datatypes.vartypenumeric));
                                dNAmt = dNAmt + Convert.ToDecimal(CommFun.IsNullCheck(dr["Amt"].ToString(), CommFun.datatypes.vartypenumeric));
                            }
                            drw["Total BilledQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dNQty, CommFun.datatypes.vartypenumeric)).ToString();
                            if (dNQty != 0)
                                drw["Total BilledRate"] = Convert.ToDecimal(CommFun.IsNullCheck((dNAmt / dNQty), CommFun.datatypes.vartypenumeric)).ToString();
                            else
                                drw["Total BilledRate"] = "0";

                            drw["Total BilledAmount"] = Convert.ToDecimal(CommFun.IsNullCheck(dNAmt, CommFun.datatypes.vartypenumeric)).ToString();
                            dr.Close();
                        }
                    }                   

                    sSql = "Select A.QRate from [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorQuotationTrans A " +
                        "Inner Join [" + BsfGlobal.g_sVendorDBName + "].dbo.QuotationRegister B on A.QuotationId=B.QuotationId Where B.CostCentreId = " + argCCId + " and A.VendorId =  " + argContractId + " and A.ResourceId = " + argID;
                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    dr = cmd.ExecuteReader();
                    while (dr.Read())
                    {
                        //get PartRate=To get Quotation Qual Rate
                        if (Convert.ToDecimal(CommFun.IsNullCheck("QRate", CommFun.datatypes.vartypenumeric)) != 0)
                        {
                            drw["EstimatedPRate"] = Convert.ToDecimal(CommFun.IsNullCheck("QRate", CommFun.datatypes.vartypenumeric)).ToString();
                            drw["WorkOrderPRate"] = Convert.ToDecimal(CommFun.IsNullCheck("QRate", CommFun.datatypes.vartypenumeric)).ToString();
                            drw["Contractor BilledPRate"] = Convert.ToDecimal(CommFun.IsNullCheck("QRate", CommFun.datatypes.vartypenumeric)).ToString();
                            drw["Total BilledPRate"] = Convert.ToDecimal(CommFun.IsNullCheck("QRate", CommFun.datatypes.vartypenumeric)).ToString();
                        }
                        else
                        {
                            drw["EstimatedPRate"] = 0;
                            drw["WorkOrderPRate"] = 0;
                            drw["Contractor BilledPRate"] = 0;
                            drw["Total BilledPRate"] = 0;
                        }


                    }
                    dr.Close();

                    if (argPartRate == 1)
                    {
                        sSql = "Select Sum(A.Qty) as Qty from BillTrans A " +
                           "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                           "Where A.PartRate=1 and A.BillType='" + argType + "' and A.Comp_ID = " + argID + " and " +
                           "B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContractId + " and " +
                           "A.Rate = " + argRate;
                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        while (dr.Read())
                        {
                            //get PartRateQty = To get PartRate Qty

                            drw["EstimatedPRQty"] = Convert.ToDecimal(CommFun.IsNullCheck("Qty", CommFun.datatypes.vartypenumeric)).ToString();
                            drw["WorkOrderPRQty"] = Convert.ToDecimal(CommFun.IsNullCheck("Qty", CommFun.datatypes.vartypenumeric)).ToString();
                            drw["Contractor BilledPRQty"] = Convert.ToDecimal(CommFun.IsNullCheck("Qty", CommFun.datatypes.vartypenumeric)).ToString();
                            drw["Total BilledPRQty"] = Convert.ToDecimal(CommFun.IsNullCheck("Qty", CommFun.datatypes.vartypenumeric)).ToString();


                            //drw["EstimatedCurQty"] = 0;
                            //drw["WorkOrderCurQty"] = 0;
                            //drw["Contractor BilledCurQty"] = 0;
                            drw["Total BilledCurQty"] = 0;
                        }
                        dr.Close();
                    }
                    else
                    {
                        //get PartRateQty = 0
                        drw["EstimatedPRQty"] = 0;
                        drw["WorkOrderPRQty"] = 0;
                        drw["Contractor BilledPRQty"] = 0;
                        drw["Total BilledPRQty"] = 0;
                    }

                    dtFinal.Rows.Add(drw);
                    BsfGlobal.g_WPMDB.Close();
                }
                #endregion 

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dtFinal;
        }

        public void UpdateSortOrderCCNew(DataTable dt, int argccId)
        {

            SqlCommand cmd;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                int iTypeId = 0;
                int iOrder = 0;

                //if (argfrm == "B")
                //{
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        iTypeId = Convert.ToInt32(dt.Rows[i]["Id"]);
                        iOrder = Convert.ToInt32(dt.Rows[i]["OrderId"]);

                        sSql = "Update BillFormat Set OrderNo=" + iOrder + " " +
                            "Where TypeId=" + iTypeId + " and CostCentreId=" + argccId;
                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                    }
                //}
                //else
                //{
                //    for (int i = 0; i < dt.Rows.Count; i++)
                //    {
                //        iTypeId = Convert.ToInt32(dt.Rows[i]["Id"]);
                //        iOrder = Convert.ToInt32(dt.Rows[i]["OrderId"]);

                //        sSql = "Update LabourFormatTrans Set OrderNo=" + iOrder + "  " +
                //            "Where TypeId=" + iTypeId + " and CostCentreId=" + argccId;
                //        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                //        cmd.ExecuteNonQuery();
                //        cmd.Dispose();
                //    }
                //}
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }

        }


        //public void UpdateSortOrderCC(DataTable dt, string argfrm,int argccId)
        //{
        //    SqlCommand cmd;
        //    string sSql = "";
        //    BsfGlobal.OpenWPMDB();
        //    try
        //    {
        //        if (argfrm == "B")
        //        {
        //            for (int i = 0; i < dt.Rows.Count; i++)
        //            {
        //                int ChkId = Convert.ToInt32(dt.Rows[i]["TypeId"].ToString());
        //                int SOrder = Convert.ToInt32(dt.Rows[i]["OrderNo"].ToString());
        //                sSql = "Update BillFormat Set OrderNo=" + SOrder + " Where TypeId=" + ChkId + " and CostCentreId=" + argccId;
        //                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
        //                cmd.ExecuteNonQuery();
        //                cmd.Dispose();
        //            }
        //        }
        //        else
        //        {
        //            for (int i = 0; i < dt.Rows.Count; i++)
        //            {
        //                int ChkId = Convert.ToInt32(dt.Rows[i]["TypeId"].ToString());
        //                int SOrder = Convert.ToInt32(dt.Rows[i]["OrderNo"].ToString());
        //                sSql = "Update LabourFormatTrans Set OrderNo=" + SOrder + " Where TypeId=" + ChkId + " and CostCentreId=" + argccId;
        //                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
        //                cmd.ExecuteNonQuery();
        //                cmd.Dispose();
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //         BsfGlobal.CustomException(ex.Message, ex.StackTrace);
        //    }
        //    finally
        //    {
        //        BsfGlobal.g_WPMDB.Close();
        //    }
        //}

        public void UpdateSortOrderMaster(DataTable dt)
        {
            SqlCommand cmd;
            string sSql = "";
            try
            {
                BsfGlobal.OpenWPMDB();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    int ChkId = Convert.ToInt32(dt.Rows[i]["Id"].ToString());
                    int SOrder = Convert.ToInt32(dt.Rows[i]["OrderId"].ToString());
                    //if (argType == "B")
                        sSql = "Update BillFormatMaster Set OrderNo=" + SOrder + " Where TypeId=" + ChkId + "";
                    //else
                    //    sSql = "Update LabourFormat Set OrderNo=" + SOrder + " Where TypeId=" + ChkId + "";

                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
        }

        public DataTable GetMeasurement(int argIOWID,string argSplit,string argDBName)
        {

            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            try
            {
                if (argSplit == "N")
                {
                    sSql = "Select SlNo,Description,No1,No2,Cast(0 as Decimal(18,3)) No3,Length,Breadth,Depth,Qty,case Sign when 0 then '-' else '+' end as Sign,MBookNO,PageNo, " +
                        "LevelNo,ParentId,SteelId,Factor,FNo1,FNo2,'' as FNo3,FLength,FBreadth,FDepth,SubFormula  from [" + argDBName + "].dbo.Measurement " +
                        "where IOW_Trans_Id = " + argIOWID + " order by RowId";
                }
                else
                {
                    sSql = "Select SlNo,Description,No1,No2,Cast(0 as Decimal(18,3)) No3,Length,Breadth,Depth,Qty,case Sign when 0 then '-' else '+' end as Sign,MBookNO,PageNo, " +
                          "LevelNo,ParentId,SteelId,Factor,FNo1,FNo2,'' as FNo3,FLength,FBreadth,FDepth,SubFormula  from [" + argDBName + "].dbo.MeasurementAnalysis " +
                          "where IOW_Trans_Id = " + argIOWID + " order by RowId";
                }

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }


        public DataTable getBillWBSTranQtyEdit(int argDPETransId, int argAHeadID)
        {

            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";
            try
            {
                sSql = "Select Qty,Rate,Amount,BillTransId,MType from BillWBSTrans Where BillTransId=" + argDPETransId + " and AnalysisId=" + argAHeadID;

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);

                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable BillWBSE(int argBillTransId, string split, int RevId,int argIOWTransId,string argDBName)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            try
            {           
                sSql = "Select ROW_NUMBER()  OVER (ORDER BY  B.Analysis_ID) As RowId,B.Analysis_ID AnalysisId ,P.RefSerialNo New_Serial_No, " +
                   "case when E.AnalysisHeadName Is null then '' Else E.AnalysisHeadName End Level3,case when D.AnalysisHeadName Is null then '' Else D.AnalysisHeadName End Level2, " +
                       "case when C.AnalysisHeadName Is null then '' Else C.AnalysisHeadName End Level1,A.AnalysisHeadName,0 as BillTransId,Cast(0 as Decimal(18,3)) Qty,Cast(0 as Decimal(18,3)) Rate, " +
                       "Cast(0 as Decimal(18,3)) Amount, " +
                       "0 as MType " + 
                       "from [" + argDBName + "].dbo.AnalysisIOWc B " +
                       "Inner Join [" + argDBName + "].dbo.Project_IOW P on B.ProjIOWId=P.Project_IOW_ID " +
                       "Inner Join [" + argDBName + "].dbo.AnalysisHeads A on A.AnalysisID=B.Analysis_ID and A.LastLevel=1  " +
                       "Left Join [" + argDBName + "].dbo.AnalysisHeads C on A.ParentID=C.AnalysisID  " +
                       "Left Join [" + argDBName + "].dbo.AnalysisHeads D on C.ParentID=D.AnalysisID  " +
                       "Left Join [" + argDBName + "].dbo.AnalysisHeads E on D.ParentID=E.AnalysisID  " +
                       "where B.ProjIOWId in(Select ProjIOWId from [" + argDBName + "].dbo.IOWc where ProjIOWID=" + argIOWTransId + " and Revision_ID=" + RevId+")  and B.Revision_ID=" + RevId;
               


                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public void DeleteBillDetails(int BillRegId, int iCCId, int argContId, int argRevId,int argWoRegId,string argDBName)
        {
            string sSql = "";
            SqlConnection conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();
            SqlCommand cmd = null;
            DataTable dt = new DataTable();            

            try
            {
               
                //SqlDataReader dr;
                CommFun.ActualCompUpdate(BillRegId, iCCId, "B", false, argRevId, argContId,argDBName,conn, tran,"I");

                //sSql = "Select DPERegisterId from  BillDPETrans Where BillRegisterId = " + BillRegId;
                //cmd = new SqlCommand(sSql, conn, tran);
                //dr = cmd.ExecuteReader();
                //dt = new DataTable();
                //dt.Load(dr);
                //dr.Close();
                //cmd.Dispose();
                //for (int j = 0; j < dt.Rows.Count;j++)
                //{
                //    CommFun.ActualCompUpdate(Convert.ToInt32(dt.Rows[j]["DPERegisterId"].ToString()), iCCId, "D", true, argRevId, argContId,argDBName,conn, tran);
                //}

                sSql = "Update DPERegister Set ConvertBill=0 Where DPERegisterID in " +
                    "(Select DPERegisterId from BillDPETrans Where BillRegisterId =  " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn,tran);
                cmd.ExecuteNonQuery();


                sSql = "Update LabourStrengthMaster Set ConvertBill=0 Where LabourStrengthId in " +
                  "(Select LabourStrengthId from BillLSTrans Where BillRegisterId =  " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillLSWBSTrans Where BillRegisterId = " + BillRegId + "";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                //LabourAdvAdjustment
                sSql = "Delete from LabourAdvAdjustment Where BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillMaterialAdvanceTrans Where BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillVATTrans Where BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                //AdvAdjustment
                sSql = "Delete from AdvAdjustment Where BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillRetentionAdjustment Where AdjBillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillMLabourTrans Where BillRegisterId = " + BillRegId + "";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillLabourType Where BillRegisterId = " + BillRegId + "";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillResRate_Q Where BillTransID in (Select BillTransId from BillTrans Where BillRegisterId = " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn, tran); cmd.ExecuteNonQuery(); cmd.Dispose(); 

                sSql = "Delete from BillResourceTrans Where BillTransID in (Select BillTransId from BillTrans Where BillRegisterId = " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn, tran); cmd.ExecuteNonQuery(); cmd.Dispose(); 


                //BillLabourAdvance

                sSql = "Delete from BillLabourAdvance Where BillRegisterId = " + BillRegId + "";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillDPETrans Where BillRegisterId = " + BillRegId + "";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();


                sSql = "Delete from BillLabourTypeWBSLSTrans Where BillLSWBSTransId in (Select BillLSWBSTransId from BillLabourTypeWBSTrans Where BillLabourTypeTransId in(Select BillLabourTypeTransId from  BillLabourTypeTrans Where BillRegisterId = " + BillRegId + "))";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();


                sSql = "Delete from BillLabourTypeWBSLSTrans Where BillLabourTypeTransId in(Select BillLabourTypeTransId from  BillLabourTypeTrans Where BillRegisterId = " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillLabourTypeWBSTrans Where BillLabourTypeTransId in(Select BillLabourTypeTransId from  BillLabourTypeTrans Where BillRegisterId = " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillLabourTypeTrans Where BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();


                sSql = "Delete from BillLSTrans Where BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillLabourTrans Where BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillMSteelSelection Where " +
                   "BillTransId in (Select BillTransID from BillTrans Where BillRegisterId  = " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillMeasurement Where " +
                    "BillTransId in (Select BillTransID from BillTrans Where BillRegisterId  = " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                //BillIOWLabourTrans
                sSql = "DELETE FROM BillIOWLabourTrans WHERE " +
                    "BillTransId IN (SELECT BillTransID FROM BillTrans WHERE BillRegisterId = " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                
                //BillItemLabourTrans

                sSql = "DELETE FROM BillItemLabourTrans WHERE " +
                    "BillTransId IN (SELECT BillTransID FROM BillTrans WHERE BillRegisterId = " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "DELETE FROM BillWBSLabourTrans WHERE " +
                   "BillTransId IN (SELECT BillTransID FROM BillTrans WHERE BillRegisterId = " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillIOWTrans Where " +
                    "BillTransId in (Select BillTransID from BillTrans Where BillRegisterId = " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                //
                sSql = "Delete from BillLbrResourceTrans Where " +
                    "BillTransId in (Select BillTransID from BillTrans Where BillRegisterId = " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillWBSTrans Where " +
                   "BillTransId in (Select BillTransID from BillTrans Where BillRegisterId = " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillTurnKeyIOWTrans Where AnalTransId in " + 
                    "(Select AnalTransId from BillTurnKeyTrans Where BillRegisterId = " + BillRegId + ")";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillTurnKeyTrans " +
                    "Where BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillTrans Where BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "DELETE FROM BillServiceTaxTrans WHERE BillRegId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "DELETE FROM TDSBillFormatTrans WHERE BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                //

                decimal dBMQty=0;
                
                sSql = "Select  Qty from BillMaterialRecovery Where IssueId<>0 and BillRegId = " + BillRegId;   
                cmd = new SqlCommand(sSql, conn, tran);
                dBMQty = Convert.ToDecimal(cmd.ExecuteScalar());
                cmd.ExecuteNonQuery();

                sSql = "Update [" + BsfGlobal.g_sMMSDBName + "].dbo.IssueTrans set RecQty=RecQty-" + dBMQty + " " + 
                    "where IssueTransId In (Select IssueId from BillMaterialRecovery Where IssueId<>0 and BillRegId = " + BillRegId + ") ";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                

                sSql = "Delete from BillMaterialRecovery Where BillRegId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from LabourBillTrans Where BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                //
                sSql = "Delete from BillRateQ Where BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillFormatTrans Where BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                int bRegId = BillRegId;

                sSql = "Delete from BillRegister Where BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                sSql = "Delete from BillTypeTrans Where BillRegisterId = " + BillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                //
                sSql = "Update BillRegister Set CurrentBill='Y' Where BillRegisterId = (Select " +
                    "Max(BillRegisterId) from BillRegister Where CostCentreId = " + iCCId + " and " +
                    "ContractorId = " + argContId + ")";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();

                //int iRefAccId = GetAccBillRegId(BillRegId);

                //sSql = "Delete from [" + BsfGlobal.g_sFaDBName + "].dbo.BillRegister where ReferenceID=" + bRegId + " And RefType='WB'";
                //cmd = new SqlCommand(sSql, conn, tran);
                //cmd.ExecuteNonQuery();

                //if (CommFun.sCompDBName != null)
                //{
                //    sSql = "Delete from [" + CommFun.sCompDBName + "].dbo.ENtryTrans where RefId=" + iRefAccId + " And RefType='WB'";
                //    cmd = new SqlCommand(sSql, conn, tran);
                //    cmd.ExecuteNonQuery();
                //}

                //BillQty Update in WOTrans Table

                if (argWoRegId != 0)
                    CommFun.RefreshWOBilledQty(argWoRegId, conn, tran);

                tran.Commit();                

            }
            catch (Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
        }

        public decimal ChekAmtPaid(int argBRegId)
        {
            decimal dPaidAmt = 0;           
            BsfGlobal.OpenWPMDB();
            SqlCommand Command = null;
            string sSql = "";

            try
            {
                sSql = "Select PaidAmount from [" + BsfGlobal.g_sFaDBName + "].dbo.BillRegister  " + 
                    "where ReferenceID=" + argBRegId + " And PaidAmount=0";
                Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dPaidAmt = Convert.ToDecimal(CommFun.IsNullCheck(Command.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                Command.Dispose();                
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dPaidAmt;
        }

        public string DisplayAnalysisHead(int argAHeadID)
        {
            string analysHead = "";
            SqlConnection conn;
            conn = new SqlConnection();
            SqlCommand Command;
            string sSql = "";
            conn = BsfGlobal.OpenWPMDB();
       
            try
            {
                sSql = "Select Analysis_Head_Name From [" +  BsfGlobal.g_sRateAnalDBName + "].dbo.Analysis_Heads Where Analysis_Head_ID = " + argAHeadID + "";
                Command = new SqlCommand(sSql, conn);
                analysHead = Convert.ToString(CommFun.IsNullCheck(Command.ExecuteScalar(),CommFun.datatypes.vartypestring));

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
              conn.Close();
            }
            return analysHead;
        }

        public void GetBillIOWTrans(int argBillRegId, string argBillType, string argSplit,int argRevId,string argDBName)
        {
            DataTable dt = new DataTable();
            BsfGlobal.OpenWPMDB();
            string sSql = "";
            SqlCommand cmd = null;
            

            try
            {                
                sSql = "Truncate Table TmpIOWWOSpec ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "Insert into TmpIOWWOSpec(IOW_ID,SerialNo,Specification,AnalysisName,BTransCompId) " +
                    "Select isnull(A.IOW_ID,0)IOW_ID,isnull(C.New_Serial_No,'') Code,isnull(C.Specification,'') Specification,isnull('',A1.AnalysisHeadName) AnalysisHeadName,0 as BTransCompId from  BillTrans A " +
                  "Left Join [" + argDBName + "].dbo.Project_IOW B on A.IOW_ID=B.Project_IOW_ID " +
                  "Left Join [" + argDBName + "].dbo.IOW C on C.IOW_Trans_ID=B.Project_IOW_ID " +
                  "Left Join [" + argDBName + "].dbo.AnalysisIOW B1 on B1.IOW_Trans_ID in(Select IOW_Trans_Id from [" + argDBName + "].dbo.IOW where ProjIOWID=B.IOW_ID) and B1.Revision_ID=" + argRevId + " " +
                  "Left Join [" + argDBName + "].dbo.AnalysisHeads A1 on A1.AnalysisID=A.AnalysisHeadId " +
                  "Where A.BillRegisterId=" + argBillRegId;

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
        }

        public void GetBillTrans(int argBillRegId, string argBillType, string argSplit, ArrayList argBType, int argRevId,string argDBName)
        {
            DataTable dt = new DataTable();
            BsfGlobal.OpenWPMDB();
            string sSql = "";
            SqlCommand cmd = null;

            try
            {
                sSql = "Truncate Table TmpCompWOSpec ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "Truncate Table TmpIOWWOSpec ";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();


                //sSql = "Select Distinct A.Comp_ID,B.ServiceCode,B.ServiceName from BillTrans A " +
                //    "Inner Join [" + BsfGlobal.g_sVendorDBName + "].dbo.ServiceMaster B on A.Comp_ID=B.ServiceId " +
                //    "Where A.BillRegisterId= " + argBillRegId;
                //da=new SqlDataAdapter(sSql,BsfGlobal.g_WPMDB);
                //da.Fill(dt);
                //da.Dispose();
                //if (dt.Rows.Count > 0)
                //{
                //    sSql = "Insert into TmpCompWOSpec(Comp_ID,Code,ComponentName) " +
                //              "Select Distinct A.Comp_ID,B.ServiceCode,B.ServiceName from BillTrans A " +
                //              "Inner Join [" + BsfGlobal.g_sVendorDBName + "].dbo.ServiceMaster B on A.Comp_ID=B.ServiceId " +
                //              "Where A.BillRegisterId= " + argBillRegId;
                //    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                //    cmd.ExecuteNonQuery();
                //    cmd.Dispose();
                //}
                if (argBillType == "A" || argBillType == "L" || argBillType == "I")
                {
                    if (argBillType == "A" || argBillType == "L")
                    {
                        sSql = "Insert into TmpCompWOSpec(Comp_ID,Code,ComponentName) " +
                            "Select Distinct A.Comp_ID,B.Resource_Code,B.Resource_Name from BillTrans A " +
                            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.Comp_ID=B.Resource_ID  and B.TypeId in(1,4,3)" +
                            "Where A.BillRegisterId= " + argBillRegId;
                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();


                        sSql = "Insert into TmpIOWWOSpec(IOW_ID,SerialNo,Specification,AnalysisName,BTransCompId) " +
                            "Select Distinct A.IOW_ID,C.New_Serial_No,C.Specification,isnull('',D.AnalysisHeadName) AnalysisHeadName,B.Comp_Id from BillIOWTrans A " +
                            "Inner Join BillTrans B on A.BillTransId = B.BillTransID " +
                            "Inner Join [" + argDBName + "].dbo.IOW C on A.IOW_ID=C.IOW_ID and C.Revision_Id=" + argRevId + " " +
                            "Left Join [" + argDBName + "].dbo.AnalysisHeads D ON A.AnalysisHeadId=D.AnalysisId " +
                            "Where B.BillRegisterId= " + argBillRegId;

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                    }
                    else if (argBillType == "I")
                    {
                        sSql = "Insert into TmpCompWOSpec(Comp_ID,Code,ComponentName) " +
                           "Select Distinct A.IOW_ID,C.New_Serial_No,C.Specification from BillTrans A " +
                            "Inner Join [" + argDBName + "].dbo.IOW C on A.IOW_ID=C.ProjIOWID and C.Revision_Id=" + argRevId + " " +
                           "Where A.BillRegisterId= " + argBillRegId;
                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();


                        sSql = "Insert into TmpIOWWOSpec(IOW_ID,SerialNo,Specification,AnalysisName) " +
                            "Select Distinct C.Analysis_Id,C.New_Serial_No,'',isnull('',D.AnalysisHeadName) AnalysisHeadName from BillWBSTrans A " +
                            "Inner Join BillTrans B on A.BillTransId = B.BillTransID " +
                            "Inner Join [" + argDBName + "].dbo.AnalysisIOW C on A.AnalysisId=C.Analysis_Id and C.Revision_Id=" + argRevId + " " +
                            "Left Join [" + argDBName + "].dbo.AnalysisHeads D ON C.Analysis_Id=D.AnalysisId " +
                            "Where B.BillRegisterId= " + argBillRegId;

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                    }
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
        }

        public void GetBillMatreialTrans(int argBillRegId)
        {
            SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();
            string sSql = "";
            SqlCommand cmd = null;

            try
            {
                sSql = "Truncate Table TmpCompMatSpec ";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "Insert into TmpCompMatSpec(Comp_ID,Code,ComponentName) " +
                         "Select Distinct A.Comp_ID,B.Resource_Code,B.Resource_Name from BillMaterialRecovery A " +
                         "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.Comp_ID=B.Resource_ID  and B.TypeId=2" +
                         "Where A.BillRegId= " + argBillRegId ;

                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                tran.Commit();


            }
            catch (Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }

        }

        public void GetBillServiceTrans(int argBillRegId)
        {
            SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();
            string sSql = "";
            SqlCommand cmd = null;

            try
            {
                sSql = "Truncate Table TmpCompWOSpec ";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();
                
                sSql = "Insert into TmpCompWOSpec(Comp_ID,Code,ComponentName) " +
                        "Select Distinct A.Comp_ID,B.ServiceCode,B.ServiceName from BillTrans A " +
                        "Inner Join [" + BsfGlobal.g_sVendorDBName + "].dbo.ServiceMaster B on A.Comp_ID=B.ServiceId " +
                        "Where A.BillRegisterId= " + argBillRegId + " and Billtype = 'R' ";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                tran.Commit();

            }
            catch (Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
           
        }

        public void GetBillLbrTypeTrans(int argBillRegId,string argDBName)
        {
             SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();
            string sSql = "";
            SqlCommand cmd = null;
            try
            {
                sSql = "Truncate Table TmpLabourTypeTrans ";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();


                sSql = "Insert into TmpLabourTypeTrans (TypeName,CurQty,CurRate,CurAmount,TypeId,AnalysisHead,AnalysisHeadId,LabourTypeID)" +
                    " select B.Resource_Name,A.Qty,A.Rate,A.Amount,A.TypeId,isnull('',C.AnalysisHeadName) AnalysisHeadName,A.AnalysisHeadId,A.LabourTypeId From BillLabourType A " +
                    " Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B ON A.LabourTypeId=B.Resource_Id and B.TypeId=1 " +
                    " Left  Join [" + argDBName + "].dbo.AnalysisHeads C ON A.AnalysisHeadId=C.AnalysisId " +
                    " Where A.BillRegisterId =" + argBillRegId;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                tran.Commit();
            }
            catch(Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
        }

        public void GetBillLbrTrans(int argBillRegId)
        {
            SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();
            string sSql = "";
            SqlCommand cmd = null;

            try
            {
                sSql = "Truncate Table TempLabourTrans ";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();



                sSql = "Insert into TempLabourTrans(TypeName,Qty,Rate,Amount) " +
                        "Select B.Resource_Name,A.Qty,A.Rate,A.Amount from BillLabourTrans A " +
                        "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId=B.Resource_ID  and B.TypeId in(1)" +
                        "Where A.BillRegisterId= " + argBillRegId ;

                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                tran.Commit();


            }
            catch (Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }

        }

        public DataTable GetIOWMeasurmentTrans(int argBillTransId, int argIOWId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sql = "";

            try
            {
                sql = "Select * from BillMeasurement Where BillTransId="+argBillTransId+" and IOWId="+argIOWId;
                sda = new SqlDataAdapter(sql, BsfGlobal.OpenWPMDB());
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable GetBillLbrItemTrans(int argBillTransId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sql = "";

            try
            {
                sql = "Select B.Resource_Code LbrItemCode,B.Resource_Name LbrItemName,A.Qty,A.Rate,A.Amount from BillItemLabourTrans A  " +
                    "Inner Join ["+BsfGlobal.g_sRateAnalDBName+"].dbo.Resource B on A.LabourTypeId=B.Resource_Id " +
                        "Where BillTransId=" + argBillTransId ;
                sda = new SqlDataAdapter(sql, BsfGlobal.OpenWPMDB());
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable GetBillIOWDetails(int argBillTransId,int argRevId,int argResourceId,string argSplit,string argDBName)
        {
            SqlDataAdapter da;
            DataTable dt = null;
            BsfGlobal.OpenWPMDB();            
            string sSql = "";
            try
            {
                if (argSplit != "Y")
                {

                    sSql = "Select A.Project_IOW_ID IOW_ID,A.RefSerialNo,A.Specification,C.Unit_Name UOM_ID, 0 as Analysis_Head_ID,0 as DPEIOWTransID,0 as DPETransID,Cast(0 as Decimal(18,3)) Qty, 0 as MType,Cast(0 as Decimal(18,3)) CumQty,Cast(0 as Decimal(18,3)) PrevQtty,'' as MUpdate,'' as MUOM_ID, Cast(0 as Decimal(18,3)) UFactor from [" + argDBName + "].dbo.Project_IOW A " +
                            "Inner Join [" + argDBName + "].dbo.IOW B on A.Project_IOW_ID=B.ProjIOWID and B.Revision_ID=" + argRevId + " " +
                            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on A.Unit_Id=C.Unit_ID " +
                            "Where Project_IOW_ID in(Select B1.ProjIOWID from [" + argDBName + "].dbo.Project_Details A1 " +
                            "Inner Join [" + argDBName + "].dbo.IOW B1 on A1.IOW_Trans_ID=B1.IOW_Trans_ID Where A1.Resource_ID=" + argResourceId + ")";
                }
                else
                {
                    sSql = "Select B.ProjIOWID IOW_ID ,B.New_Serial_No RefSerialNo,B.Specification,C.Unit_Name UOM_ID,A.Analysis_ID Analysis_Head_ID,0 as DPEIOWTransID,0 as DPETransID,Cast(0 as Decimal(18,3)) Qty, 0 as MType,Cast(0 as Decimal(18,3)) CumQty,Cast(0 as Decimal(18,3)) PrevQtty,'' as MUpdate,'' as MUOM_ID, Cast(0 as Decimal(18,3)) UFactor from [" + argDBName + "].dbo.AnalysisIOW A " +
                           "Inner Join [" + argDBName + "].dbo.IOW B on A.IOW_Trans_ID=B.IOW_Trans_ID " +
                           "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on B.Unit_Id=C.Unit_ID " +
                           "Where B.ProjIOWID in(Select B1.ProjIOWID from [" + argDBName + "].dbo.Project_Details A1 " +
                           "Inner Join [" + argDBName + "].dbo.IOW B1 on A1.IOW_Trans_ID=B1.IOW_Trans_ID Where A1.Resource_ID=" + argResourceId + ") " +
                           "and A.Revision_ID=" + argRevId + "";
                }
                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                da.Fill(dt);
                da.Dispose();
                
            }
            catch (Exception ex)
            {

                 BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        public int GetIOWID(int argS1, int argS2, int argS3, int argS4, int argS5)
        {
            int GetIOWID = 0;
            SqlConnection conn;
            conn = new SqlConnection();
            SqlCommand Command;
            string sSql = "";
            conn = BsfGlobal.OpenWPMDB();
      
            try
            {
                sSql = "Select IOW_ID from [" +  BsfGlobal.g_sRateAnalDBName + "].dbo.IOW Where isnull(S1,0) = " + argS1 + " and isnull(S2,0) =" + argS2 + " and isnull(S3,0) =" + argS3 + " and  isnull(S4,0) =" + argS4 + " and isnull(S5,0) =" + argS5 + " and iow<>'y'";
                Command = new SqlCommand(sSql, conn);
                GetIOWID = Convert.ToInt32(CommFun.IsNullCheck(Command.ExecuteScalar(),CommFun.datatypes.vartypenumeric));
                Command.Dispose();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
               conn.Close();
            }
            return GetIOWID;
        }

        public bool CheckTmpIOW(int argIOWID)
        {
            bool CheckTmpIOW = false;
            SqlConnection conn;
            conn = new SqlConnection();
            SqlCommand Command;
            string sSql = "";
            conn = BsfGlobal.OpenWPMDB();
         
            try
            {
                sSql = "Select IOW_ID From TmpIOWDetails Where IOW_ID=" + argIOWID + "";
                Command = new SqlCommand(sSql, conn);
                CheckTmpIOW = Convert.ToBoolean(CommFun.IsNullCheck(Command.ExecuteScalar(),CommFun.datatypes.varTypeBoolean));
                Command.Dispose();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
            return CheckTmpIOW;
        }

        public DataTable GetBillType(int argBillRegId)
        {
            SqlDataAdapter sda;
            //SqlCommand cmd;
            DataTable dt = null;
            BsfGlobal.OpenWPMDB();
            string sql = "";

            try
            {
                sql = "select BillType from BillRegister Where BillRegisterId = " + argBillRegId + "";
                sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);

                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        public void DeleteBillFormatMaster(int argTypeId)
        {            
            BsfGlobal.OpenWPMDB();
            string sSql = "";

            try
            {
                //if (argfrmwhr == "B")
                //{
                    sSql = "Delete from BillFormatMaster where TypeID=" + argTypeId + "";
                //}
                //else
                //{
                //    sSql = "Delete from LabourFormat where TypeID=" + argTypeId + "";
                //}
                SqlCommand Command = new SqlCommand(sSql,BsfGlobal.g_WPMDB);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();               
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
           
        }

        public int DeleteBillFormat(int argTypeId,int argCCId)
        {
            int retunVal = 0;
            BsfGlobal.OpenWPMDB();
            string sSql = "";           

            try
            {
                //if (argfrm=="B")
                    sSql = "DELETE from BillFormat WHERE TypeId=" + argTypeId + " AND CostCentreId = " + argCCId + " ";
                //else
                //    sSql = "DELETE from LabourFormatTrans WHERE CostCentreId = " + argCCId + " AND  TypeId=" + argTypeId;

                SqlCommand Command = new SqlCommand(sSql,BsfGlobal.g_WPMDB);
                retunVal = Convert.ToInt32(CommFun.IsNullCheck(Command.ExecuteNonQuery(),CommFun.datatypes.vartypenumeric));
                Command.Dispose();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return retunVal;
        }

        public string GetSplit(int argRevId,string argDBName)
        {
            string GetSplit = "";
            SqlDataAdapter sda;
            string sSql = "";
            DataTable dt = new DataTable();
            BsfGlobal.OpenWPMDB();

            try
            {
                //sSql = "SELECT WBSReqd from [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre Where CostCentreId = " + argCostCentreId+"";
                sSql = "SELECT IOW_Trans_ID from [" + argDBName + "].dbo.AnalysisIOW Where Revision_ID=" + argRevId + "";
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                sda.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    GetSplit = "Y";
                }
                else
                {
                    GetSplit = "N";
                }
                sda.Dispose();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return GetSplit;
        }


        public string GetLSSplit(int argCCId)
        {
            string GetSplit = "";

            SqlConnection conn;
            conn = new SqlConnection();
            SqlCommand Command;
            string sSql = "";
            conn = BsfGlobal.OpenWPMDB();
            

            try
            {
                sSql = "SELECT WBSReqd from [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre Where CostCentreId = " + argCCId + "";
                Command = new SqlCommand(sSql, conn);
                if (Convert.ToString(Command.ExecuteScalar()) == "False")
                {
                    GetSplit = "N";
                }
                else
                {
                    GetSplit = "Y";
                }
                Command.Dispose();
               
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }           
            finally
            {
                conn.Close();
            }
            return GetSplit;
        }

        public DataTable GetBillList(DateTime frmDate, DateTime toDate, int argOption, string argBillType,int argCCId,int argContId,int argCompId)
        {
            SqlDataAdapter sda;
            SqlCommand cmd = null;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";
            string frmdat = string.Format("{0:dd MMM yyyy}", frmDate);
            string tdat = string.Format("{0:dd MMM yyyy}", toDate.AddDays(1));


            sSql = "Update BillRegister Set BillRegister.BillType=BillTypeTrans.BillType " +
                   "From BillTypeTrans " +
                   "Where BillRegister.BillRegisterId=BillTypeTrans.BillRegisterId";
            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            cmd.ExecuteNonQuery(); cmd.Dispose();
            
            try
            {
                sSql = "SELECT distinct Case When A.BillType='A' Then 'Activity' when A.BillType='L' then 'Labour' when A.BillType='I' then 'IOW' when A.BillType='S' then 'Sub-IOW' when A.BillType='T' then 'TurnKey' else (case when A.FormatType='A' then 'Advance' else 'Bill' end) end BillType,A.BillRegisterID, " +
                    "A.EDate [Bill Date],A.BillNo,A.VNo [BV No],A.CCBVNo,A.CompanyBVNo,B.VendorId,B.VendorName,C.CostCentreName,A.BillType BillType2, A.BillAmount,A.Narration,A.CurrentBill, " +
                    "A.CostCentreID,A.ContractorId,A.Freeze,D.HO, " +
                    "A.BillUpdateType,A.WORegisterId,E.CompanyId,E.CompanyName,A.KeyNo,case when A.FormatType='A' then 'Advance' else 'Bill' end Type,A.Ready," +
                    "CASE WHEN  A.Approve = 'Y' Then 'Yes' WHEN  A.Approve='P' THEN 'Partial' Else 'No' END  App,case when A.KeyNo=0 Then 'No' Else 'Yes'  End as UpdateFA  " +
                    "FROM BillRegister A " +
                   "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster B on A.ContractorId = B.VendorId " +
                   "Inner join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre C On A.CostCentreId=C.CostCentreId " +
                   "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CostCentre D on C.FACostCentreId=D.CostCentreId " +
                   "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CompanyMaster E on C.CompanyId=E.CompanyId ";                   
                   //"Left Join BillLabourAdvance G on  A.BillRegisterId=G.BillRegisterId " + 
                   //"Left Join LabourMaster H on  G.LabourId=H.LabourId " +

                if (BsfGlobal.g_bPowerUser == false)
                {
                    sSql = sSql + " Where A.CostCentreId Not In (SELECT CostCentreId FROM [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.UserCostCentreTrans WHERE UserId=" + BsfGlobal.g_lUserId + ") And A.EDate between '" + frmdat + "'  And '" + tdat + "' ";
                }
                else
                {
                    sSql= sSql + " Where A.EDate between '" + frmdat + "'  And '" + tdat + "' ";                    
                }

                string sType = "'',";
                
                if (BsfGlobal.FindPermission("Allow-WorkBill-Labour-Type") == true) { sType = sType + "'L'" + ","; }
                if (BsfGlobal.FindPermission("Allow-WorkBill-Activity-Type") == true) { sType = sType + "'A'" + ","; }
                if (BsfGlobal.FindPermission("Allow-WorkBill-IOW-Type") == true) { sType = sType + "'I'" + ","; }
                if (BsfGlobal.FindPermission("Allow-WorkBill-SubIOW-Type") == true) { sType = sType + "'S'" + ","; }
                if (BsfGlobal.FindPermission("Allow-WorkBill-TurnKey-Type") == true) { sType = sType + "'T'" + ","; }

                if (sType != "")
                {
                    sType = sType.TrimEnd(',');

                    sSql = sSql + " and A.BillType in(" + sType + ")";
                }


                if (argOption != 0)
                {
                    if (argOption == 1)
                        sSql = sSql + "And A.Approve='Yes'";
                    if (argOption == 2)
                        sSql = sSql + "And A.Approve='No'";
                    if (argOption == 3)
                        sSql = sSql + "And A.UpdateFA='True'";
                    if (argOption == 4)
                        sSql = sSql + "And A.UpdateFA='False'";
                    if (argBillType == "B")
                        sSql = sSql + "And A.BillUpdateType='B'";
                    if (argBillType == "L")
                        sSql = sSql + "And A.BillUpdateType='L'";
                }

                if (argCCId != 0)
                    sSql = sSql + " and A.CostCentreId=" + argCCId;
                if (argContId != 0)
                    sSql = sSql + " and  A.ContractorId=" + argContId;
                if (argCompId != 0)
                    sSql = sSql + " and  E.CompanyId=" + argCompId;

                sSql = sSql + " Order by A.EDate Asc";

                //sSql = sSql + " Order by A.EDate,A.BillNo,A.BillRegisterId ";

                sda = new SqlDataAdapter(sSql,BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable GetBillRegValue(int argRegId)
        {
            SqlDataAdapter sda;
            // SqlCommand cmd;
            DataTable dt = new DataTable();

            try
            {

                string sql = "SELECT EDate [Bill Date],BillNo,VNo [BV No],CCBVNo,CompanyBVNo, BillAmount,Narration,BillUpdateType,CASE WHEN  Approve = 'Y' Then 'Yes' WHEN  Approve='P' THEN 'Partial' Else 'No' END Approve FROM BillRegister " +
                             "Where BillRegisterId = " + argRegId;
                sda = new SqlDataAdapter(sql, BsfGlobal.OpenWPMDB());
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable GetMaterialAdvance(int argBillRegId)
        {

            DataTable dt = new DataTable();
            string sSql = "Select A.TypeId,A.ResourceId,B.Resource_Code Code,B.Resource_Name ResourceName,C.Unit_Name Unit,A.Qty,A.Rate,A.Amount,A.Per,A.AdvanceAmt from BillMaterialAdvanceTrans A " +
                          "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.ResourceId=B.Resource_Id " +
                          "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on B.Unit_Id=C.Unit_Id " +
                          "Where BillRegisterId = " + argBillRegId;
            BsfGlobal.OpenWPMDB();
            SqlDataAdapter da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
            da.Fill(dt);
            da.Dispose();
            BsfGlobal.g_WPMDB.Close();

            return dt;

        }

        public DataTable GetAdvance(int argBillRegId, int argCCId, int argContId, int argWOREgId)
        {
            DataTable dt = new DataTable();
            string sWORegId = "";
            BsfGlobal.OpenWPMDB();
            if (argWOREgId != 0) { sWORegId = CommFun.GetAmendWORegIdNew(argWOREgId, BsfGlobal.g_WPMDB); }

            string sSql = "";

            //MobAdvance

            sSql = "Select WORegisterId,0 RegId,WONo RefNo,WODate RefDate,AdvanceAmt TotAdvAmt,Cast(0 as Decimal(18,3)) DedAmount,Cast(0 as Decimal(18,3)) BAmount,Cast(0 as Decimal(18,3)) CAmount,Cast(0 as Decimal(18,3)) HAmount,'WO' BillType,12 FormatTypeId " +
                   "from WORegister Where AdvanceAmt <> 0 and Approve='Y' and CostCentreId= " + argCCId + " and ContractorId= " + argContId;
            if (sWORegId != "") { sSql = sSql + " and WORegisterId in (" + sWORegId + " )"; }
            sSql = sSql + " Union All Select 0 WORegisterId,A.BillRegisterId RegId,B.VNo RefNo,B.EDate RefDate,isnull(Sum(A.Amount),0) TotAdvAmt,Cast(0 as Decimal(18,3)) DedAmount,Cast(0 as Decimal(18,3)) BAmount,Cast(0 as Decimal(18,3)) CAmount,Cast(0 as Decimal(18,3)) HAmount,'Bill' BillType,12 FormatTypeId from BillFormatTrans A " +
                    "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                    "Inner Join BillFormatMaster C on A.TypeId=C.TypeID " +
                    "Where C.FormatTypeId=12 and C.AddType=1 and A.Add_Less_Flag='+' and B.Approve='Y' and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContId;
            if (sWORegId != "") { sSql = sSql + " and B.WORegisterId in (" + sWORegId + " )"; }
            sSql = sSql +  " Group by A.BillRegisterId,B.VNo,B.EDate";

            sSql = sSql + " Union All Select 0 WORegisterId,A.BillRegisterId RegId,B.VNo RefNo,B.EDate RefDate,isnull(Sum(A.Amount),0) TotAdvAmt,Cast(0 as Decimal(18,3)) DedAmount,Cast(0 as Decimal(18,3)) BAmount,Cast(0 as Decimal(18,3)) CAmount,Cast(0 as Decimal(18,3)) HAmount,'Bill' BillType,13 FormatTypeId from BillFormatTrans A " +
                    "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                    "Inner Join BillFormatMaster C on A.TypeId=C.TypeID " +
                    "Where C.FormatTypeId=13 and C.AddType=1 and A.Add_Less_Flag='+' and B.Approve='Y' and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContId;
            if (sWORegId != "") { sSql = sSql + " and B.WORegisterId in (" + sWORegId + " )"; }
            sSql = sSql + " Group by A.BillRegisterId,B.VNo,B.EDate";

            sSql = sSql + " Union All Select 0 WORegisterId,A.BillRegisterId RegId,B.VNo RefNo,B.EDate RefDate,isnull(Sum(A.Amount),0) TotAdvAmt,Cast(0 as Decimal(18,3)) DedAmount,Cast(0 as Decimal(18,3)) BAmount,Cast(0 as Decimal(18,3)) CAmount,Cast(0 as Decimal(18,3)) HAmount,'Bill' BillType,9 FormatTypeId from BillFormatTrans A " +
                    "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                    "Inner Join BillFormatMaster C on A.TypeId=C.TypeID " +
                    "Where C.FormatTypeId=9 and C.AddType=1 and A.Add_Less_Flag='+' and B.Approve='Y' and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContId;
            if (sWORegId != "") { sSql = sSql + " and B.WORegisterId in (" + sWORegId + " )"; }
            sSql = sSql + " Group by A.BillRegisterId,B.VNo,B.EDate";
            
            //sSql = "Select A.BillRegisterId,B.EDate,B.VNo,isnull(Sum(A.Amount),0) RecoveryAmount,  Cast(0 as Decimal(18,3)) ReleaseAmount,Cast(0 as Decimal(18,3)) Balance,Cast(0 as Decimal(18,3)) CurAmount,Cast(0 as Decimal(18,3)) PrevAmount,Convert(bit,0,1) Sel from BillFormatTrans A " +
            //        "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
            //        "Inner Join BillFormatMaster C on A.TypeId=C.TypeID " +
            //        "Where C.FormatTypeId=10 and C.AddType=0 and A.Add_Less_Flag='-' and B.Approve='Y' and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContId;
            //if (sWORegId != "") { sSql = sSql + " and B.WORegisterId in (" + sWORegId + " )"; }
            //sSql = sSql + " Group by A.BillRegisterId,B.Edate,B.VNo";

            SqlDataAdapter da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
            da.Fill(dt);
            da.Dispose();

            sSql = "Select A.WORegisterId,A.RegId,A.FormatTypeId,isnull(Sum(A.Amount),0) Amount from AdvAdjustment A " +
                   "Inner Join BillRegister B  on A.BillRegisterID =B.BillRegisterID " +
                   "Where B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContId;
            if (sWORegId != "") { sSql = sSql + " and B.WORegisterId in (" + sWORegId + " )"; }
            sSql = sSql + " Group by A.WORegisterId,A.RegId,A.FormatTypeId";
            da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
            DataTable dtT = new DataTable();
            da.Fill(dtT);
            da.Dispose();


            sSql = "Select WORegisterId,RegId,FormatTypeId,isnull(Sum(Amount),0) Amount from AdvAdjustment " +
                   "Where BillRegisterId = " + argBillRegId + " Group by WORegisterId,RegId,FormatTypeId";
            da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
            DataTable dtC = new DataTable();
            da.Fill(dtC);
            da.Dispose();


            int iBillRegId = 0;
            int iWORegId = 0;
            int iFormatTypeId = 0;
            DataView dv;
            DataView dvC;
            foreach (DataRow dRow in dt.Rows)
            {
                iWORegId = Convert.ToInt32(dRow["WORegisterId"]);
                iBillRegId = Convert.ToInt32(dRow["RegId"]);
                iFormatTypeId = Convert.ToInt32(dRow["FormatTypeId"]);

                dv = new DataView(dtT);
                if (iWORegId != 0)
                {
                    dv.RowFilter = "WORegisterId = " + iWORegId + " and FormatTypeId = " + iFormatTypeId;
                }
                else
                {
                    dv.RowFilter = "RegId = " + iBillRegId + " and FormatTypeId = " + iFormatTypeId;
                }
                if (dv.ToTable().Rows.Count > 0)
                {
                    dRow["DedAmount"] = Convert.ToDecimal(dv.ToTable().Rows[0]["Amount"]);
                }
                dv.Dispose();


                dRow["BAmount"] = Convert.ToDecimal(dRow["TotAdvAmt"]) - Convert.ToDecimal(dRow["DedAmount"]);

                dvC = new DataView(dtC);

                if (iWORegId != 0)
                {
                    dvC.RowFilter = "WORegisterId = " + iWORegId + " and FormatTypeId = " + iFormatTypeId; 
                }
                else
                {
                    dvC.RowFilter = "RegId = " + iBillRegId + " and FormatTypeId = " + iFormatTypeId;
                }
                if (dvC.ToTable().Rows.Count > 0)
                {
                    dRow["CAmount"] = Convert.ToDecimal(dvC.ToTable().Rows[0]["Amount"]);
                    dRow["HAmount"] = Convert.ToDecimal(dvC.ToTable().Rows[0]["Amount"]);
                }
                dvC.Dispose();
            }

            BsfGlobal.g_WPMDB.Close();

            DataTable dtAdvance = new DataTable();
            DataView dVM = new DataView(dt);
            dVM.RowFilter = "BAmount <>0  or CAmount <>0";
            dtAdvance = dVM.ToTable();

            return dtAdvance;
        }

        public DataTable GetRetentionRelease(int argBillRegId,int argCCId,int argContId,int argWOREgId)
        {
            DataTable dt = new DataTable();
            string sWORegId="";
            BsfGlobal.OpenWPMDB();
            if (argWOREgId != 0) { sWORegId = CommFun.GetAmendWORegIdNew(argWOREgId, BsfGlobal.g_WPMDB); }

            string sSql = "";

            sSql = "Select A.BillRegisterId,B.EDate,B.VNo,isnull(Sum(A.Amount),0) RecoveryAmount,  Cast(0 as Decimal(18,3)) ReleaseAmount,Cast(0 as Decimal(18,3)) Balance,Cast(0 as Decimal(18,3)) CurAmount,Cast(0 as Decimal(18,3)) PrevAmount,Convert(bit,0,1) Sel from BillFormatTrans A " +
                    "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                    "Inner Join BillFormatMaster C on A.TypeId=C.TypeID " +
                    "Where C.FormatTypeId=10 and C.AddType=0 and A.Add_Less_Flag='-' and B.Approve='Y' and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContId;
            if (sWORegId != "") { sSql = sSql + " and B.WORegisterId in (" + sWORegId + " )"; }
            sSql = sSql + " Group by A.BillRegisterId,B.Edate,B.VNo";

            //if (argBillRegId != 0)
            //{
            //    sSql = "Select A.BillRegisterId,B.EDate,B.VNo,isnull(Sum(A.Amount),0) RecoveryAmount,isnull(Sum(D.Amount),0) ReleaseAmount,isnull(Sum(A.Amount),0)-isnull(Sum(D.Amount),0) Balance,isnull(SUM(E.Amount),0) CurAmount,isnull(SUM(E.Amount),0) PrevAmount,Case When isnull(SUM(E.Amount),0) >0 then Convert(bit,1,1) else Convert(bit,0,1) end Sel from BillFormatTrans A " +
            //            "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
            //            "Inner Join BillFormatMaster C on A.TypeId=C.TypeID " +
            //            "Left Join (Select BillRegisterId,SUM(Amount) Amount from BillRetentionAdjustment group by BillRegisterId) D on A.BillRegisterId=D.BillRegisterId " +
            //            "Left Join (Select BillRegisterId,SUM(Amount) Amount from BillRetentionAdjustment Where AdjBillRegisterId=" + argBillRegId + " group by BillRegisterId) E on A.BillRegisterId=E.BillRegisterId " +
            //            "Where B.Approve='Y' and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContId;
            //    if (sWORegId != "") { sSql = sSql + " and B.WORegisterId in (" + sWORegId + " )"; }
            //    sSql = sSql + " Group by A.BillRegisterId,B.Edate,B.VNo";
            //}
            //else
            //{
            //    sSql = "Select A.BillRegisterId,B.EDate,B.VNo,isnull(Sum(A.Amount),0) RecoveryAmount,isnull(Sum(D.Amount),0) ReleaseAmount,isnull(Sum(A.Amount),0)-isnull(Sum(D.Amount),0) Balance,Cast(0 as Decimal(18,3)) CurAmount,Cast(0 as Decimal(18,3)) PrevAmount,Convert(bit,0,1) Sel   from BillFormatTrans A " +
            //            "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
            //            "Inner Join BillFormatMaster C on A.TypeId=C.TypeID " +
            //            "Left Join (Select BillRegisterId,SUM(Amount) Amount from BillRetentionAdjustment group by BillRegisterId) D on A.BillRegisterId=D.BillRegisterId " +
            //            "Where B.Approve='Y' and B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContId;
            //    if (sWORegId != "") { sSql = sSql + " and B.WORegisterId in (" + sWORegId + " )"; }
            //    sSql = sSql + " Group by A.BillRegisterId,B.Edate,B.VNo";
            //}

            SqlDataAdapter da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
            da.Fill(dt);
            da.Dispose();

            sSql = "Select A.BillRegisterId,isnull(Sum(A.Amount),0) Amount from BillRetentionAdjustment A " +
                   "Inner Join BillRegister B  on A.AdjBillRegisterId =B.BillRegisterID " +
                   "Where B.CostCentreId = " + argCCId + " and B.ContractorId = " + argContId;
            if (sWORegId != "") { sSql = sSql + " and WORegisterId in (" + sWORegId + " )"; }
            sSql = sSql + " Group by A.BillRegisterId";
            da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
            DataTable dtT = new DataTable();
            da.Fill(dtT);
            da.Dispose();


            sSql = "Select BillRegisterId,isnull(Sum(Amount),0) Amount from BillRetentionAdjustment " +
                   "Where AdjBillRegisterId = " + argBillRegId + " Group by BillRegisterId";
            da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
            DataTable dtC = new DataTable();
            da.Fill(dtC);
            da.Dispose();


            int iBillRegId = 0;
            DataView dv;
            DataView dvC;
            foreach (DataRow dRow in dt.Rows)
            {
                iBillRegId = Convert.ToInt32(dRow["BillRegisterId"]);
                dv = new DataView(dtT);
                dv.RowFilter = "BillRegisterId = " + iBillRegId;
                if (dv.ToTable().Rows.Count > 0)
                {
                    dRow["ReleaseAmount"] = Convert.ToDecimal(dv.ToTable().Rows[0]["Amount"]);
                }
                dv.Dispose();


                dRow["Balance"] = Convert.ToDecimal(dRow["RecoveryAmount"]) - Convert.ToDecimal(dRow["ReleaseAmount"]);

                dvC = new DataView(dtC);
                dvC.RowFilter = "BillRegisterId = " + iBillRegId;
                if (dvC.ToTable().Rows.Count > 0)
                {
                    dRow["CurAmount"] = Convert.ToDecimal(dvC.ToTable().Rows[0]["Amount"]);
                    dRow["PrevAmount"] = Convert.ToDecimal(dvC.ToTable().Rows[0]["Amount"]);
                    dRow["Sel"] = true;
                }
                dvC.Dispose();
            }

            BsfGlobal.g_WPMDB.Close();

            DataTable dtRetention = new DataTable();
            DataView dVM = new DataView(dt);
            dVM.RowFilter = "Balance <>0  or CurAmount <>0";
            dtRetention = dVM.ToTable();

            return dtRetention;
        }


        public DataTable GetFormate(int argCCId,string argFType,int argContId,ref bool argAccountFound)
        {
            SqlDataAdapter sda;            
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            bool bAccountFound=true;
            try
            {
                if (argFType == "B")
                {
                    sSql = "SELECT A.TypeId,B.RefNo,B.TypeName,A.Formula,A.HeadingName, B.Header,A.Bold,B.AddType,B.OrderNo, " +
                            "Case When D.AccountId<>0 then D.AccountId else  B.AccountHeadId end AccountId, isnull(B.QualifierId,0) QualifierId, " +
                            "isnull(C.QualTypeId,0) QTypeId,isnull(C.QualMId,0) QualMId , " +
                            "Case When B.AddType='True' then 1 else 0 End as AddType,Cast(0 as Decimal(18,3)) Amount,Cast(0 as Decimal(18,3)) TaxPer,B.AccountTypeId,B.FormatTypeId   FROM BillFormat A  " +
                            "Inner JOIN BillFormatMaster B ON A.TypeId=B.TypeId   " +
                            "Left JOIN [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Qualifier_Temp C ON B.QualifierId=C.QualifierId " +
                            "Left Join (Select TypeId,AccountId from BillFormatTrans " +
                            "Where AccountId<>0 and BillRegisterId = (Select isnull(Max(BillRegisterId),0) BillRegisterId from BillRegister  " +
                            "Where CostCentreID=" + argCCId + " and ContractorID=" + argContId + " and FormatType='" + argFType + "')) D on A.TypeID=D.TypeId ";

                    if (argCCId != 0 && argFType == "B")
                    {
                        sSql = sSql + " WHERE A.CostCentreId =" + argCCId + " and A.FormatType='" + argFType + "' ";
                    }
                }

                else if (argFType == "A" || argFType == "R")
                {

                    sSql = "SELECT A.TypeId,A.RefNo,A.TypeName,'' Formula,A.HeadingName, A.Header,A.Bold,A.AddType,A.OrderNo, " +
                            "Case When D.AccountId<>0 then D.AccountId else  A.AccountHeadId end AccountId, isnull(A.QualifierId,0) QualifierId, " +
                            "isnull(C.QualTypeId,0) QTypeId,isnull(C.QualMId,0) QualMId , " +
                            "A.AddType,Cast(0 as Decimal(18,3)) Amount,Cast(0 as Decimal(18,3)) TaxPer,A.AccountTypeId,A.FormatTypeId FROM BillFormatMaster A  " +
                            "Left JOIN [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Qualifier_Temp C ON A.QualifierId=C.QualifierId " +
                            "Left Join (Select TypeId,AccountId from BillFormatTrans " +
                            "Where AccountId<>0 and BillRegisterId = (Select isnull(Max(BillRegisterId),0) BillRegisterId from BillRegister  " +
                            "Where CostCentreID=" + argCCId + " and ContractorID=" + argContId + " and FormatType='" + argFType + "')) D on A.TypeID=D.TypeId ";
                    if (argFType == "A")
                    {
                        sSql = sSql + " WHERE A.TypeId in (20,27) ";
                    }
                    else
                    {
                        sSql = sSql + " WHERE A.TypeId in (21,14,26,24) ";
                    }
                }
                sSql = sSql + " ORDER BY A.OrderNo";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();


                DataView dv = new DataView(dt);
                dv.RowFilter = "Header = 0 and AccountTypeId =0";
                if (dv.ToTable().Rows.Count > 0) { bAccountFound = false; }
                dv.Dispose();

                if (bAccountFound == true)
                {
                    dv = new DataView(dt);
                    dv.RowFilter = "Header = 0 and FormatTypeId in(5,8,6,7,11,18,15,17,14) and QualifierId=0";
                    if (dv.ToTable().Rows.Count > 0) { bAccountFound = false; }
                    dv.Dispose();
                }


            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            argAccountFound = bAccountFound;

            return dt;
        }



        public int GetMaxTypeId(SqlConnection argcnt,SqlTransaction argTrans)
        {
            int iTypeId = 0;
            string sSql = "Select MAX(TypeID) MTypeId from BillFormatMaster ";
            SqlCommand cmd = new SqlCommand(sSql, argcnt,argTrans);
            SqlDataReader dr = cmd.ExecuteReader();
            DataTable dt = new DataTable();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            if (dt.Rows.Count > 0) { iTypeId = Convert.ToInt32(dt.Rows[0]["MTypeId"]); }
            dt.Dispose();

            iTypeId = iTypeId + 1;

            return iTypeId;
        }

        public DataTable InsertBillFormat(int argQualId, int argQTypeId,string argQualName,int argAddType,int argCCId)
        {
            DataTable dt = new DataTable();
            SqlConnection conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();

            try
            {
                
                string sRefNo = "R0";

                int iTypeId = GetMaxTypeId(conn,tran);
                if (iTypeId != 0) { sRefNo = "R" + iTypeId.ToString().Trim(); }

                string sSql = "Insert into BillFormatMaster(TypeId,TypeName,Type,AddType,OrderNo,Header,RefNo,SysDefault,QTypeId,QualifierId) Values(" + iTypeId + ",'" + argQualName + "','Q'," + argAddType + "," + iTypeId + ",0,'" + sRefNo + "',0," + argQTypeId + "," + argQualId + ")";
                SqlCommand cmd = new SqlCommand(sSql, conn,tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                int iSId = GetMaxSortOrder(argCCId, conn,tran);

                sSql = "Insert Into BillFormat(TypeID,FormatType,Type,QTypeId,OrderNo,CostCentreId) Values(" + iTypeId + ",'B','Q'," + argQTypeId + "," + iSId + "," + argCCId + ")";
                cmd = new SqlCommand(sSql, conn,tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "SELECT A.TypeId,B.RefNo,B.TypeName,A.Formula,A.HeadingName, B.Header,B.Type,A.Bold,B.AddType,B.OrderNo, " +
                       "isnull(B.QualifierId,0) QualifierId, " +
                       "isnull(C.QualTypeId,0) QTypeId,isnull(C.QualMId,0) QualMId , " +
                       "Case When B.AddType='True' then 1 else 0 End as AddType,Cast(0 as Decimal(18,3)) Amount  FROM BillFormat A  " +
                       "Inner JOIN BillFormatMaster B ON A.TypeId=B.TypeId   " +
                       "Left JOIN [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Qualifier_Temp C ON B.QualifierId=C.QualifierId " +
                       "Where A.CostCentreId = " + argCCId + " and A.FormatType = 'B' and A.TypeId = " + iTypeId;
                cmd = new SqlCommand(sSql, conn,tran);
                SqlDataReader dr = cmd.ExecuteReader();
                dt = new DataTable();
                dt.Load(dr);
                dr.Close();
                cmd.Dispose();

                tran.Commit();

            }
            catch (Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }

            return dt;

        }


        public int GetMaxSortOrder(int argCCId,SqlConnection argcnt,SqlTransaction argTrans)
        {
            int iTypeId = 0;
            string sSql = "Select MAX(OrderNo) MTypeId from BillFormat Where CostCentreId= " + argCCId; 
            SqlCommand cmd = new SqlCommand(sSql, argcnt,argTrans);
            SqlDataReader dr = cmd.ExecuteReader();
            DataTable dt = new DataTable();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();
            if (dt.Rows.Count > 0) { iTypeId = Convert.ToInt32(dt.Rows[0]["MTypeId"]); }
            dt.Dispose();

            iTypeId = iTypeId + 1;

            return iTypeId;
        }



        public DataTable PopulateAccountInternal(bool argInternal)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            try
            {
                if (argInternal == true)
                {
                    sSql = "Select AccountId,AccountName from [" + BsfGlobal.g_sFaDBName + "].dbo.AccountMaster " +
                           "Where LastLevel='Y' AND  AccountId<>0 AND TypeId=36 order by AccountName,AccountId";
                }
                else 
                {
                    sSql = "Select AccountId,AccountName from [" + BsfGlobal.g_sFaDBName + "].dbo.AccountMaster  " + 
                           "Where LastLevel='Y' AND  AccountId<>0 AND TypeId=5 order by AccountName,AccountId";
                }
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable PopulateAccountName()
        {
            SqlDataAdapter sda;            
            DataTable dt = null;
            string sql = "";
            BsfGlobal.OpenWPMDB();
            try
            {                
                sql = "Select AccountId,AccountName,SectionId,TypeId,IsWOAdvance from [" + BsfGlobal.g_sFaDBName + "].dbo.AccountMaster " + 
                    "where LastLevel='Y' AND  AccountId<>0  order by AccountName,AccountId";

                sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable GetWBSMeasurementE(int argIOWID,int argBTransId,int argAheadId)
        {

            SqlDataAdapter sda;           
            DataTable dt = null;
            string sql = "";
             BsfGlobal.OpenWPMDB();
            try
            {
                sql = "Select * from BillMeasurement  " + 
                    "where IowId = " + argAheadId + " And BillTransId=" + argBTransId + " And BillIOWTransId=" + argIOWID + " And WBSWise='Y' ";

                sda = new SqlDataAdapter(sql,BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable GetSteel()
        {
            SqlDataAdapter sda;
            //SqlCommand cmd;
            DataTable dt = null;
            string sql = "";
            try
            {
                sql = "Select SteelId,SteelDescription,Factor from [" +  BsfGlobal.g_sRateAnalDBName + "].dbo.SteelDirectory ";
                sda = new SqlDataAdapter(sql, BsfGlobal.OpenWPMDB());
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                 BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        //public DataTable GetBillFormatTDS(int argTypeId,int argCCId)
        //{
        //    SqlDataAdapter sda;
        //    //SqlCommand cmd;
        //    DataTable dt = null;
        //    string sql = "";

        //    try
        //    {
        //        sql = "Select Formula,TDSPer,SurPer,EDPer from BillFormatTDS  " +
        //              "Where TypeId= " + argTypeId + " and CostCentreId = " + argCCId + "";

        //        sda = new SqlDataAdapter(sql, BsfGlobal.OpenWPMDB());
        //        dt = new DataTable();
        //        sda.Fill(dt);
        //        sda.Dispose();
             
        //    }
        //    catch (Exception ex)
        //    {
        //        BsfGlobal.CustomException(ex.Message, ex.StackTrace);
        //    }
        //    finally
        //    {
        //        BsfGlobal.g_WPMDB.Close();
        //    }

        //    return dt;
        //}

        public DataTable getBillIOWTranQtyEdit()
        {

            SqlDataAdapter sda;
            //SqlCommand cmd;
            DataTable dt = null;
            string sql = "";
            try
            {
                sql = "select BillIOWTransID,BillTransID,IOW_ID,Qty,AnalysisHeadId,ClaimType,MType,MUnitId,UFactor from BillIOWTrans";

                sda = new SqlDataAdapter(sql, BsfGlobal.OpenWPMDB());
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        public decimal GetIOWTRansQty(int resourceId, int argIOWID, int argAHeadID, int argCostId, string split,string argDBName)
        {
            decimal Qtty = 0;
            decimal Qty = 0;
            decimal dQty = 0;
            decimal GetIOWTRansQty = 0;            
            SqlCommand cmd;            
            string sql = "";
            BsfGlobal.OpenWPMDB();

            try
            {

                if (split != "Y")
                {
                    sql = "Select Qtty from [" + argDBName + "].dbo.Project_Details Where Resource_ID = " + resourceId + " and IOW_Trans_ID = " + argIOWID + "";
                    cmd = new SqlCommand(sql, BsfGlobal.g_WPMDB);
                    Qtty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                    cmd.Dispose();
                }
                else
                {
                    sql = "Select (Case When B.Qtty<>0 Then A.Qtty/B.Qtty*C.Qtty Else 0 End) as Qtty from [" + argDBName + "].dbo.Project_Details A " +
                        "Inner Join  [" + argDBName + "].dbo.Project_IOW B on A.IOW_ID=B.IOW_ID Inner Join [" + argDBName + "].dbo.PitProject_Analysis_Dtls C on A.IOW_ID=C.IOW_ID " +
                        "Where A.Comp_ID = " + resourceId + " And A.IOW_ID = " + argIOWID + " and C.Analysis_Head_ID = " + argAHeadID + "";

                    cmd = new SqlCommand(sql, BsfGlobal.g_WPMDB);
                    Qtty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                    cmd.Dispose();
                }
                GetIOWTRansQty = Qtty;

                sql = "Select Sum(Qty)as Qtty from WOIOWTrans Where IOW_ID= " + argIOWID + " and AnalysisHeadId = " + argAHeadID + " and WOTransID in " +
                         "(Select A.WOTransID from WOTRans A Inner Join WOREgister B on A.WORegisterID=B.WORegisterId " +
                         "Where A.Comp_ID = " + resourceId + " and B.CostCentreId = " + argCostId + ")";
                cmd = new SqlCommand(sql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    dQty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                }
                cmd.Dispose();

                dQty = Qtty;

                sql = "Select Sum((Case When B.Qtty<>0 then (A.Qtty/B.Qtty)*C.Qtty Else 0 End)) as Qty from [" + argDBName + "].dbo.Project_Details A " +
                        "Inner Join [" + argDBName + "].dbo.IOW B on A.IOW_Trans_ID=B.IOW_Trans_ID " +
                        "Inner Join WOTrans C on A.IOW_Trans_ID=C.IOW_ID " +
                        "Inner Join WORegister D on C.WORegisterId=D.WORegisterId " +
                        "Where A.Resource_ID = " + resourceId + " and A.IOW_Trans_ID = " + argIOWID + " And D.CostCentreId = " + argCostId + " and C.AnalysisHeadId = " + argAHeadID + "";

                cmd = new SqlCommand(sql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    Qty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                }
                cmd.Dispose();

                dQty = dQty + Qty;
                if (GetIOWTRansQty > dQty)
                {
                    GetIOWTRansQty = GetIOWTRansQty - dQty;
                }
                else
                {
                    GetIOWTRansQty = 0;
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return Qty;
        }

        

        public void UpdateIOWTranQty(List<BillIOWTransUpdate> argBIOWTransUpd, int iBillTransId)
        {
            int chkQty = 0;
            BsfGlobal.OpenWPMDB();            
            SqlCommand Command = null;
            try
            {
                Command = new SqlCommand("Select count(Qty) from BillIOWTrans where BillTransID=" + iBillTransId + "", BsfGlobal.g_WPMDB);
                chkQty = Convert.ToInt32(Command.ExecuteScalar());
                Command.Dispose();

                if (chkQty == 0)
                {
                    foreach (BillIOWTransUpdate obj in argBIOWTransUpd)
                    {
                        Command = new SqlCommand("Insert_BillIOWTrans", BsfGlobal.g_WPMDB);
                        Command.CommandType = CommandType.StoredProcedure;
                        Command.Parameters.Clear();
                        Command.Parameters.AddWithValue("@BillTransID", iBillTransId);
                        Command.Parameters.AddWithValue("@IOW_ID", obj.IOW_ID);
                        Command.Parameters.AddWithValue("@Qty", obj.Qty);
                        Command.Parameters.AddWithValue("@ClaimType", obj.ClaimType);
                        Command.Parameters.AddWithValue("@MType", obj.MType);
                        Command.Parameters.AddWithValue("@AnalysisHeadId", obj.AnalysisHeadID);                        
                        Command.Parameters.AddWithValue("@MUnitID", obj.MUnitId);
                        Command.Parameters.AddWithValue("@UFactor", obj.UFactor);

                        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                    }
                }
                else
                {
                    foreach (BillIOWTransUpdate obj in argBIOWTransUpd)
                    {
                        Command = new SqlCommand("Update_BillIOWTrans", BsfGlobal.g_WPMDB);
                        Command.CommandType = CommandType.StoredProcedure;
                        Command.Parameters.Clear();
                        Command.Parameters.AddWithValue("@BillIOWTransID", obj.BillIOWTransID);
                        Command.Parameters.AddWithValue("@BillTransID", iBillTransId);
                        Command.Parameters.AddWithValue("@IOW_ID", obj.IOW_ID);
                        Command.Parameters.AddWithValue("@Qty", obj.Qty);
                        Command.Parameters.AddWithValue("@ClaimType", obj.ClaimType);
                        Command.Parameters.AddWithValue("@MType", obj.MType);
                        Command.Parameters.AddWithValue("@AnalysisHeadId", obj.AnalysisHeadID);                        
                        Command.Parameters.AddWithValue("@MUnitID", obj.MUnitId);
                        Command.Parameters.AddWithValue("@UFactor", obj.UFactor);

                        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                    }
                }
               
            }
            catch (Exception ex)
            {                
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
               
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
        }

        public DataSet GetWORefPopulate(int argWORegId)
        {
            BsfGlobal.OpenWPMDB();
            SqlDataAdapter da;
            DataSet ds = new DataSet();
            string sSql = "";
            try
            {
                sSql = "select * from WORegister where WORegisterId=" + argWORegId + "";
                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(ds, "WORegister");
                da.Dispose();


                sSql = "Select WOType from WORegister Where WORegisterID = " + argWORegId;
                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(ds, "WOTrans");
                da.Dispose();

                sSql = "Select * from WORate_Q Where WORegisterID = " + argWORegId;
                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(ds, "Qualifier");
                da.Dispose();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return ds;

        }

        public DataTable getWorkOrder(int argCCId, int argContractId, string argmode)
        {
            SqlDataAdapter sda;
            //SqlCommand cmd;
            DataTable dt = null;
            string sSql = "";
            string sQry="";
            BsfGlobal.OpenWPMDB();
            string sVoucherType = "";

            try
            {
                //Old Code
                if (argmode == "A")
                    sQry = " and B.LiveWO = 0 ";
                else
                    sQry = "";

                sVoucherType = BsfGlobal.GetVoucherType(10);


                //New code

                sSql = "Select B.WORegisterId,";
                if (sVoucherType == "CC")
                    sSql = sSql + "case when B.CCWONO<>'' then B.CCWONO else B.WONo end as WONo,";
                else if (sVoucherType == "CO")
                    sSql = sSql + " case when B.CompanyVNO<>'' then B.CompanyVNO else B.WONo end  as WONo,";
                else
                    sSql = sSql + " B.WONo as WONo ,";
                sSql = sSql + " B.WODate,isnull(B.Amount,0) as Amount,B.TaxInclude,B.Amendment,B.AWORegisterId,B.QualType from WORegister B " +
                "Where B.CostCentreId=" + argCCId + " and B.ContractorID=" + argContractId + " " + sQry + " and B.Approve='Y' and B.CancelWO=0 and  " +
                "WORegisterId in (Select A.WORegisterId from WOTrans A " +
                "Inner Join WORegister B on A.WORegisterId=B.WORegisterId " +
                "Where B.CostCentreId=" + argCCId + " and B.ContractorID=" + argContractId + " " + sQry + " and B.Approve='Y' and B.CancelWO=0 and A.WOType<>'T') " +

                "Union ALL " +

                "Select B.WORegisterId,";
                if (sVoucherType == "CC")
                    sSql = sSql + "case when B.CCWONO<>'' then B.CCWONO else B.WONo end as WONo,";
                else if (sVoucherType == "CO")
                    sSql = sSql + " case when B.CompanyVNO<>'' then B.CompanyVNO else B.WONo end as WONo,";
                else
                    sSql = sSql + " B.WONo as WONo,";

                sSql = sSql + " B.WODate,isnull(B.Amount,0) as Amount,B.TaxInclude,B.Amendment,B.AWORegisterId,B.QualType from WORegister B  " +
                "Where B.CostCentreId=" + argCCId + " and B.ContractorID=" + argContractId + " " + sQry + " and B.Approve='Y' and B.CancelWO=0 and " +
                "WORegisterId In  " +
                "(Select  distinct A.WORegisterId from WOTurnKeyTrans A  " +
                "Inner Join WORegister B on A.WORegisterId=B.WORegisterId  " +
                "Where B.CostCentreId=" + argCCId + " and B.ContractorID=" + argContractId + " " + sQry + " and B.Approve='Y' and B.CancelWO=0) ";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
             
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }

            return dt;
        }


        public decimal GetSurcharge(int argTypeId,int argCCId)
        {
            string sSql="";            
            SqlCommand cmd;                   
            BsfGlobal.OpenWPMDB();                   
            decimal getSurcharge = 0;

            try
            {

                sSql = "Select SurPer from BillFormatTDS  " +
                    "Where TypeId= " + argTypeId + " and CostCentreId=" + argCCId + "";

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    getSurcharge = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                }
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return getSurcharge;
        }

        public int GetFACCId(int argCCId)
        {
            int getFACCId = 0;            
            SqlCommand Command;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
      
            try
            {
                sSql = "Select FACostCentreId from CostCentre Where CostCentreId = " + argCCId + "";
                Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                getFACCId = Convert.ToInt32(CommFun.IsNullCheck(Command.ExecuteScalar(),CommFun.datatypes.vartypenumeric));
                Command.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
          
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return getFACCId;
        }

        public int GetFAContractId(int argContId)
        {
            int getFACCId = 0;   
            SqlCommand Command;
            string sSql = "";
             BsfGlobal.OpenWPMDB();
  
            try
            {
                sSql = "Select FAAccountId from ContractorDetails Where ContractorID = " + argContId + "";
                Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                getFACCId = Convert.ToInt32(CommFun.IsNullCheck(Command.ExecuteScalar(),CommFun.datatypes.vartypenumeric));
                Command.Dispose();

             }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
           
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return getFACCId;
        }

        public DataTable getMaterial(string argCompId, int argRevId, string argDBName,string  argType,int argWORegId)
        {
            SqlDataAdapter sda;
            //SqlCommand cmd;
            DataTable dt = null;
            string sql = "";
            BsfGlobal.OpenWPMDB();

            try
            {
                if (argType == "A")
                {
                    sql = "Select A.ResourceId,B.Resource_Code Code,B.Resource_Name Component_Name,U.Unit_Name UOM_ID,A.Rate,0 Qtty,Per from WOMaterialAdvance A " +
                          "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.ResourceId = B.Resource_ID " +
                          "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM U on B.Unit_ID=U.Unit_ID " +
                          "Where A.WORegisterId = " + argWORegId;  
                    if (argCompId != "") { sql = sql + " and A.ResourceId not in (" + argCompId.TrimEnd(',') + ")"; } 
                }

                else
                {
                    if (argCompId == "")
                    {
                        sql = "Select A.Resource_ID ResourceId,B.Resource_Code Code,B.Resource_Name Component_Name,U.Unit_Name UOM_ID,A.Qualified_Rate Rate,A.Qtty,0 Per from [" + argDBName + "].dbo.Project_Components A " +
                            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.Resource_ID=B.Resource_ID " +
                            "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM U on B.Unit_ID=U.Unit_ID " +
                            "Where B.TypeID=2 and A.Revision_ID=" + argRevId + " and A.Resource_ID in (Select P.Resource_ID from [" + argDBName + "].dbo.Rate_Analysis P " +
                            "Inner Join [" + argDBName + "].dbo.IOW O on O.IOW_Trans_ID=P.IOW_Trans_ID) order by B.Resource_Code";
                    }
                    else
                    {
                        sql = "Select A.Resource_ID ResourceId,B.Resource_Code Code,B.Resource_Name Component_Name,U.Unit_Name UOM_ID,A.Qualified_Rate Rate,A.Qtty,0 Per from [" + argDBName + "].dbo.Project_Components A " +
                            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.Resource_ID=B.Resource_ID " +
                            "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM U on B.Unit_ID=U.Unit_ID " +
                            "Where B.TypeID=2 and A.Revision_ID=" + argRevId + " and A.Resource_ID not in (" + argCompId.TrimEnd(',') + ") and A.Resource_ID in (Select P.Resource_ID from [" + argDBName + "].dbo.Rate_Analysis P " +
                            "Inner Join [" + argDBName + "].dbo.IOW O on O.IOW_Trans_ID=P.IOW_Trans_ID) order by B.Resource_Code";
                    }
                }

                sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        public DataTable getReturnMaterial(string argCompId)
        {
            SqlDataAdapter sda;
            //SqlCommand cmd;
            DataTable dt = null;
            string sql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                if (argCompId != null)
                {
                    sql = "SELECT A.Resource_Id Comp_Id,A.Resource_Code Code,A.Resource_Name Component_Name,U.Unit_Name UOM_ID,B.Unit_Rate Rate  FROM [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource A " +
                        "Inner JOIN [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource_Rate B ON A.Resource_Id=B.Resource_Id " +
                        "INNER JOIN [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM U ON A.Unit_Id=U.Unit_Id " +
                        "WHERE A.Resource_ID IN (" + argCompId.TrimEnd(',') + ")";

                    sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();
                }

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        public decimal GetRecoveryQty(int argIssueId)
        {
            string sSql = "";
            decimal getRecoveryQty = 0;            
            SqlCommand cmd;            
            BsfGlobal.OpenWPMDB();

            try
            {

                sSql = "Select (IssueQty-RecoveryQty) Qty from IssueTrans Where IssueTransId = " + argIssueId + "";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    getRecoveryQty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                }
                cmd.Dispose();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return getRecoveryQty;
        }

        public decimal GetBillTCumQty(int argAnalysisId, int argContId, int argCCId)
        {
            string sSql = "";
            decimal getMsrQty = 0;
            SqlDataAdapter da;
            DataTable dt = new DataTable();
            BsfGlobal.OpenWPMDB();
            try
            {
                sSql = "Select A.CumQty as Qty From BillTurnKeyTrans A " +
                    "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                    "Where A.CumQty>0 and B.ContractorId = " + argContId + " and " +
                    "B.CostCentreId = " + argCCId + " and A.AnalysisId = " + argAnalysisId + " and B.BillType='T' Order by A.DPERegisterId Desc";

                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(dt);
                da.Dispose();
                if (dt.Rows.Count > 0)
                {
                    getMsrQty = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[0]["Qty"], CommFun.datatypes.vartypenumeric));
                }
                dt.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return getMsrQty;
        }

        public DataTable GetDPETurnKeyDet(string argDPERegId, string argDBName)
        {
            string sSql = "";            
            SqlDataAdapter sda;
            DataTable dt = new DataTable();
            BsfGlobal.OpenWPMDB();
            try
            {

                sSql = "Select A.AnalysisId,Sum(A.CurrentQty) CurrentQty " +
                    "from DPETurnKeyTrans A " +
                    "Inner Join [" + argDBName + "].dbo.AnalysisHeads B On A.AnalysisId=B.AnalysisId and B.Lastlevel=1 " +
                    "Inner Join WORegister C On A.WoRegisterId=C.WoRegisterId  " +
                    "Where A.DPERegisterId in (" + argDPERegId.TrimEnd(',') + ") group by A.AnalysisId";
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                sda.Fill(dt);
                sda.Dispose();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        public DataTable GetDPEBillType(string argDPERegId)
        {
            string sSql = "";            
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = new DataTable();
            try
            {
                sSql = "Select BillType,DPERegisterId from DPERegister " +
                    "Where DPERegisterId in(" + argDPERegId.TrimEnd(',') + ")";
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }


        public void GetAWORegIds(int argWORegId)
        {
            string sSql = "";                
            SqlDataAdapter sda;
            DataTable dt = new DataTable();
            BsfGlobal.OpenWPMDB(); 
            int iWORegId=0;
            try
            {
                sSql = "Select AWORegisterId from WORegister Where WORegisterId =" + argWORegId;
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                sda.Fill(dt);
                sda.Dispose();
                if (dt.Rows.Count > 0)
                {
                    iWORegId = Convert.ToInt32(dt.Rows[0]["AWORegisterId"]);
                    if (iWORegId != 0)
                    {
                        m_sWORegId = m_sWORegId + iWORegId.ToString() + ",";

                        GetAWORegIds(iWORegId);
                    }
                }

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
        }

        public DataTable getDPEList(int argCCId,int argContId,string argtype,string argDPEType,string argDPERegId,bool argInternal,int argWOAccId,int argWoRegId,string argCostOption,int argBillRegId,string argDPERegIdO,int argTypeId)
        {
            SqlDataAdapter sda;           
            DataTable dt = null;
            string sSql = "";      
            BsfGlobal.OpenWPMDB();
            try
            {

                sSql = "Update BillDPETrans Set TypeId = 1 Where TypeId=0";
                SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB); cmd.ExecuteNonQuery(); cmd.Dispose();


                sSql = "Select BillType,DPERegisterId,EDate,VNo,Convert(bit,0,1) Sel from DPERegister " +
                       "Where (CostcentreID = " + argCCId + "  and ContractorID = " + argContId + " and DPEType='" + argCostOption + "' and ConvertBill=0 and Approve='Y'";

                if (argWOAccId != 0)
                {
                    sSql = sSql + " and WorkAccountId=" + argWOAccId;
                }
                if (argWoRegId != 0)
                {
                    m_sWORegId = argWoRegId.ToString() + ",";
                    GetAWORegIds(argWoRegId);
                    if (m_sWORegId.ToString() != "")
                    {
                        m_sWORegId = m_sWORegId.Substring(0, (m_sWORegId.Length - 1));
                    }

                    if (argTypeId == 1)
                    {
                        sSql = sSql + " and WORegisterId IN(" + m_sWORegId + ")";
                    }
                    else
                    {
                        sSql = sSql + " and WORegisterId Not IN(" + m_sWORegId + ")";
                    }
                }

                if (argDPERegIdO != "")
                {
                    sSql = sSql + " and DPERegisterId Not IN(" + argDPERegIdO.TrimEnd(',') + ")";
                }

                sSql = sSql + ")";

                if (argBillRegId != 0)
                {
                    sSql = sSql + " Or (DPERegisterId in (Select DPERegisterId from BillDPETrans Where BillRegisterId = " + argBillRegId + " and TypeId = " + argTypeId + "))";
                }


                sSql = sSql + " Order by Edate,VNo";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                if (argDPERegId != "")
                {
                    sSql = "Select DPERegisterId from DPERegister Where DPERegisterID in (" + argDPERegId.TrimEnd(',') + ")";
                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    DataTable dtT = new DataTable();
                    sda.Fill(dtT);
                    sda.Dispose();

                    int iRegId = 0;
                    DataView dv;
                    foreach (DataRow dRow in dt.Rows)
                    {
                        iRegId = Convert.ToInt32(dRow["DPERegisterId"]);
                        dv = new DataView(dtT);
                        dv.RowFilter = "DPERegisterId = " + iRegId;
                        if (dv.ToTable().Rows.Count > 0)
                        {
                            dRow["Sel"] = 1;
                        }
                        dv.Dispose();
                    }

                }

                //}
                //else
                //{
                //    sSql = "Select BillType, DPERegisterId,EDate,VNo from DPERegister " +
                //           "Where CostcentreID = " + argCCId + " and ContractorID = " + argContId + "  and DPEType='" + argCostOption + "' " +
                //           "and ConvertBill=0 and Approve='Y' and DPERegisterID Not in (" + argDPERegId.TrimEnd(',') + ") ";
                //    if (argWOAccId!=0)
                //    {
                //        sSql = sSql + " and WorkAccountId=" + argWOAccId;
                //    }
                //    if (argWoRegId != 0)
                //    {
                //        sSql = sSql + " and WORegisterId=" + argWoRegId;
                //    }
                //    sSql = sSql + " Order by Edate,VNo";
                //}
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }


        public bool CheckDPEMUnit(string argBilType, string argDPERegId)
        {
            string sSql = "";
            int m_countRec = 0;
            bool checkDPEMUnit = false;            
            SqlCommand cmd;            
            BsfGlobal.OpenWPMDB();
  
            try
            {
                if (argBilType.TrimEnd(',')=="I")
                {
                    sSql = "Select count(*) from (Select IOW_ID from DPETrans  " +
                        "Where DPERegisterId in (" + argDPERegId.TrimEnd(',') + ") and  BillType='I' Group by IOW_ID,MUnitID,UFactor) A " +
                        "Group by A.IOW_ID Having Count(A.IOW_ID) > 1";
                }
                else if (argBilType.TrimEnd(',') == "S")
                {
                    sSql = "Select count(*) From (Select A.IOW_ID,B.IOW_ID as Comp_ID from DPEIOWTrans A " +
                        "Inner Join DPETrans B on A.DPETransID=B.DPETransID " +
                        "Where B.DPERegisterId in (" + argDPERegId.TrimEnd(',') + ") and  B.BillType ='S' " +
                        "Group by A.IOW_ID,A.MUnitID,A.UFactor,B.IOW_ID) G " +
                        "Group by G.IOW_ID,G.Comp_ID " +
                        "Having Count(G.IOW_ID) > 1";
                }
                else
                {
                    sSql = "Select count(*) From (Select A.IOW_ID,B.Comp_ID from DPEIOWTrans A " +
                        "Inner Join DPETrans B on A.DPETransID=B.DPETransID " +
                        "Where B.DPERegisterId in (" + argDPERegId.TrimEnd(',') + ") and  B.BillType in ('L','A') " +
                        "Group by A.IOW_ID,A.MUnitID,A.UFactor,B.Comp_ID) G " +
                        "Group by G.IOW_ID,G.Comp_ID " +
                        "Having Count(G.IOW_ID) > 1";
                }                

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    m_countRec = Convert.ToInt32(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypenumeric));
                }
                if (m_countRec != 0)
                {
                    checkDPEMUnit = true;
                }
                else { checkDPEMUnit = false; }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return checkDPEMUnit;
        }

        public DataTable getPopulabourDPE(string argDPERegId, string argBtype)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";

            try
            {
                sSql = "Select A.Comp_ID,B.Resource_Code Code,(B.Resource_Name+isnull((case when A.RateType='A' then '(Mechanical)' when A.RateType='M' then '(Manual)' end),'')) Component_Name,A.UnitID,Sum(A.Qty) Qty,A.AnalysisHeadId,A.DetSpec,A.RateType From DPETrans A  " +
                    "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].Dbo.Resource B on A.Comp_ID=B.Resource_ID " +                    
                    "Where A.DPERegisterID in (" + argDPERegId.TrimEnd(',') + ") And A.BillType in('" + argBtype + "') " +
                    "Group by A.Comp_ID,B.Resource_Code,B.Resource_Name,A.UnitID,A.AnalysisHeadId,A.DetSpec,A.RateType";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable getPopulateDPEIOWCol(string argDPERegId,string argBtype,string argDBName)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            try
            {                

                sSql = "Select A.IOW_ID,B.RefSerialNo Code,B.Specification,A.UnitID,Sum(A.Qty) as Qty,A.MType ,A.AnalysisHeadId,A.UFactor,A.MUnitId,A.DetSpec,A.RateType From DPETrans A " +
                "Inner Join [" + argDBName + "].dbo.Project_IOW B on A.IOW_ID=B.Project_IOW_ID " +
                "Where A.DPERegisterID in (" + argDPERegId.TrimEnd(',') + ") And A.BillType in('" + argBtype + "') " +
                "Group by A.IOW_ID,B.RefSerialNo,B.Specification,A.UnitID,A.AnalysisHeadId,A.UFactor,A.MType,A.MUnitId,A.DetSpec,A.RateType";


                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public decimal getLSWBSCumQty(int argCCId, int argLbrResIdId, int argContId, int argAnalysId, int argBillRegId)
        {
            decimal getLSWBSCumQty = 0;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd;
            try
            {

                sSql = "Select isnull(Sum(A.Qty),0) Qty From BillLSWBSTrans A " +
                    "Inner Join BillLabourType B on A.BillRegisterId=B.BillRegisterId " +
                    "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                    "Where C.ContractorId = " + argContId + " and " +
                    "C.CostCentreId = " + argCCId + " and B.LabourTypeId = " + argLbrResIdId + " and A.AnalysisId = " + argAnalysId + " ";
                if (argBillRegId != 0)
                    sSql = sSql + " and B.BillRegisterId=" + argBillRegId + " ";
                cmd = new SqlCommand(sSql,BsfGlobal.g_WPMDB);
                getLSWBSCumQty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypenumeric));


                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {

            }
            return getLSWBSCumQty;
        }

        public DataTable getBillLSWBSTranQtyEdit(int argTransId,int argLSTypeTransId, int argAnalId,string argLSRegId)
        {

            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";
            try
            {
                if (argTransId != 0)
                {
                    sSql = "Select BillLSWBSTransId,AnalysisId,Qty from BillLabourTypeWBSTrans   " +
                            "Where BillLabourTypeTransId = " + argTransId + " and AnalysisId = " + argAnalId;
                }
                else
                {
                    sSql = "Select 0 BillLSWBSTransId,A.AnalysisId,Sum(A.Qty) Qty from LSWBSTrans A  " +
                            "Where A.LSTransId in (Select LabourTransId From LabourStrengthTrans Where LabourStrengthId in (" + argLSRegId + ") and LabourTypeId=" + argLSTypeTransId + ") " +
                            "and A.AnalysisId =" + argAnalId + " " +
                            "Group by A.AnalysisId";
                }
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable getDPEWBSTranQtyEdit(string argDPERegId, int argIOWTransId,int argAnalId)
        {

            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";
            try
            {
                sSql = "Select A.AnalysisId,Sum(A.Qty) Qty,A.Rate,Sum(A.Amount),A.MType,A.DPETransId from DPEWBSTrans A  " +
                    "where A.DPETransId in (Select DPETransId From DPETrans Where DPERegisterID in (" + argDPERegId.TrimEnd(',') + ") And BillType='I' and IOW_ID=" + argIOWTransId + ") " + 
                    "and A.AnalysisId =" + argAnalId + " " +
                    "Group by A.AnalysisId,A.MType,A.DPETransId,A.Rate";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);

                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable getDPEWBSCol(string argDPERegId, int argIOWTransId, int RevId,string argDBName)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            try
            {

                sSql = "Select ROW_NUMBER()  OVER (ORDER BY  B.Analysis_ID) As RowId,B.Analysis_ID AnalysisId ,P.RefSerialNo New_Serial_No, " +
                    "case when E.AnalysisHeadName Is null then '' Else E.AnalysisHeadName End Level3,case when D.AnalysisHeadName Is null then '' Else D.AnalysisHeadName End Level2, " +
                        "case when C.AnalysisHeadName Is null then '' Else C.AnalysisHeadName End Level1,A.AnalysisHeadName,0 as DPETransId,Cast(0 as Decimal(18,3)) Qty,Cast(0 as Decimal(18,3)) Rate, " +
                        "Cast(0 as Decimal(18,3)) Amount, " +
                        "0 as MType from [" + argDBName + "].dbo.AnalysisIOWc B " +
                        "Inner Join [" + argDBName + "].dbo.Project_IOW P on B.ProjIOWId=P.Project_IOW_ID " +
                        "Inner Join [" + argDBName + "].dbo.AnalysisHeads A on A.AnalysisID=B.Analysis_ID and A.LastLevel=1  " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads C on A.ParentID=C.AnalysisID  " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads D on C.ParentID=D.AnalysisID  " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads E on D.ParentID=E.AnalysisID  " +
                        "where B.ProjIOWId in(Select ProjIOWId from [" + argDBName + "].dbo.IOWc where ProjIOWID=" + argIOWTransId + " and B.Revision_ID=" + RevId+")  and B.Revision_ID=" + RevId;

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }


        public DataTable GetLSWBS(int argRevId, int argResourceId, string argDBName)
        {
            SqlDataAdapter sda;
            DataTable dt = new DataTable();
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                
                sSql = "Select ROW_NUMBER()  OVER (ORDER BY G.AnalysisId) As RowId,0 TransId, G.AnalysisId, Cast(0 as Decimal(18,3)) Qty, " +
                        "case when E.AnalysisHeadName Is null then '' Else E.AnalysisHeadName End Level3,case when D.AnalysisHeadName Is null then '' Else D.AnalysisHeadName End Level2, " +
                        "case when C.AnalysisHeadName Is null then '' Else C.AnalysisHeadName End Level1,A.AnalysisHeadName " +                        
                        "from(Select C.Analysis_Id AnalysisId,(A.Qtty/B.Qtty)*C.Qty Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                        "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + argRevId + "  " +
                        "Inner Join [" + argDBName + "].dbo.AnalysisIOWC C on A.ProjIOWId=C.ProjIOWId and C.Revision_Id=" + argRevId + " Where A.Resource_ID="+argResourceId+" and A.Revision_ID=" + argRevId + "  " +
                        "Union All  " +
                        "Select D.Analysis_Id AnalysisId,((A.Qtty*C.Qty)/B.Qtty)*D.Qty Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                        "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + argRevId + "  " +
                        "Inner Join [" + argDBName + "].dbo.AnalysisIOWC D on A.ProjIOWId=D.ProjIOWId and D.Revision_Id=" + argRevId + "  " +
                        "Inner Join (Select MResource_Id,Qty from [" + argDBName + "].dbo.Activity_Analysis  " +
                        "Where Resource_ID=" + argResourceId + " and Rev_Id=" + argRevId + " and Analysis_Type='M') C on A.Resource_ID=C.MResource_ID and A.RateType='M' Where A.Revision_ID=" + argRevId + "  " +
                        "Union All  " +
                        "Select D.Analysis_Id AnalysisId,((A.Qtty*C.Qty)/B.Qtty)*D.Qty Qty from [" + argDBName + "].dbo.Project_DetailsC A  " +
                        "Inner Join [" + argDBName + "].dbo.IOWC B on A.ProjIOWId=B.ProjIOWID and B.Qtty>0 and B.Revision_ID=" + argRevId + "  " +
                        "Inner Join [" + argDBName + "].dbo.AnalysisIOWC D on A.ProjIOWId=D.ProjIOWId and D.Revision_Id=" + argRevId + "  " +
                        "Inner Join (Select MResource_Id,Qty from [" + argDBName + "].dbo.Activity_Analysis  " +
                        "Where Resource_ID=" + argResourceId + " and Rev_Id=" + argRevId + " and Analysis_Type='A') C on A.Resource_ID=C.MResource_ID and A.RateType='A' " +
                        "Where A.Revision_ID=" + argRevId + ") G " +
                        "Inner Join [" + argDBName + "].dbo.AnalysisHeads A on G.AnalysisId=A.AnalysisID and A.LastLevel=1  " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads C on A.ParentID=C.AnalysisID  " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads D on C.ParentID=D.AnalysisID  " +
                        "Left Join [" + argDBName + "].dbo.AnalysisHeads E on D.ParentID=E.AnalysisID  " +
                        "Where G.Qty>0 " +
                        "Group by G.AnalysisId,E.AnalysisHeadName,D.AnalysisHeadName,C.AnalysisHeadName,A.AnalysisHeadName ";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable GetDPEWBSMsrment(int argIOWID, string  argDPERegId, int argAheadId)
        {

            SqlDataAdapter sda;
            DataTable dt = null;
            string sql = "";
            BsfGlobal.OpenWPMDB();

            try
            {
                sql = "Select * from DPEMeasurement  " + 
                    "where IowId = " + argAheadId + " And DPETransId In  " + 
                    "(Select DPETransId From DPETrans Where DPERegisterID in (" + argDPERegId.TrimEnd(',') + ") And BillType='I') And DPEIOWTransId=" + argIOWID + " And WBSWise='Y' ";

                sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable getPopulateService(string argDPERegId, string argBtype)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            try
            {
                
                sSql = "Select A.Comp_ID ,B.ServiceCode Code,B.ServiceName Component_Name,A.UnitID,Sum(A.Qty) Qty,A.MType,A.AnalysisHeadId From DPETrans A " +
                   "Inner Join [" + BsfGlobal.g_sVendorDBName + "].dbo.ServiceMaster B on A.Comp_ID=B.ServiceId " +
                   "Where A.DPERegisterID in (" + argDPERegId.TrimEnd(',') + ") And A.BillType in('" + argBtype + "')" +
                   "Group by A.Comp_ID,B.ServiceCode,B.ServiceName,A.UnitID,A.MType,A.AnalysisHeadId";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public decimal GetWOCompRate(int argCompId,int argCboWoRegId,int argiCCid,int argContId)
        {
            string sSql = "";            
            SqlCommand cmd;            
            BsfGlobal.OpenWPMDB();
    
            decimal getWOCompRate = 0;

            try
            {
                if (argCboWoRegId >= 0)

                    sSql = "Select A.Rate from WOTrans A " +
                        "Inner Join WORegister B on A.WOREgisterId=B.WORegisterId " +
                        "Where A.WORegisterId= " + argCboWoRegId + " and " +
                        "A.Comp_ID = " + argCompId + "";

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    getWOCompRate = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypenumeric));
                }
                if (getWOCompRate != 0) { }

                sSql = "Select A.Rate from WOTrans A " +
                    "Inner Join WORegister B on A.WOREgisterId=B.WORegisterId " +
                    "Where B.CostCentreId = " + argiCCid + " and " +
                    "B.ContractorId = " + argContId + " and A.Comp_ID = " + argCompId + " Order by B.WORegisterId Desc";

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    getWOCompRate = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                }
                if (getWOCompRate != 0) { }

                sSql = "Select A.NRate from CompareTrans A " +
                    "Inner Join CompareRegister B on A.CompareId=B.CompareId " +
                    "Where B.CostCentreId = " + argiCCid + " and " +
                    "A.Approved=1 and A.Comp_ID = " + argCompId + "  and A.Contractor_ID = " + argContId + " Order by A.CompareId Desc";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    getWOCompRate = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                }
                if (getWOCompRate != 0) { }

                sSql = "Select A.NRate from CompareTrans A " +
                    "Inner Join CompareRegister B on A.CompareId=B.CompareId " +
                    "Where B.CostCentreId = " + argiCCid + " and " +
                    "A.Approved=1 and A.Comp_ID = " + argCompId + "  Order by A.CompareId Desc";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    getWOCompRate = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return getWOCompRate;
        }

        public decimal GetCompRate(int argCompId, int argRevId, string argDBName)
        {
            string sSql = "";            
            SqlCommand cmd;            
            BsfGlobal.OpenWPMDB();          
            decimal getCompRate = 0;
            try
            {
                sSql = "SELECT Qualified_Rate FROM [" + argDBName + "].dbo.PROJECT_COMPONENTS " + 
                    "WHERE Resource_Id=" + argCompId + " and Revision_ID=" + argRevId + "";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    getCompRate = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return getCompRate;
        }

        public decimal GetWOIOWRate(int argIOWID, int argCboWoRegId, int argiCCid, int argContId)
        {
            string sSql = "";            
            SqlCommand cmd;            
            BsfGlobal.OpenWPMDB();
            decimal getWOIOWRate = 0;
            try
            {
                if (argCboWoRegId >= 0)

                   sSql = "Select A.Rate from WOTrans A " +
                       "Inner Join WORegister B on A.WOREgisterId=B.WORegisterId " +
                       "Where A.WORegisterId= "+argCboWoRegId+" and " +
                       "A.IOW_ID = " + argIOWID + "";

                cmd = new SqlCommand(sSql,BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    getWOIOWRate = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypenumeric));
                }
                if (getWOIOWRate != 0) { return getWOIOWRate; }

                sSql = "Select A.Rate from WOTrans A " +
                    "Inner Join WORegister B on A.WOREgisterId=B.WORegisterId " +
                    "Where B.CostCentreId = "+argiCCid+" and " +
                    "B.ContractorId = " + argContId + " and A.IOW_ID = " + argIOWID + " Order by A.WORegisterId Desc";

                cmd = new SqlCommand(sSql,BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    getWOIOWRate = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypenumeric));
                }
                if (getWOIOWRate != 0) { return getWOIOWRate; }

                sSql = "Select A.NRate from CompareTrans A " +
                    "Inner Join CompareRegister B on A.CompareId=B.CompareId " +
                    "Where B.CostCentreId = "+argiCCid+" and " +
                    "A.Approved=1 and A.IOW_ID = " + argIOWID + " and A.Contractor_ID = "+argContId+" Order by A.CompareId Desc";
                cmd = new SqlCommand(sSql,BsfGlobal.g_WPMDB);

                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    getWOIOWRate = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypenumeric));
                }
                if (getWOIOWRate != 0) { return getWOIOWRate; }

                sSql = "Select A.NRate from CompareTrans A " +
                    "Inner Join CompareRegister B on A.CompareId=B.CompareId " +
                    "Where B.CostCentreId = "+argiCCid+" and " +
                    "A.Approved=1 and A.IOW_ID = " + argIOWID + " Order by A.CompareId Desc";
                
                cmd = new SqlCommand(sSql,BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    getWOIOWRate = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                }

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return getWOIOWRate;
        }

        public decimal GetIOWRate(int argIOWID,string argBillType,int argRevId,string argDBName)
        {
            string sSql = "";        
            SqlCommand cmd;        
            BsfGlobal.OpenWPMDB();  

            decimal getIOWRate = 0;


            try
            {
                if (argBillType.TrimEnd(',') == "I")
                    sSql = "SELECT  Qualified_Rate FROM [" + argDBName + "].dbo.Iow  " + 
                        "WHERE ProjIOWID=" + argIOWID + " and Revision_ID=" + argRevId + "";
                else
                    sSql = "SELECT Qualified_Rate FROM [" + argDBName + "].dbo.Iow  " + 
                        "WHERE ProjIOWID=" + argIOWID + " and Revision_ID=" + argRevId + "";
                
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    getIOWRate = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }

            return getIOWRate;
        }

        public string getLsID(string LbrIds,int argCCId, int argContId)
        {
            string sSql = "";            
            BsfGlobal.OpenWPMDB();
            SqlDataAdapter sda;           
            DataTable dt = null;
            string LSIds = "";
            try
            {
               
               sSql="Select Distinct LabourStrengthId as ID from LabourTrans " +
                    "Where LabourId In("+LbrIds.TrimEnd(',')+") and LabourStrengthId>0";
               sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
               dt = new DataTable();
               sda.Fill(dt);
               sda.Dispose();
               if(dt.Rows.Count>0)
               {
                    for(int k=0;k<dt.Rows.Count;k++)
                    {
                        LSIds=LSIds+Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[k]["ID"],CommFun.datatypes.vartypenumeric))+",";
                    }
                }

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return LSIds;
        }

        public string getLSVNo(int argBillRegId)
        {
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            SqlDataAdapter sda;
            DataTable dt = null;
            string sLSVNo = "";

            try
            {
                sSql = "Select CCVNo from  LabourStrengthMaster Where LabourStrengthId IN  " + 
                    "(Select Distinct LabourStrengthId from BillLSTrans " + 
                    "Where BillRegisterId= " + argBillRegId + " and LabourStrengthId>0)";
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                if (dt.Rows.Count > 0)
                {
                    for (int j = 0; j < dt.Rows.Count; j++)
                    {
                        sLSVNo = sLSVNo + CommFun.IsNullCheck(dt.Rows[j]["CCVNo"], CommFun.datatypes.vartypestring).ToString()+",";
                    }
                }
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return sLSVNo;
        }

        public DataTable getLSList(int argCCId, int argContId, string argLSRegId, bool argInternal,int argWORegId,int argTypeId)
        {
            SqlDataAdapter sda;           
            DataTable dt = null;
            string sSql = "";
            string sVoucherType = "";            
            sVoucherType = BsfGlobal.GetVoucherType(11);
            BsfGlobal.OpenWPMDB();
            try
            {
                sSql = "Select LabourStrengthId,EDate,";
                if (sVoucherType == "CC")
                    sSql = sSql + " CCVNO as VNo,";
                else if (sVoucherType == "CO")
                    sSql = sSql + " CompanyVNO as VNo,";
                else
                    sSql = sSql + " VNo as VNo ,";

                sSql = sSql + "Convert(bit,0,1) Sel from LabourStrengthMaster " +
                       "Where (CostCentreId = " + argCCId + " and ContractorId = " + argContId + " and ConvertBill=0 and Approve='Y'";

                if (argTypeId == 8)
                {
                    sSql = sSql + " and WORegisterId = " + argWORegId + ")";
                }
                else
                {
                    if (argWORegId != 0) { sSql = sSql + " and WORegisterId <> " + argWORegId + ")"; }
                    else { sSql = sSql + ")"; }
                }
                

                //if (argWORegId != 0)
                //{
                //    sSql = sSql + " and WORegisterId = " + argWORegId + ")";
                //}
                //else
                //{
                //    sSql = sSql + ")";
                //}

                if (argLSRegId != "")
                {
                    sSql = sSql + " Or (LabourStrengthId in (Select LabourStrengthId from LabourStrengthMaster Where LabourStrengthId in (" + argLSRegId + ")))";
                }

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                if (argLSRegId != "")
                {
                    sSql = "Select LabourStrengthId  from LabourStrengthMaster Where LabourStrengthId in (" + argLSRegId + ")";
                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    DataTable dtT = new DataTable();
                    sda.Fill(dtT);
                    sda.Dispose();

                    int iRegId = 0;
                    DataView dv;
                    foreach (DataRow dRow in dt.Rows)
                    {
                        iRegId = Convert.ToInt32(dRow["LabourStrengthId"]);
                        dv = new DataView(dtT);
                        dv.RowFilter = "LabourStrengthId = " + iRegId;
                        if (dv.ToTable().Rows.Count > 0)
                        {
                            dRow["Sel"] = 1;
                        }
                        dv.Dispose();
                    }
                }

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable getFromLbrAuto(int argCCId, int argContId, string argLSRegId, DateTime argFrmDate, DateTime argToDate,bool argInternal)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            string sqry;
            BsfGlobal.OpenWPMDB();

            string sFrmDate= String.Format("{0:dd-MMM-yyyy}", argFrmDate);
            string sToDate= String.Format("{0:dd-MMM-yyyy}", argToDate);

            try
            {
                if (argLSRegId == "")
                {
                    if (argContId != 0 && argInternal==false)
                        sqry = "and ContractorID = " + argContId + " ";
                    else
                        sqry = "and ContractorID = 0";

                    sSql = "Select LabourStrengthId,EDate,VNo,Convert(bit,0,1) Sel from LabourStrengthMaster " +
                        "Where CostcentreID =  " + argCCId + " " + sqry + "  " +
                        "and ConvertBill=0 and Approve='Y'";
                }
                else
                {
                    if (argContId != 0 && argInternal==false)
                        sqry = "and ContractorID = " + argContId + " ";
                    else
                        sqry = "and ContractorID = 0";

                    sSql = "Select LabourStrengthId,EDate,VNo from LabourStrengthMaster " +
                        "Where CostcentreID =  " + argCCId + " " + sqry + "  " +
                        "and ConvertBill=0 and Approve='Y' and LabourStrengthId Not in(" + argLSRegId.TrimEnd(',') + ")";
                }

                sSql = sSql + " and EDate Between '" + sFrmDate + "' and '" + sToDate + "' ";

                sSql = sSql + " Order by Edate,VNo";


                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable VendorList(string argType, string argVendorId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();    

            try
            {       
                
                if (argType == "M")
                {
                    if (argVendorId == "")
                    {
                        sSql = "Select VendorId,VendorName,Convert(bit,0,1) Sel From [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster " +
                            "Where Contract=1 or Service=1 Order by VendorName";
                    }
                    else
                    {
                        sSql = "Select VendorId,VendorName,Convert(bit,0,1) Sel From [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster " +
                            "Where Contract=1 or Service=1 and VendorId Not In(" + argVendorId.TrimEnd(',') + ") Order by VendorName";
                    }
                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();
                }               

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public void UpdateTmpBillFormatAbsTotal(int argCCid, string argVendorId, DateTime frmDate, DateTime toDate)
        {

            SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();
             string sSql ="";
            SqlCommand cmd;
            try
            {
                sSql = "Truncate Table TmpBillFormatAbs ";
                cmd = new SqlCommand(sSql, conn,tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                 string frmdat = string.Format("{0:dd MMM yyyy}", frmDate);
                string tdat = string.Format("{0:dd MMM yyyy}", toDate.AddDays(1));

                sSql = "Insert into TmpBillFormatAbs(TypeId,ContractorID,Amount) " +
                    " Select A.TypeId,B.ContractorId,Sum(Case When Add_Less_Flag='+' Then A.Amount Else -A.Amount End) as Amount from BillFormatTrans A " +
                    " Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                    " Inner Join BillFormatMaster C on A.TypeId=C.TypeId " +
                    " Where C.Header=0 and B.ContractorId in ( " + argVendorId.TrimEnd(',') + " ) and B.Edate BetWeen '" + frmdat + "' and '" + tdat + "' ";

                //if(argCCid != 0){ sSql = sSql +" and B.CostCentreID = " +argCCid +" ";}
                sSql = sSql + " Group by A.TypeId,B.ContractorID ";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "Truncate Table TmpBillFormatAbsTotal ";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = " Insert into TmpBillFormatAbsTotal(TypeId,Amount)" +
                    " Select TypeId,SUM(Amount) from TmpBillFormatAbs Group by TypeId ";
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

               
                tran.Commit();
            }
            catch (Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
        }

        public DataTable PopulateLS(string argLSRegId,string argFormtType,bool argInternal,string argBtnClk)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";

            try
            {
                if (argFormtType == "B" && argInternal == false)
                {
                    sSql = "Select A.LabourTypeId,B.Resource_Name TypeName,E.Unit_Name Unit,Sum(A.Qty) as Qtty,Sum(A.Amount) as Amt " +
                            "from LabourStrengthTrans A " +
                            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId=B.Resource_ID " +
                            "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM E on B.Unit_Id=E.Unit_Id";
                    sSql = sSql + " Where A.LabourStrengthID in (" + argLSRegId + ")"; 
                    sSql = sSql + " Group by A.LabourTypeId,B.Resource_Name,E.Unit_Name"; 
                }
                else 
                {
                    sSql = "Select A.LabourId LabourTypeId,B.LabourName TypeName,Sum(A.Qty) as Qtty,Sum(A.Amount) as Amt from LabourTrans A  " +
                           "Inner Join LabourMaster B on A.LabourId=B.LabourId";
                    sSql = sSql + " Where A.LabourStrengthID in (" + argLSRegId + ")"; 
                    sSql = sSql + " Group by A.LabourTypeId,B.Resource_Name,E.Unit_Name"; 
                }

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable UpdateLabourTrans(string argDPERegID)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sql = "";

            try
            {


                sql = "Select A.LabourTypeID,B.Resource_Name TypeName,Sum(A.Qty) as Qty from DPELabourTrans A " +
                    "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource  B on A.LabourTypeId = B.Resource_ID " +
                    "Where A.DPEREgisterId in (" + argDPERegID.TrimEnd(',') + ") Group by A.LabourTypeId,B.Resource_Name";

                sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
               
                dt = new DataTable();
               sda.Fill(dt);
               sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public string GetAnalysisHeadName(int argAHeadId,string argDBName)
        {
            string getAHeadName = "";            
            SqlCommand Command;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            try
            {
                sSql = "Select AnalysisHeadName From  [" +argDBName + "].dbo.AnalysisHeads " + 
                    "Where AnalysisID  = " + argAHeadId + "";                
                Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                getAHeadName = Convert.ToString(CommFun.IsNullCheck(Command.ExecuteScalar(),CommFun.datatypes.vartypestring));
                BsfGlobal.g_WPMDB.Close();                
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
           
            return getAHeadName;
        }

        public decimal GetLabourRate(int argLbrTypeId, int argRevId, string argDBName)
        {
            string sSql = "";            
            SqlCommand cmd;            
            BsfGlobal.OpenWPMDB();
            

            decimal GetLabourRate = 0;
            try
            {
                sSql = "Select Qualified_Rate from [" + argDBName + "].dbo.Project_Components where Resource_Id=" + argLbrTypeId + " and Revision_ID=" + argRevId + " ";                              

                cmd = new SqlCommand(sSql,BsfGlobal.g_WPMDB);
                GetLabourRate = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypenumeric));
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return GetLabourRate;
        }


        public decimal GetLabourMinRate(int argLbrTypeId, int argCCId)
        {
            string sSql = "";           
            SqlCommand cmd;            
            BsfGlobal.OpenWPMDB();
            decimal GetLabourMinRate = 0;
            try
            {
                sSql = "Select MinWage from CCLabourType Where LabourTypeId = " + argLbrTypeId + " and CostCentreId = " + argCCId + "";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    GetLabourMinRate = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypenumeric));
                }

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return GetLabourMinRate;
        }

        public decimal GetLabourAppRate(int argLbrTypeId, int argCCId)
        {
            string sSql = "";            
            SqlCommand cmd;            
            BsfGlobal.OpenWPMDB();  
            decimal GetLabourAppRate = 0;
            try
            {
                sSql = "Select Rate from CCLabourType Where LabourTypeId = " + argLbrTypeId + " and CostCentreId = " + argCCId + "";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    GetLabourAppRate = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypenumeric));
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return GetLabourAppRate;
        }

        public DataTable InsertDPE(int argCompId, string argSplit, int argRevId,string argDBName)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sql = "";
            try
            {
                if (argSplit != "Y")
                {
                    sql = "Select A.Project_IOW_ID IOW_ID,A.RefSerialNo, '' Serial_No,A.Specification,C.Unit_Name UOM_ID, 0 as Analysis_Head_ID,0 as DPEIOWTransID,0 as DPETransID,Cast(0 as Decimal(18,3)) Qty, 0 as MType, " + 
                        "Cast(0 as Decimal(18,3)) CumQty,Cast(0 as Decimal(18,3)) PrevQtty,'' as MUpdate,'' as MUOM_ID, Cast(0 as Decimal(18,3)) UFactor from [" + argDBName + "].dbo.Project_IOW A " +
                       "Inner Join [" + argDBName + "].dbo.IOW B on A.Project_IOW_ID=B.ProjIOWID and B.Revision_ID=" + argRevId + " " +
                       "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on A.Unit_Id=C.Unit_ID " +
                       "Where Project_IOW_ID in(Select B1.ProjIOWID from [" + argDBName + "].dbo.Project_Details A1 " +
                       "Inner Join [" + argDBName + "].dbo.IOW B1 on A1.IOW_Trans_ID=B1.IOW_Trans_ID Where A1.Resource_ID=" + argCompId + ")";

                    sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();

                }
                else
                {
                    sql = "Select B.ProjIOWID IOW_ID ,B.New_Serial_No RefSerialNo, '' Serial_No,B.Specification,C.Unit_Name UOM_ID,A.Analysis_ID Analysis_Head_ID,0 as DPEIOWTransID,0 as DPETransID,Cast(0 as Decimal(18,3)) Qty, " + 
                        "0 as MType,0 as CumQty,Cast(0 as Decimal(18,3)) PrevQtty,'' as MUpdate,'' as MUOM_ID, Cast(0 as Decimal(18,3)) UFactor from [" + argDBName + "].dbo.AnalysisIOW A " +
                       "Inner Join [" + argDBName + "].dbo.IOW B on A.IOW_Trans_ID=B.IOW_Trans_ID " +
                       "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on B.Unit_Id=C.Unit_ID " +
                       "Where B.ProjIOWID in(Select B1.ProjIOWID from [" + argDBName + "].dbo.Project_Details A1 " +
                       "Inner Join [" + argDBName + "].dbo.IOW B1 on A1.IOW_Trans_ID=B1.IOW_Trans_ID Where A1.Resource_ID=" + argCompId + ") " +
                       "and A.Revision_ID=" + argRevId + "";

                    sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();

                }
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable getDPEDetailsE(int argIOWId, int argAnlysId, string argDEPRegId, int argCompId)
        {
            SqlDataAdapter sda;            
            DataTable dt = null;
            BsfGlobal.OpenWPMDB();
            string sSql = "";
            try
            {
                if (argAnlysId != 0)
                {
                    sSql = "SELECT MUnitId,UFactor,Sum(Qty) as Qty,MType FROM DPEIOWTRans WHERE IOW_ID = " + argIOWId + " " +
                    "and AnalysisHeadID = " + argAnlysId + " and DPETransID in (Select DPETRansID from DPETrans Where DPERegisterID in (" + argDEPRegId.TrimEnd(',') + ") " +
                    "and Comp_ID = " + argCompId + ") Group by MUnitId,UFactor,MType";
                }
                else 
                {
                    sSql = "SELECT MUnitId,UFactor,Sum(Qty) as Qty,MType FROM DPEIOWTRans WHERE IOW_ID = " + argIOWId + " " +
                    "and DPETransID in (Select DPETransID from DPETrans Where DPERegisterID in (" + argDEPRegId.TrimEnd(',') + ") " +
                    "and Comp_ID = " + argCompId + ") Group by MUnitId,UFactor,MType";
                }              

                sda = new SqlDataAdapter(sSql,BsfGlobal.g_WPMDB);               
                dt = new DataTable();
               sda.Fill(dt);
               sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable PopulateMeasrColl(int argIowId, string argBilType, string argDPERedId, int argAHeadId, int argCompId)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sql = "";
            try
            {                

                if (argBilType.ToString() == "I")
                {
                    if (argAHeadId != 0)
                    {
                        sql = "SELECT * FROM DPEMeasurement WHERE DPETransId in " +
                            "(Select DPETransID from DPETRans Where DPERegisterId in (" + argDPERedId.TrimEnd(',') + ") " +
                            "and IOW_ID = " + argIowId + " and AnalysisHeadID = " + argAHeadId + ")";
                    }
                    else
                    {
                        sql = "SELECT * FROM DPEMeasurement WHERE DPETransId in " +
                            "(Select DPETransID from DPETRans Where DPERegisterId in (" + argDPERedId.TrimEnd(',') + ") " +
                            "and IOW_ID = " + argIowId + ")";
                    }
                    sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);                   
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();
                }
                else if (argBilType.ToString() == "S")
                {
                    if (argAHeadId != 0)
                    {
                        sql = "SELECT * FROM DPEMeasurement WHERE DPEIOWTransId in " +
                            "(Select DPEIOWTransID from DPEIOWTRans Where IOW_ID = " + argIowId + " and AnalysisHeadID = " + argAHeadId + " and DPETransId in " +
                            "(Select DPETransID from DPETRans Where DPERegisterId in (" + argDPERedId.TrimEnd(',') + ") " +
                            "and IOW_ID = " + argCompId + "))";
                    }
                    else
                    {
                        sql = "SELECT * FROM DPEMeasurement WHERE DPEIOWTransId in " +
                            "(Select DPEIOWTransID from DPEIOWTRans Where IOW_ID = " + argIowId + " and DPETransId in " +
                            "(Select DPETransID from DPETRans Where DPERegisterId in (" + argDPERedId.TrimEnd(',') + ") " +
                            "and IOW_ID = " + argCompId + "))";
                    }

                    sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
                    //sda = cmd.ExecuteReader();
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();
                }
                else if ((argBilType.ToString() == "L") || (argBilType.ToString() == "A"))
                {
                    if (argAHeadId != 0)
                    {
                        sql = "SELECT * FROM DPEMeasurement WHERE DPEIOWTransId in " +
                            "(Select DPEIOWTransID from DPEIOWTRans Where IOW_ID = " + argIowId + " and AnalysisHeadID = " + argAHeadId + " and DPETransId in " +
                            "(Select DPETransID from DPETRans Where DPERegisterId in (" + argDPERedId.TrimEnd(',') + ") " +
                            "and Comp_ID = " + argCompId + "))";
                    }
                    else
                    {
                        sql = "SELECT * FROM DPEMeasurement WHERE DPEIOWTransId in " +
                            "(Select DPEIOWTransID from DPEIOWTRans Where IOW_ID = " + argIowId + " and DPETransId in " +
                            "(Select DPETransID from DPETRans Where DPERegisterId in (" + argDPERedId.TrimEnd(',') + ") " +
                            "and Comp_ID = " + argCompId + "))";
                    }

                    sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
                    //sda = cmd.ExecuteReader();
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();
                }

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable PopulateIOWLabourColl(int argCompId,string argDPERegID, int argIOWID, int argAHeadID)
        {
            BsfGlobal.OpenWPMDB();
            SqlDataAdapter sda;            
            DataTable dt = null;
            string sSql = "";
            try
            {
                if (argIOWID != 0)
                {
                    sSql = "SELECT A.LabourTypeID,B.Resource_Name TypeName,Sum(A.Qty) Qty,A.Rate,Sum(A.Amount) Amount,A.MinRate,A.AppRate,A.AnalysisId FROM DPEIOWLabourTrans A " +
                        "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeID=B.Resource_Id " +
                        "WHERE A.DPEIOWTransId in " +
                        "(Select DPEIOWTransID from DPEIOWTRans Where IOW_ID = " + argIOWID + " and AnalysisHeadID = " + argAHeadID + " and DPETransId in " +
                        "(Select DPETransID from DPETRans Where DPERegisterId in (" + argDPERegID.TrimEnd(',') + ") " +
                        "and Comp_ID = " + argCompId + ")) Group by A.LabourTypeID,B.Resource_Name,A.MinRate,A.AppRate,A.Rate,A.AnalysisId";
                }
                else
                {
                    sSql = "SELECT A.LabourTypeID,B.Resource_Name TypeName,Sum(A.Qty) Qty,A.Rate,Sum(A.Amount) Amount,A.MinRate,A.AppRate,A.AnalysisId FROM DPEIOWLabourTrans A " +
                        "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeID=B.Resource_Id " +
                        "WHERE A.AnalysisId in " +
                        "(Select AnalysisId from DPEWBSTrans Where AnalysisId = " + argAHeadID + " and DPETransId in " +
                        "(Select DPETransID from DPETrans Where DPERegisterId in (" + argDPERegID.TrimEnd(',') + ") " +
                        "and Comp_ID = " + argCompId + ")) Group by A.LabourTypeID,B.Resource_Name,A.MinRate,A.AppRate,A.Rate,A.AnalysisId";
                }

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);                
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable UpdateItemLbrTrans(string argDPERegId, int argCompId, string argBtype)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sql = "";
            try
            {
                if (argBtype == "L" || argBtype == "A" || argBtype == "H" )
                {
                    sql = "Select A.LabourTypeID,B.Resource_Name TypeName,Sum(A.Qty) as Qty from DPEItemLabourTrans A " +
                        "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId = B.Resource_ID " +
                        "Where A.DPETransId in (Select DPETRansId From DPETrans " +
                        "Where Comp_ID =" + argCompId + " and BillType='"+argBtype+"' and DPERegisterID in (" + argDPERegId.TrimEnd(',') + ")) " +
                        "Group by A.LabourTypeId,B.Resource_Name";
                }
                else
                {
                    sql = "Select A.LabourTypeID,B.Resource_Name TypeName,Sum(A.Qty) as Qty from DPEItemLabourTrans A " +
                        "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId = B.Resource_ID " +
                        "Where A.DPETransId in (Select DPETRansId From DPETrans " +
                        "Where IOW_ID =" + argCompId + " and BillType='" + argBtype + "' and DPERegisterID in (" + argDPERegId.TrimEnd(',') + ")) " +
                        "Group by A.LabourTypeId,B.Resource_Name";
                }

                sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
                //sda = cmd.ExecuteReader();
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable InsertSubIOW(int argCompId,string argSplit,int argRevId,string argDBName)
        {

            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                if (argSplit == "N")
                {
                    sSql = "Select ROW_NUMBER()  OVER (ORDER BY  A.ProjIOWID) As RowId,A.ProjIOWID IOW_ID,'' Level3,'' Level2,'' Level1,A.New_Serial_No RefSerialNo, " + 
                        "'' Serial_No,A.Specification,B.Unit_Name UOM_ID, " +
                        "0 as Analysis_Head_ID,0 as BillTransID,Cast(0 as Decimal(18,3)) Qty, 0 as MType, " +
                        " '' as MUOM_ID, Cast(0 as Decimal(18,3)) UFactor,Cast(0 as Decimal(18,3)) Rate,Cast(0 as Decimal(18,3)) Amount,0 as BillIOWTransID " +  
                        "from [" + argDBName + "].dbo.IOW A  " +
                        "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM B on A.Unit_ID=B.Unit_ID " +
                        "Where A.Revision_ID=" + argRevId + " and " +
                        "A.IOW_Trans_ID in (Select A1.IOW_Trans_ID from [" + argDBName + "].dbo.Rate_Analysis A1 " +
                        "Inner Join [" + argDBName + "].dbo.IOW B1 on A1.IOW_In_IOW_Id=B1.IOW_Trans_ID Where B1.Revision_ID=" + argRevId + " and B1.ProjIOWID=" + argCompId + ")";

                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();

                }
                else
                {

                    
                    sSql = "Select ROW_NUMBER()  OVER (ORDER BY  A.ProjIOWID) As RowId,A.ProjIOWID IOW_ID, " +
                            "case when H.AnalysisHeadName Is null then '' Else H.AnalysisHeadName End Level3, " +
                            "case when G.AnalysisHeadName Is null then '' Else G.AnalysisHeadName End Level2, " +
                            "case when F.AnalysisHeadName Is null then '' Else F.AnalysisHeadName End Level1, " +
                            "E.AnalysisHeadName,A.New_Serial_No RefSerialNo,A.Specification,C.Unit_Name UOM_ID, " +
                           "B.Analysis_ID Analysis_Head_ID,0 as BillTransID,Cast(0 as Decimal(18,3)) Qty,  " + 
                           "0 as MType, " +
                           "'' as MUOM_ID, Cast(0 as Decimal(18,3)) UFactor,Cast(0 as Decimal(18,3)) Rate,Cast(0 as Decimal(18,3)) Amount,0 as BillIOWTransID " +
                            "From [" + argDBName + "].dbo.IOW A " +
                            "Inner Join [" + argDBName + "].dbo.AnalysisIOW B on A.IOW_Trans_ID=B.IOW_Trans_ID  " +
                            "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on A.Unit_Id=C.Unit_ID  " +
                            "Inner Join [" + argDBName + "].dbo.AnalysisHeads E on B.Analysis_ID=E.AnalysisId and E.LastLevel=1  " +
                            "Left Join [" + argDBName + "].dbo.AnalysisHeads F on E.ParentID=F.AnalysisID   " +
                            "Left Join [" + argDBName + "].dbo.AnalysisHeads G on F.ParentID=G.AnalysisID   " +
                            "Left Join [" + argDBName + "].dbo.AnalysisHeads H on G.ParentID=H.AnalysisID   " +
                            "Join (Select A1.IOW_Trans_ID,A1.Qtty from [" + argDBName + "].dbo.Rate_Analysis A1 " +
                            "Inner Join [" + argDBName + "].dbo.IOW B1 on A1.IOW_In_IOW_Id=B1.IOW_Trans_ID  " +
                            "Where B1.Revision_ID=" + argRevId + " and B1.ProjIOWID=" + argCompId + ") I on A.IOW_Trans_ID = I.IOW_Trans_ID " +
                            "Where A.IOW_Trans_ID In(Select A1.IOW_Trans_ID from [" + argDBName + "].dbo.Rate_Analysis A1 " +
                            "Inner Join [" + argDBName + "].dbo.IOW B1 on A1.IOW_In_IOW_Id=B1.IOW_Trans_ID   " +
                            "Where B1.Revision_ID=" + argRevId + " and B1.ProjIOWID=" + argCompId + ") ";

                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();
                }
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable PopulateBillFormatType(int argTypeId)
        {

            SqlDataAdapter sda;
            DataTable dt = new DataTable();
            string sql = "";
            BsfGlobal.OpenWPMDB();

            try
            {
                sql = "Select A.TypeId,A.RefNo Ref,A.TypeName Description,A.HeadingName Heading,  Case  When A.Header = 1 Then 'Yes' Else 'No' End as Header,A.Bold,B.TypeName AccountTypeName,Case When A.AddType= 1 then '+' Else '-' End as Sign, " +
                       "A.OrderNo from BillFormatMaster A " +
                       "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.AccountType B on A.AccountTypeId = B.TypeId " +
                       "Where A.TypeId = " + argTypeId;

               //sql = "Select TypeId,RefNo Ref,TypeName Description,HeadingName Heading,  Case  When Header = 1 Then 'Yes' Else 'No' End as Header,Bold,case When AddType= 1 then '+' Else '-' End as Sign, " +
               //       "OrderNo from BillFormatMaster Where TypeId= " + argTypeId;
               sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
               sda.Fill(dt);
               sda.Dispose();

               BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }


        public DataSet PopulateBillFormate()
        {

            SqlDataAdapter sda;            
            DataSet ds = new DataSet();
            string sql = "";
            BsfGlobal.OpenWPMDB();
           
            try
            {
                //if (argType == "B")

                sql = "Update BillFormat Set Formula = 'R1+R2' Where TypeId=6 and Formula =''";
                SqlCommand cmd = new SqlCommand(sql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sql = "Select A.TypeId,A.RefNo Ref,A.TypeName Description,A.HeadingName Heading,  Case  When A.Header = 1 Then 'Yes' Else 'No' End as Header,A.Bold,B.TypeName AccountTypeName,Case When A.AddType= 1 then '+' Else '-' End as Sign, " +
                       "A.OrderNo from BillFormatMaster A " +
                       "Left Join [" + BsfGlobal.g_sFaDBName + "].dbo.AccountType B on A.AccountTypeId = B.TypeId " +
                       "Order by A.OrderNo Asc";
                //else
                //    sql = "Select TypeId,RefNo Ref,TypeName Description,HeadingName Heading,  case Header When 'True' Then 'Yes' Else 'No' End as Header,Type, case  Bold When 'True' Then 1 Else 0 End as Bold,case AddType When 'True' then '+' Else '-' End as Sign, " +
                //        "OrderNo,0 as QualifierId from LabourFormat order by OrderNo Asc";

                sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
                sda.Fill(ds, "Format");
                sda.Dispose();

                sql = "Select case BillRound when 'True' then 1 Else 0 End as BillRound,CurrencyDigit from RoundSetup";
                sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
                sda.Fill(ds, "RoundSetup");
                sda.Dispose();
              
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return ds;
        }

        public DataTable GetCCBillFormatType(int argTypeId, int argCCId)
        {
            DataTable dt = new DataTable();
            string sSql = "Select HeadingName,Formula from BillFormat Where TypeId=" + argTypeId + " and CostCentreId=" + argCCId;
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();

            return dt;
        }

        public DataTable PopulateCCBillFormate(int argCCID)
        {
            BsfGlobal.OpenWPMDB();
            SqlDataAdapter sda;            
            DataTable dt = null;
            string sSql = "";
            try
            {
                //if (argType == "B")
                //{

                sSql = "Update BillFormat Set Formula = 'R1+R2' Where TypeId=6 and Formula =''";
                SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "SELECT A.TypeId,B.RefNo Ref,B.TypeName Description,A.HeadingName Heading,A.Formula, " +
                           "Case When B.Header = 1 then 'Yes' Else 'No' End as Header,Case When A.Bold =1 Then 1 Else 0 End as Bold,Case When B.AddType =1 then '+' Else '-' End as Sign,A.OrderNo " +
                           "FROM BillFormat A " +
                           "INNER JOIN BillFormatMaster B ON A.TypeId=B.TypeId " +
                           "WHERE A.CostCentreId = " + argCCID + " ORDER BY A.OrderNo";

                //}
                //else
                //{
                //    sSql = "SELECT A.TypeId,B.RefNo Ref,B.TypeName Description ,A.Formula,A.HeadingName Heading,A.AccountId, " +
                //       "case B.Header When 'True' Then 'Yes' Else 'No' End as Header, B.Type, case A.Bold When'True' Then 1 Else 0 End as Bold,case B.AddType When 'True' then '+' Else '-' End as Sign,A.OrderNo  " +
                //       "FROM LabourFormatTrans A " +
                //       "Left JOIN LabourFormat B ON A.TypeId=B.TypeId " +
                //       "WHERE A.CostCentreId = " + argCCID + " ORDER BY A.OrderNo";                    
                //}

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);                
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();                

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable GetBillFormateDetails(int argTypeId, string argType)
        {
            SqlDataAdapter sda;            
            DataTable dt = null;
            BsfGlobal.OpenWPMDB();
            string sql = "";
            try
            {
                if (argType == "B")
                {
                    sql = "Select * from BillFormatMaster where TypeId= " + argTypeId + " order by OrderNo";
                }
                else
                {
                    sql = "Select * from LabourFormat where TypeId= " + argTypeId + " order by OrderNo";
                }

                sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);             
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
             

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        

        public void InsertBFMaster(BillFormatMaster argBFMaster,string argfrm)
        {

            SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();
            SqlCommand cmd;
            string sSql = "";
            int iQualId = 0;
            try
            {
                if (argfrm == "B")
                {
                    if (argBFMaster.QualifierId != 0)
                    {
                        sSql = "Select QualifierId from BillFormatMaster Where QualifierId=" + argBFMaster.QualifierId;
                        cmd = new SqlCommand(sSql, conn, tran);
                        iQualId= Convert.ToInt32(CommFun.IsNullCheck(cmd.ExecuteScalar()));
                        cmd.Dispose();
                        if (iQualId != 0)
                        {
                            throw new Exception("Already Exist in this Qualifier");                            
                        }
                    }

                    sSql = "Insert into BillFormatMaster(TypeID,TypeName,Type,AddType,OrderNo,HeadingName,Header,RefNo,Bold,QTypeId,QualifierId) " +
                        "values(" + argBFMaster.BFTypeId + ",'" + argBFMaster.TypeName + "','" + argBFMaster.Type + "'," + argBFMaster.Addtype + ", " + 
                        " " + argBFMaster.OrderNo + ",'" + argBFMaster.Heading + "'," + argBFMaster.Header + ",'" + argBFMaster.RefNo + "'," + argBFMaster.Bold + ", " +
                        " " + argBFMaster.QTypeId + "," + argBFMaster.QualifierId + ") SELECT SCOPE_IDENTITY();";
                }
                else
                {
                    sSql = "Insert into LabourFormat(TypeID,TypeName,Type,AddType,OrderNo,HeadingName,Header,RefNo,Bold) " +
                       "values(" + argBFMaster.BFTypeId + ",'" + argBFMaster.TypeName + "','" + argBFMaster.Type + "'," + argBFMaster.Addtype + "," + argBFMaster.OrderNo + ",'" + argBFMaster.Heading + "'," + argBFMaster.Header + ",'" + argBFMaster.RefNo + "'," + argBFMaster.Bold + ") SELECT SCOPE_IDENTITY();";
                }

                
                cmd = new SqlCommand(sSql, conn,tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                tran.Commit();
            }
            catch (Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
        }

        public void UpdateBFMaster(BillFormatMaster argBFMaster,string m_sArgType)
        {

            SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlCommand cmd;
            SqlTransaction tran = conn.BeginTransaction();
            string sSql = "";
            //int iQualId = 0;
            try
            {

                if (m_sArgType == "B")
                {

                    //if (argBFMaster.QualifierId != 0)
                    //{
                    //    sSql = "Select QualifierId from BillFormatMaster Where QualifierId=" + argBFMaster.QualifierId;
                    //    cmd = new SqlCommand(sSql, conn, tran);
                    //    iQualId = Convert.ToInt32(CommFun.IsNullCheck(cmd.ExecuteScalar()));
                    //    cmd.Dispose();
                    //    if (iQualId != 0)
                    //    {
                    //        throw new Exception("Already Exist in this Qualifier");
                    //    }
                    //}

                    sSql = "Update BillFormatMaster set TypeName='" + argBFMaster.TypeName + "',Type='" + argBFMaster.Type + "',AddType=" + argBFMaster.Addtype + ",OrderNo=" + argBFMaster.OrderNo + ", " +
                            "HeadingName='" + argBFMaster.Heading + "',Header=" + argBFMaster.Header + ",RefNo='" + argBFMaster.RefNo + "',Bold=" + argBFMaster.Bold + " ,QTypeId=" + argBFMaster.QTypeId + ", QualifierId="+argBFMaster.QualifierId+" " +
                            "Where TypeId=" + argBFMaster.BFTypeId;
                }
                else
                {
                    sSql = "Update LabourFormat set TypeName='" + argBFMaster.TypeName + "',Type='" + argBFMaster.Type + "',AddType=" + argBFMaster.Addtype + ",OrderNo=" + argBFMaster.OrderNo + ", " + 
                        "HeadingName='" + argBFMaster.Heading + "',Header=" + argBFMaster.Header + ",RefNo='" + argBFMaster.RefNo + "',Bold=" + argBFMaster.Bold + " " +
                      "Where TypeId=" + argBFMaster.BFTypeId;
                }
                cmd = new SqlCommand(sSql, conn,tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                tran.Commit();
            }
            catch (Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
        }

        public int BillFormatMaxTypeId(string argfrm)
        {
            int retunVal = 0;                        
            BsfGlobal.OpenWPMDB();        
            string sSql = "";

            try
            {
                if(argfrm=="B")
                    sSql="Select Max(TypeID) from BillFormatMaster";
                else
                    sSql="Select Max(TypeID) from LabourFormat";

                SqlCommand Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                SqlDataReader dr = Command.ExecuteReader();
                DataTable dt = new DataTable();
                dt.Load(dr);
                dr.Close();
                if (dt.Rows.Count > 0)
                {
                    retunVal = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[0][0].ToString(),CommFun.datatypes.vartypenumeric));
                }
                Command.Dispose();
                dt.Dispose();
             
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
           
            return retunVal;
        }

        public int BillFormatMaxOrdNo(string argfrm)
        {
            int retunVal = 0;            
            BsfGlobal.OpenWPMDB();      
            string sSql = "";

            try
            {
                if(argfrm=="B")
                    sSql="Select Max(OrderNo) from BillFormatMaster";
                else
                    sSql="Select Max(OrderNo) from LabourFormat";

                SqlCommand Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                SqlDataReader dr = Command.ExecuteReader();
                DataTable dt = new DataTable();
                dt.Load(dr);
                dr.Close();
                if (dt.Rows.Count > 0)
                {
                    retunVal = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[0][0].ToString(),CommFun.datatypes.vartypenumeric));
                }
                Command.Dispose();
                dt.Dispose();
                

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return retunVal;
        }


        public int CheckTypeIdUsed(int argTypeID)
        {
            int retunVal = 0;
            BsfGlobal.OpenWPMDB();          
            string sSql = "";

            try
            {

                    sSql="Select TypeID from BillFormat Where TypeId=" + argTypeID;
                //else
                //    sSql = "Select TypeID from LabourFormatTrans Where TypeId=" + argTypeID;

                SqlCommand Command = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                SqlDataReader dr = Command.ExecuteReader();
                DataTable dt = new DataTable();
                dt.Load(dr);
                dr.Close();
                if (dt.Rows.Count > 0)
                {
                    retunVal = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[0][0].ToString(),CommFun.datatypes.vartypenumeric));
                }
                dt.Dispose();
                Command.Dispose();

                
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return retunVal;
        }

        public DataTable getTypeList(int argCCId,string argType)
        {
            SqlDataAdapter sda;            
            DataTable dt = null;
            BsfGlobal.OpenWPMDB();
            string sql = "";       

            try
            {
                if (argType == "B")
                {
                    sql = "Select TypeId,RefNo,TypeName from BillFormatMaster Where " +
                        "TypeId Not in (Select TypeId from BillFormat Where " +
                        "CostCentreId = " + argCCId + ") and TypeId Not in (Select TypeId from BillFormatMaster Where FormatTypeId in (9,12,13) and Addtype=1)";
                }
                else
                {
                    sql = "Select TypeId,RefNo,TypeName from LabourFormat Where " +
                        "TypeId Not in (Select TypeId from LabourFormatTrans Where " +
                        "CostCentreId = " + argCCId + ")";
                }

                sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public void InsertIntoCBFormat(int argTypeId, int argCCId, int argOrderNo,string argType)
        {

            SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();
            SqlDataReader sda;
            SqlCommand cmd;
            DataTable dt = null;
            string sSql = "";
            int ibold = 0;
            string sFType = "B";

            if (argCCId == 0)
            {
                sFType = "A";
            }

            try
            {
                if (argType == "B")
                    sSql = "Select TypeId,Bold,HeadingName,OrderNo from BillFormatMaster where TypeId = " + argTypeId;
                else
                    sSql = "Select TypeId,Bold,HeadingName,OrderNo from LabourFormat where TypeId = " + argTypeId;

                cmd = new SqlCommand(sSql, conn, tran);
                sda = cmd.ExecuteReader();
                dt = new DataTable();
                dt.Load(sda);
                sda.Close();
                cmd.Dispose();
                sSql = "";
                if (dt.Rows.Count > 0)
                {
                    for (int t = 0; t < dt.Rows.Count; t++)
                    {
                        if (dt.Rows[t]["Bold"].ToString() == "True")
                            ibold = 1;
                        if (argType == "B")
                        {
                            sSql = "Insert into BillFormat(TypeId,CostCentreId,OrderNo,HeadingName,Bold,FormatType) " +
                                "Values (" + argTypeId + "," + argCCId + "," + CommFun.IsNullCheck(dt.Rows[t]["OrderNo"], CommFun.datatypes.vartypenumeric) + ", " +
                                "'" + CommFun.IsNullCheck(dt.Rows[t]["HeadingName"].ToString(), CommFun.datatypes.vartypestring) + "', " + ibold + ",'"+sFType+"')";
                        }
                        else
                        {
                            sSql = "Insert into LabourFormatTrans(TypeId,CostCentreId,OrderNo,HeadingName,Bold) " +
                             "Values (" + argTypeId + "," + argCCId + "," + CommFun.IsNullCheck(dt.Rows[t]["OrderNo"], CommFun.datatypes.vartypenumeric) + ", " +
                             "'" + CommFun.IsNullCheck(dt.Rows[t]["HeadingName"].ToString(), CommFun.datatypes.vartypestring) + "', " + ibold + ")";
                        }
                    }
                    cmd = new SqlCommand(sSql, conn,tran);
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }

                if (argType =="B")
                {
                    sSql = "Update BillFormat Set Formula = 'R1+R2' Where TypeId=6 and Formula =''";
                    cmd = new SqlCommand(sSql, conn, tran);
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }
                tran.Commit();
            }
            catch (Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
        }

        public DataTable PopulateBillFormat(int argTypeId,int argCCId,string frmWhere)
        {

            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sql = "";
            try
            {
                if (frmWhere == "B")
                {
                    sql = "Select A.TypeId,B.TypeName,A.Formula,A.HeadingName,A.AccountId from BillFormat A " +
                        "Left Join BillFormatMaster B on A.TypeId=B.TypeId " +
                        "Where A.TypeId= " + argTypeId + " and A.CostCentreId = " + argCCId + "";
                }
                else
                {
                    sql = "SELECT A.TypeId,B.TypeName ,A.Formula,A.HeadingName,A.AccountId " +                       
                       "FROM LabourFormatTrans A " +
                       "Left JOIN LabourFormat B ON A.TypeId=B.TypeId " +
                       "WHERE A.TypeId=" + argTypeId + " and A.CostCentreId = " + argCCId;
                }

                sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);                
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public void InsertBillFormatTDS(BillFormateTDSBO arfTDS)
        {

            SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();            
            SqlCommand cmd;            
            string sSql = "";            

            try
            {
                sSql = "Delete from BillFormatTDS Where TypeId= " + arfTDS.BAbsTypeId + " and CostCentreId = " + arfTDS.CostCentreId+ "";                
              
                cmd = new SqlCommand(sSql,conn,tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                sSql = "";

                sSql = "Insert into BillFormatTDS(TypeId,CostCentreId,Formula,TDSPer,SurPer,EDPer) " +
               "Values(" + arfTDS.BAbsTypeId + "," + arfTDS.CostCentreId + ",'" + arfTDS .Formula+ "', " +
               "" + arfTDS.TDSPer + "," + arfTDS.SurPer + "," + arfTDS.EDPer + ")";             
                cmd = new SqlCommand(sSql,conn,tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();


                sSql = "Update BillFormat Set HeadingName= '" + arfTDS.Heading + "', " +
                   "Formula = '" + arfTDS.Formula + "', AccountId = " + arfTDS.AccountId + " " +
                   "Where TypeId= " + arfTDS.BAbsTypeId + " and CostCentreId = " + arfTDS.CostCentreId;     
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                tran.Commit();
            }
            catch (Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
        }

        

        public bool CheckBillDPETrans(int BillRegId, int argDPERegId)
        {
            string sSql = "";
            int m_countRec = 0;
            bool checkDPEMUnit = false;            
            SqlCommand cmd;            
            BsfGlobal.OpenWPMDB();


            try
            {
                sSql = "Select count(*) from BillDPETrans " +
                    "Where BillRegisterId=" + BillRegId + " and DPERegisterId=" + argDPERegId;
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    m_countRec = Convert.ToInt32(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypenumeric));
                }
                if (m_countRec != 0)
                {
                    checkDPEMUnit = true;
                }
                else { checkDPEMUnit = false; }


            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return checkDPEMUnit;
        }

        public int InsertBillEntries(BillRegister argBReg, List<BillAbstract> argBAbs, List<BillEntry> argBEntry, List<BillLabourTypeTransBO> argBLbrType, List<BillMaterialRecovery> argBMatRec, List<BillIOWTransUpdate> argBIOWTrans, List<BIMeasurementBO> argBIMsrment, List<BillIOWMeasurementBOUpdate> argBIOWMsrment, List<BillFormateTDSNewBO> argBFTDS, DataTable argBLbrTrNew, string argBillType, int argCCId, int argContId, int argBdetId, int argRevId, List<BillWBSTrans> argWBSTrans, List<BillWBSMeasurementTransBO> argWBSMsrTrans, List<DPERegTrans> argDPE, ref bool argUpdate, ref string argRefNo, List<BillAdvanceBO> argAdvance, DataTable dtQtrans, List<BillTurnKeyEntry> argTurnKeyTrans, List<BillLBRResourceTransBO> argLbrRes, DataTable argWOTransQual, List<BillMSteelSelection> oSteelSel, List<BillLSWBSTrans> argLSWBS, bool argInternal, List<BillLabourAdvance> argBLbrAdv, List<BillServiceTaxNewBO> argBFST, DataTable dtLbrAdj, string argDBName, List<BillLSVTrans> argBillLSV, List<BillLSTransBO> argBillLSTrans, DataTable argResQualTran, DataTable argResRateQ, List<LabourTransBO> argItemLbr, List<LabourTransBO> argLabourItem, List<LabourTransBO> argLabourSum, List<BillRetentionBO> argRetention, DataTable argMatAdvance, List<BillVATBO> argVAT)
        {
            #region Variables
            int iBillRegId = 0;
            int iBillTransId = 0;
            int iBillIOWTransId = 0;
            string sCVType = "";
            sCVType = BsfGlobal.GetVoucherType(13);
            SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();
            string sSql = "";
            string sRefDate = "";
            int iBillWBSTransId = 0;
            
            BsfGlobal.VoucherType oVType = new BsfGlobal.VoucherType();
            BsfGlobal.VoucherType oVCCType = new BsfGlobal.VoucherType();
            BsfGlobal.VoucherType oVCompanyType = new BsfGlobal.VoucherType();

            #endregion

            try
            {
                
                sRefDate = String.Format("{0:dd-MMM-yyyy}", argBReg.RefDate);

                oVType = BsfGlobal.GetVoucherNo(13, argBReg.EDate, 0, 0,conn,tran,"I");
                if (oVType.GenType == true)
                {
                    argBReg.VNo = oVType.VoucherNo;
                }
                oVCCType = BsfGlobal.GetVoucherNo(13, argBReg.EDate, 0, argBReg.CostCentreId, conn, tran, "I");
                if (oVCCType.GenType == true)
                {
                    argBReg.CCBVNo = oVCCType.VoucherNo;
                }
                oVCompanyType = BsfGlobal.GetVoucherNo(13, argBReg.EDate, argBReg.CompanyId, 0, conn, tran, "I");
                if (oVCompanyType.GenType == true)
                {
                    argBReg.CompanyBVNo = oVCompanyType.VoucherNo;
                }

                #region Register Insert
                //Insert BillRegister
                SqlCommand Command = new SqlCommand("Insert_BillRegister", conn, tran);
                Command.CommandType = CommandType.StoredProcedure;
                Command.Parameters.Clear();
                Command.Parameters.AddWithValue("@BillRegisterId", argBReg.BillRegisterId);
                Command.Parameters["@BillRegisterId"].Direction = ParameterDirection.Output;
                Command.Parameters.AddWithValue("@Edate", argBReg.EDate);
                Command.Parameters.AddWithValue("@FDate", argBReg.FrmDate);
                Command.Parameters.AddWithValue("@TDate", argBReg.ToDate);
                Command.Parameters.AddWithValue("@VNo", argBReg.VNo);
                Command.Parameters.AddWithValue("@CCBVNo", argBReg.CCBVNo);
                Command.Parameters.AddWithValue("@BillNo", argBReg.BillNo);
                Command.Parameters.AddWithValue("@ContractorID", argBReg.ContractorID);
                Command.Parameters.AddWithValue("@BillType", argBReg.BillType);
                Command.Parameters.AddWithValue("@BillDetID", argBReg.BillDetId);
                Command.Parameters.AddWithValue("@BillAmount", argBReg.BillAmount);
                Command.Parameters.AddWithValue("@Narration", argBReg.Narration);
                Command.Parameters.AddWithValue("@CostCentreId", argBReg.CostCentreId);
                Command.Parameters.AddWithValue("@LRoundAmt", argBReg.LRoundAmt);
                Command.Parameters.AddWithValue("@LNetAmt", argBReg.LNetAmt);
                Command.Parameters.AddWithValue("@IOWAmount", argBReg.IOWAmount);
                Command.Parameters.AddWithValue("@LabourAmount", argBReg.LabourAmount);
                Command.Parameters.AddWithValue("@BillUpdateType",Convert.ToChar(argBReg.BillUpdateType));
                Command.Parameters.AddWithValue("@WORegisterId", argBReg.WORegisterID);
                Command.Parameters.AddWithValue("@CreatedUser", argBReg.CreatedUser);
                Command.Parameters.AddWithValue("@CreatedDate", argBReg.CreatedDate);
                Command.Parameters.AddWithValue("@ModifiedUser", argBReg.ModifiedUser);
                Command.Parameters.AddWithValue("@ModifiedDate", argBReg.ModifiedDate);
                Command.Parameters.AddWithValue("@CompanyBVNo", argBReg.CompanyBVNo);
                
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                iBillRegId = (int)Command.Parameters["@BillRegisterId"].Value;

                int iReady = 0;
                if (argBReg.Ready == true) { iReady = 1; }


                //Update WorkAccountId in BillRegister
                sSql = "Update BillRegister Set WorkAccountId=" + argBReg.WorkAccountId + ",FormatType='" + argBReg.FormatType + "', " +
                    "CostOption='" + argBReg.CostOption + "',RefDate='" + sRefDate + "',RefNo='" + argBReg.RefNo + "',QualType=" + argBReg.QualType + ",Ready = " + iReady + ",LabourUsedType = '" + argBReg.LabourUsedType + "'  Where BillRegisterId = " + iBillRegId;
                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                //Update AdjustAmt in WORegister,for Advance option WOAdvAmt Validation

                //if (argBReg.FormatType == "A")
                //{
                //    sSql = "Update WOPaymentTermsNew Set AdjustAmount=" + argBReg.BillAmount + " where TermsId=" + argTermsId + " and WORegisterId = " + argBReg.WORegisterID;
                //    Command = new SqlCommand(sSql, conn, tran);
                //    Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                //}
                
                //Delete BillLSTrans Table....
                //sSql = "Delete from  BillLSTrans where BillRegisterID = " + iBillRegId;
                //Command = new SqlCommand(sSql, conn, tran);
                //Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                ////Delete BillLSTrans Table....
                //sSql = "Delete from  BillDPETrans where BillRegisterID = " + iBillRegId;
                //Command = new SqlCommand(sSql, conn, tran);
                //Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();


                foreach (LabourTransBO objLbr in argLabourSum)
                {
                    sSql = "Insert into BillLabourTrans(BillRegisterId,LabourTypeId,Qty,Rate,Amount,MinRate,AppRate) " +
                           "Values(" + iBillRegId + "," + objLbr.LabourTypeID + "," + objLbr.Qty + "," + objLbr.Rate + "," + objLbr.Amount + "," + objLbr.MinRate + ", " + objLbr.AppRate + ")";
                    Command = new SqlCommand(sSql, conn, tran);
                    Command.ExecuteNonQuery(); Command.Dispose();
                    Command.Dispose();
                }


                if (argBReg.FormatType == "R")
                {
                    foreach (BillRetentionBO obj in argRetention)
                    {
                        if (Convert.ToDecimal(CommFun.IsNullCheck(obj.CurAmount, CommFun.datatypes.vartypenumeric)) > 0)
                        {
                            sSql = "Insert into BillRetentionAdjustment(BillRegisterId,AdjBillRegisterId,Amount) " +
                                   "Values(" + obj.BillRegisterId + "," + iBillRegId + "," + obj.CurAmount + ")";
                            Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose();
                        }
                    }
                }

                 if (argDPE != null)
                 {
                        List<DPERegTrans> oDpe = argDPE;
                        if (oDpe.Count > 0)
                        {
                            foreach (DPERegTrans objDPE in oDpe)
                            {
                                //Insert BillDPETrans

                                sSql = "Insert into BillDPETrans(BillRegisterID,DPERegisterID,TypeId) Values(" + iBillRegId + "," + objDPE.DPERegId + "," + objDPE.TypeId + ")";
                                Command = new SqlCommand(sSql, conn, tran);
                                Command.ExecuteNonQuery(); Command.Dispose(); 

                                //Update DPERegister Set ConvertBill=1 Where DPERegisterId ="++""
                                Command = new SqlCommand("Update DPERegister Set ConvertBill=1 Where DPERegisterId =" + objDPE.DPERegId + "", conn, tran);
                                Command.ExecuteNonQuery(); Command.Dispose(); 

                                //CommFun.ActualCompUpdate(objDPE.DPERegId, argCCId, "D", false, argRevId, argBReg.ContractorID, argDBName,conn, tran);
                            }

                            //InsertRateQ()
                        }
                    }

                //insert AdjustAdvance Amount
                if (argBReg.FormatType == "B")
                {
                    foreach (BillAdvanceBO obj in argAdvance)
                    {
                        decimal AdvAmount = Convert.ToDecimal(CommFun.IsNullCheck(obj.CAmount, CommFun.datatypes.vartypenumeric));
                        if (AdvAmount > 0)
                        {
                            sSql = "Insert Into AdvAdjustment (BillRegisterId,WORegisterId,Amount,RegId,FormatTypeId) " +
                                    "Values (" + iBillRegId + "," + obj.WORegisterId + "," + obj.CAmount + "," +  obj.RegId  + ", " + obj.FormatTypeId +")";
                            Command = new SqlCommand(sSql, conn, tran);
                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                            //sSql = "Update WOPaymentTermsNew Set AdjustAmount=AdjustAmount+" + AdvAmount + " " +
                            //        "Where WORegisterId = " + obj.WORegisterId;
                            //Command = new SqlCommand(sSql, conn, tran);
                            //Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                        }
                    }
                }

                foreach (DataRow dRow in argMatAdvance.Rows)
                {
                    sSql = "Insert into BillMaterialAdvanceTrans(BillRegisterId,TypeId,ResourceId,Qty,Rate,Amount,Per,AdvanceAmt) " +
                           "Values(" + iBillRegId + "," + Convert.ToInt32(dRow["TypeId"]) + ", " + Convert.ToInt32(dRow["ResourceId"]) + "," + Convert.ToDecimal(dRow["Qty"]) + "," + Convert.ToDecimal(dRow["Rate"]) + "," + Convert.ToDecimal(dRow["Amount"]) + "," + Convert.ToDecimal(dRow["Per"]) + ", " + Convert.ToDecimal(dRow["AdvanceAmt"]) + ")";
                    Command = new SqlCommand(sSql, conn, tran);
                    Command.ExecuteNonQuery(); Command.Dispose();
                }

                
                foreach (BillLSTransBO obj in argBillLSTrans)
                {
                    sSql = "Insert into BillLSTrans(LabourStrengthID,BillRegisterID,TypeId) " +
                           "Values(" + obj.LabourStrengthID + "," + iBillRegId + ", " + obj.TypeId + ")";
                    Command = new SqlCommand(sSql, conn, tran);
                    Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                    sSql = "Update LabourStrengthMaster Set ConvertBill=1 Where LabourStrengthID  = " + obj.LabourStrengthID;
                    Command = new SqlCommand(sSql, conn, tran);
                    Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                }


                //Insert BillTypeTrans
                //for (int p = 0; p < argBillType.Count; p++)
                //{
                //    sSql="Insert Into BillTypeTrans (BillRegisterId,BillType) values (" + iBillRegId + ",'" + argBillType[p].ToString() + "')";
                //    Command = new SqlCommand(sSql, conn, tran);
                //    Command.ExecuteNonQuery(); Command.Dispose();
                //}
                #endregion
                
                #region Insert BillLabours

                //Insert BillLabourTrans

                //List<BillLabourTrans> argBLbrTrNew-BillLabourTrans
                //for (int u = 0; u < argLbrTrnNew.Rows.Count; u++)
                //{
                //    Command = new SqlCommand("Insert_BillLabourTrans", conn, tran);
                //    Command.CommandType = CommandType.StoredProcedure;
                //    Command.Parameters.Clear();
                //    Command.Parameters.AddWithValue("@BillRegisterId", iBillRegId);
                //    Command.Parameters.AddWithValue("@LabourTypeId", argLbrTrnNew.Rows[u]["TypeId"].ToString());
                //    Command.Parameters.AddWithValue("@Qty", argLbrTrnNew.Rows[u]["Qty"].ToString());
                //    Command.Parameters.AddWithValue("@Rate", argLbrTrnNew.Rows[u]["Rate"].ToString());
                //    Command.Parameters.AddWithValue("@Amount", argLbrTrnNew.Rows[u]["Amount"].ToString());
                //    Command.Parameters.AddWithValue("@MinRate", argLbrTrnNew.Rows[u]["MinWage"].ToString());
                //    Command.Parameters.AddWithValue("@AppRate", argLbrTrnNew.Rows[u]["AppRate"].ToString());

                //    Command.ExecuteNonQuery(); Command.Dispose();
                //}

                //Insert LabourBillTrans

                //List<LabourBillTrans> argLbrTrnNew -Wages Format
                for (int u = 0; u <argBLbrTrNew.Rows.Count;u++)
                {
                    Command = new SqlCommand("Insert_LabourBillTrans", conn, tran);
                    Command.CommandType = CommandType.StoredProcedure;
                    Command.Parameters.Clear();
                    Command.Parameters.AddWithValue("@BillRegisterId", iBillRegId);
                    Command.Parameters.AddWithValue("@TypeId", argBLbrTrNew.Rows[u]["TypeId"].ToString());
                    Command.Parameters.AddWithValue("@Amount", argBLbrTrNew.Rows[u]["Amount"].ToString());
                    Command.Parameters.AddWithValue("@Formula", argBLbrTrNew.Rows[u]["Formula"].ToString());

                    Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                }

                #endregion 
                
                #region Qualifiers

                //Bill Qualifier

                if (dtQtrans != null)
                {
                    for (int q = 0; q < dtQtrans.Rows.Count; q++)
                    {
                        sSql = "Insert Into BillRateQ (BillRegisterID,QualifierId,Expression,ExpPer,Add_Less_Flag,SurCharge,EDCess,Amount,ExpValue,ExpPerValue,SurValue,EDValue,HEDCess,HEDValue,NetPer) " +
                                 " Values (" + iBillRegId + "," + Convert.ToInt32(CommFun.IsNullCheck(dtQtrans.Rows[q]["QualifierId"], CommFun.datatypes.vartypenumeric)) + ",'" + dtQtrans.Rows[q]["Expression"] + "', " +
                                  " " + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["ExpPer"], CommFun.datatypes.vartypenumeric)) + ",'" + dtQtrans.Rows[q]["Add_Less_Flag"] + "', " +
                                  " " + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["SurCharge"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["EDCess"], CommFun.datatypes.vartypenumeric)) + ", " +
                                  " " + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["Amount"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["ExpValue"], CommFun.datatypes.vartypenumeric)) + "," +
                                  " " + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["ExpPerValue"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["SurValue"], CommFun.datatypes.vartypenumeric)) + ", " +
                                  " " + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["EDValue"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["HEDPer"], CommFun.datatypes.vartypenumeric)) + ", " +
                                  " " + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["HEDValue"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["NetPer"], CommFun.datatypes.vartypenumeric)) + ")";
                        Command = new SqlCommand(sSql, conn, tran);
                        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                    }
                }

                //if (argWOTransQual != null)
                //{
                //    for (int q = 0; q < argWOTransQual.Rows.Count; q++)
                //    {
                //        sSql = "Insert Into BillRateQ (BillRegisterID,QualifierId,Expression,ExpPer,Add_Less_Flag,SurCharge,EDCess,Amount,ExpValue,ExpPerValue,SurValue,EDValue,TypeId,HEDCess,HEDValue,NetPer) " +
                //                 " Values (" + iBillRegId + "," + Convert.ToInt32(CommFun.IsNullCheck(argWOTransQual.Rows[q]["QualifierId"], CommFun.datatypes.vartypenumeric)) + ",'" + argWOTransQual.Rows[q]["Expression"] + "', " +
                //                  " " + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["ExpPer"], CommFun.datatypes.vartypenumeric)) + ",'" + argWOTransQual.Rows[q]["Add_Less_Flag"] + "', " +
                //                  " " + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["SurCharge"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["EDCess"], CommFun.datatypes.vartypenumeric)) + ", " +
                //                  " " + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["Amount"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["ExpValue"], CommFun.datatypes.vartypenumeric)) + "," +
                //                  " " + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["ExpPerValue"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["SurValue"], CommFun.datatypes.vartypenumeric)) + ", " +
                //                  " " + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["EDValue"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToInt32(CommFun.IsNullCheck(argWOTransQual.Rows[q]["AbsTypeId"], CommFun.datatypes.vartypenumeric)) + "," +
                //                  " " + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["HEDPer"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["HEDValue"], CommFun.datatypes.vartypenumeric)) + ", " +
                //                  " " + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["NetPer"], CommFun.datatypes.vartypenumeric)) + ")";
                //        Command = new SqlCommand(sSql, conn, tran);
                //        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                //    }
                //}

                #endregion

                #region BillFormat Trans and IOW

                //Insert BillFormateTrans  List<BillAbstract> argBAbs                  

                foreach (BillAbstract objAbs in argBAbs)
                {
                    Command = new SqlCommand("Insert_BillFormatTrans", conn, tran);
                    Command.CommandType = CommandType.StoredProcedure;
                    Command.Parameters.Clear();
                    Command.Parameters.AddWithValue("@BillRegisterId", iBillRegId);
                    Command.Parameters.AddWithValue("@TypeId", objAbs.TypeId);
                    Command.Parameters.AddWithValue("@Amount", objAbs.Amount);
                    Command.Parameters.AddWithValue("@AccountId", objAbs.AccountId);
                    Command.Parameters.AddWithValue("@Formula", objAbs.Formula);
                    Command.Parameters.AddWithValue("@Add_Less_Flag", objAbs.Sign);
                    Command.Parameters.AddWithValue("@QualMId", objAbs.QualMId);

                    Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                    //Qualifier TypeId in BillFormatTrans
                    sSql = "Update BillFormatTrans Set QTypeId=" + objAbs.QTypeId + ",FormatType='" + objAbs.BFormatType + "',QualifierId = " + objAbs.QualifierId + ",TaxPercentage = " + objAbs.TaxPer + " Where BillRegisterId=" + iBillRegId + " and TypeId=" + objAbs.TypeId;
                    Command = new SqlCommand(sSql, conn, tran);
                    Command.ExecuteNonQuery(); Command.Dispose(); 

                    if (objAbs.FormatTypeId == 8)
                    {
                         List<BillVATBO> oVATsel = argVAT.FindAll(delegate(BillVATBO del) { return (del.TypeId == objAbs.TypeId); });
                         if (oVATsel.Count > 0)
                         {
                             foreach (BillVATBO objVAT in oVATsel)
                             {
                                 sSql = "Insert into BillVATTrans(BillRegisterId,TypeId,Expression,ExpValue,VATPer,NetValue) " +
                                        "Values(" + iBillRegId + "," + objAbs.TypeId + ",'" + objVAT.Expression + "'," + objVAT.ExpValue + ", " + objVAT.Per + "," + objVAT.NetTax + ")";
                                 Command = new SqlCommand(sSql, conn, tran);
                                 Command.ExecuteNonQuery(); Command.Dispose(); 
                             }
                         }
                    }


                    if (objAbs.FormatTypeId==1)
                    {
                        //Insert Bill TurnKey Trans argTurnKeyTrans

                        List<BillTurnKeyEntry> oBTsel = argTurnKeyTrans.FindAll(delegate(BillTurnKeyEntry del) { return (del.BAbsTypeId == objAbs.TypeId); });
                        if (oBTsel.Count > 0)
                        {
                            foreach (BillTurnKeyEntry objBTKTrns in oBTsel)
                            {
                                //if (objBTKTrns.WORegId == 0)
                                //{
                                //    sSql = "Insert INTO BillTurnKeyTrans(BillRegisterId,TypeId,WORegisterId,DPERegisterId,AnalysisId,CumPercentage,CurPercentage,CurAmount,PrevPercentage,CumQty,WOAllotted) " +
                                //        "Values(" + iBillRegId + "," + objBTKTrns.BAbsTypeId + ",0,"+objBTKTrns.DPERegId+"," + objBTKTrns.AnalysisId + "," + objBTKTrns.CumulativeQty + ", " +
                                //        " " + objBTKTrns.CurrentQty + "," + objBTKTrns.CurrentAmount + "," + objBTKTrns.PreviousQty + "," + objBTKTrns.CurrentQty + "," + objBTKTrns.WOQty + ")";
                                //}
                                //else 
                                //{
                                //    sSql = "Insert INTO BillTurnKeyTrans(BillRegisterId,TypeId,WORegisterId,DPERegisterId,AnalysisId,CumPercentage,CurPercentage,CurAmount,CumAmount,WOAllotted,PrevPercentage,CumQty) " +
                                //        "Values(" + iBillRegId + "," + objBTKTrns.BAbsTypeId + "," + objBTKTrns.WORegId + ","+objBTKTrns.DPERegId+"," + objBTKTrns.AnalysisId + "," + objBTKTrns.CumulativeQty + ", " +
                                //        " " + objBTKTrns.CurrentQty + "," + objBTKTrns.CurrentAmount + "," + objBTKTrns.CumAmount + "," + objBTKTrns.WOQty + "," + objBTKTrns.PreviousQty + "," + objBTKTrns.CurrentQty + ")";
                                //}


                                sSql = "Insert INTO BillTurnKeyTrans(BillRegisterId,TypeId,WORegisterId,DPERegisterId,AnalysisId,CumPercentage,CurPercentage,CurAmount,CumAmount,WOAllotted,PrevPercentage,CumQty) " +
                                    "Values(" + iBillRegId + "," + objBTKTrns.BAbsTypeId + "," + objBTKTrns.WORegId + ","+objBTKTrns.DPERegId+"," + objBTKTrns.AnalysisId + "," + objBTKTrns.CumulativeQty + ", " +
                                    " " + objBTKTrns.CurrentQty + "," + objBTKTrns.CurrentAmount + "," + objBTKTrns.CumAmount + "," + objBTKTrns.WOQty + "," + objBTKTrns.PreviousQty + "," + objBTKTrns.CurrentQty + ")";

                                Command = new SqlCommand(sSql, conn, tran);
                                Command.ExecuteNonQuery(); Command.Dispose();
                                Command.Dispose();                                
                            }

                            //TurnKey DPE Trans
                        //    if (argDPE != null)
                        //    {
                        //        List<DPERegTrans> oDpe = argDPE.FindAll(delegate(DPERegTrans del) { return (del.TypeId == objAbs.TypeId); });
                        //        if (oDpe.Count > 0)
                        //        {
                        //            foreach (DPERegTrans objDPE in oDpe)
                        //            {
                        //                //Insert BillDPETrans
                        //                Command = new SqlCommand("Insert_BillDPETrans", conn, tran);
                        //                Command.CommandType = CommandType.StoredProcedure;
                        //                Command.Parameters.Clear();
                        //                Command.Parameters.AddWithValue("@BillRegisterID", iBillRegId);
                        //                Command.Parameters.AddWithValue("@DPERegisterID", objDPE.DPERegId);

                        //                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                        //                //Update DPERegister Set ConvertBill=1 Where DPERegisterId ="++""
                        //                Command = new SqlCommand("Update DPERegister Set ConvertBill=1 Where DPERegisterId =" + objDPE.DPERegId + "", conn, tran);
                        //                Command.ExecuteNonQuery(); Command.Dispose();

                        //                CommFun.ActualCompUpdate(objDPE.DPERegId, argCCId, "D", false, argRevId, argBReg.ContractorID,argDBName, conn, tran);
                        //            }

                        //            //InsertRateQ()
                        //        }
                        //    }
                        }

                        //Insert BillTrans
                        List<BillEntry> osel=argBEntry.FindAll(delegate(BillEntry del){return (del.BAbsTypeId==objAbs.TypeId);});
                        if(osel.Count>0)
                        {
                            foreach (BillEntry objBTrns in osel)
                            {
                                
                                Command = new SqlCommand("Insert_BillTrans", conn, tran);
                                Command.CommandType = CommandType.StoredProcedure;
                                Command.Parameters.Clear();
                                Command.Parameters.AddWithValue("@BillTransID", objBTrns.BillTransId);
                                Command.Parameters["@BillTransID"].Direction = ParameterDirection.Output;
                                Command.Parameters.AddWithValue("@BillRegisterID", iBillRegId);
                                Command.Parameters.AddWithValue("@TypeId", objBTrns.BAbsTypeId);
                                Command.Parameters.AddWithValue("@IOW_ID", objBTrns.IOW_ID);
                                Command.Parameters.AddWithValue("@Comp_ID", objBTrns.ResourceId);
                                Command.Parameters.AddWithValue("@UnitID", objBTrns.Unit);

                                
                                //if (objBTrns.Sign.ToString()=="-")
                                //    Command.Parameters.AddWithValue("@Qty", "-"+objBTrns.Qty.ToString());
                                //else

                                if (objBTrns.Sign.ToString() == "-")
                                {
                                    Command.Parameters.AddWithValue("@Qty", objBTrns.Qty*(-1));
                                    Command.Parameters.AddWithValue("@Amount", objBTrns.Amount * (-1));
                                }
                                else
                                {
                                    Command.Parameters.AddWithValue("@Qty", objBTrns.Qty);
                                    Command.Parameters.AddWithValue("@Amount", objBTrns.Amount);
                                }

                                Command.Parameters.AddWithValue("@Rate", objBTrns.Rate);
                                
                                Command.Parameters.AddWithValue("@AnalysisHeadId", objBTrns.AnalysisHeadId);
                                Command.Parameters.AddWithValue("@BillType", argBReg.BillType);
                                Command.Parameters.AddWithValue("@MType", objBTrns.MType);
                                Command.Parameters.AddWithValue("@FullRate", objBTrns.FullRate);
                                Command.Parameters.AddWithValue("@PerPart", objBTrns.PerPart);
                                Command.Parameters.AddWithValue("@PartRate", objBTrns.PartRate);
                                Command.Parameters.AddWithValue("@MUnitID", objBTrns.MUOM_ID);
                                Command.Parameters.AddWithValue("@UFactor", objBTrns.UFactor);
                                Command.Parameters.AddWithValue("@DetSpec", objBTrns.DetSpec);
                                Command.Parameters.AddWithValue("@WORegisterID", objBTrns.WORegisterID);
                                Command.Parameters.AddWithValue("@RateType", objBTrns.RateType); 
                  
                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                
                                iBillTransId = (int)Command.Parameters["@BillTransID"].Value;

                                if (objBTrns.Type == "A" || objBTrns.Type == "L")
                                {
                                    UpdateLatestRate(conn, tran, 0, objBTrns.ResourceId, argBReg.ContractorID, Convert.ToDecimal(objBTrns.Rate), objBTrns.RateType);
                                }
                                else
                                {
                                    UpdateLatestRate(conn, tran, objBTrns.IOW_ID, 0, argBReg.ContractorID, Convert.ToDecimal(objBTrns.Rate), objBTrns.RateType);
                                }
                                //insert BillItem Labour Trans
                               
                                int rsrceId2 = 0;
                                if (objBTrns.ResourceId == 0) { rsrceId2 = objBTrns.IOW_ID; }
                                else if (objBTrns.IOW_ID == 0) { rsrceId2 = objBTrns.ResourceId; }
                                //List<BillItemLbrStrnthTransBO> oSItmLbrTrns = argBLbrItem.FindAll(delegate(BillItemLbrStrnthTransBO del) { return del.BAbsTypeId == objBTrns.BAbsTypeId && del.ItemTransId == rsrceId2; });
                                //if (oSItmLbrTrns.Count > 0)
                                //{
                                //    foreach (BillItemLbrStrnthTransBO objItem in oSItmLbrTrns)
                                //    {
                                //        Command = new SqlCommand("Insert_BillItemLabourTrans", conn, tran);
                                //        Command.CommandType = CommandType.StoredProcedure;
                                //        Command.Parameters.Clear();
                                //        Command.Parameters.AddWithValue("@BillTransID", iBillTransId);
                                //        Command.Parameters.AddWithValue("@LabourTypeID", objItem.LbrTypeId);
                                //        Command.Parameters.AddWithValue("@Qty", objItem.Qtty);
                                //        Command.Parameters.AddWithValue("@Rate", objItem.Rate);
                                //        Command.Parameters.AddWithValue("@Amount", objItem.Amount);
                                //        Command.Parameters.AddWithValue("@AppRate", objItem.AppRate);
                                //        Command.Parameters.AddWithValue("@MinRate", objItem.MinRate);
                                //        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                //    }
                                //} 



                                List<LabourTransBO> oChk = argLabourItem.FindAll(delegate(LabourTransBO del) { return del.AbsTypeId == objAbs.TypeId && del.RowId == objBTrns.RowId; });

                                foreach (LabourTransBO objLbr in oChk)
                                {
                                    sSql = "Insert into BillItemLabourTrans(BillTransId,LabourTypeId,Qty,Rate,Amount,MinRate,AppRate) " +
                                           "Values(" + iBillTransId + "," + objLbr.LabourTypeID + "," + objLbr.Qty + "," + objLbr.Rate + "," + objLbr.Amount + "," + objLbr.MinRate + ", " + objLbr.AppRate + ")";
                                    Command = new SqlCommand(sSql, conn, tran);
                                    Command.ExecuteNonQuery(); Command.Dispose();
                                    Command.Dispose();
                                }



                                if (objBTrns.Type == "I")
                                {
                                    if (argBReg.QualType == 1)
                                    {
                                        DataView dv;
                                        DataTable dtR = new DataTable();
                                        //IOW Resource Trans
                                        if (argResQualTran != null)
                                        {
                                            if (argResQualTran.Rows.Count > 0)
                                            {
                                                dv = new DataView(argResQualTran);
                                                dv.RowFilter = "WOTransRowId=" + objBTrns.RowId;
                                                dtR = dv.ToTable();
                                            }
                                            else
                                            { dtR.Rows.Clear(); }
                                        }

                                        int iResSel = 0;
                                        for (int l = 0; l < dtR.Rows.Count; l++)
                                        {
                                            if (Convert.ToBoolean(dtR.Rows[l]["Select"]) == true) { iResSel = 1; }

                                            sSql = "Insert Into BillResourceTrans (BillTransId,TypeId,ResourceId,QRate,CoffQty,IOWQty,Amount,NetAmount,IOWId,BillQTypeId,ResSel) " +
                                                    "Values(" + iBillTransId + "," + Convert.ToInt32(dtR.Rows[l]["TypeId"]) + "," + Convert.ToInt32(dtR.Rows[l]["ResourceId"]) + ", " +
                                                    "" + Convert.ToDecimal(dtR.Rows[l]["QRate"]) + "," + Convert.ToDecimal(dtR.Rows[l]["CoffQty"]) + "," + Convert.ToDecimal(dtR.Rows[l]["IOWQty"]) + "," + Convert.ToDecimal(dtR.Rows[l]["WOAmount"]) + "," + Convert.ToDecimal(dtR.Rows[l]["NetAmount"]) + "," + Convert.ToInt32(dtR.Rows[l]["IOWId"]) + "," + Convert.ToInt32(dtR.Rows[l]["WOQTypeId"]) + "," + iResSel + ")";
                                            Command = new SqlCommand(sSql, conn, tran);
                                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                                        }
                                        //Insert QTypeTrans
                                        if (argResRateQ != null)
                                        {
                                            if (argResRateQ.Rows.Count > 0)
                                            {
                                                dv = new DataView(argResRateQ);
                                                dv.RowFilter = "TransRowId=" + objBTrns.RowId;
                                                dtR = dv.ToTable();
                                            }
                                            else
                                            {
                                                dtR.Rows.Clear();
                                            }
                                        }

                                        for (int q = 0; q < dtR.Rows.Count; q++)
                                        {
                                            sSql = "Insert Into BillResRate_Q (BillRegisterID,QualifierId,Expression,ExpPer,Add_Less_Flag,SurCharge,EDCess,Amount,ExpValue,ExpPerValue," +
                                                    "SurValue,EDValue,HEDCess,HEDValue,NetPer,QType,BillTransID,ResourceID,TaxablePer,TaxableValue) " +
                                                    " Values (" + iBillRegId + "," + Convert.ToInt32(dtR.Rows[q]["QualifierId"]) + ",'" + dtR.Rows[q]["Expression"].ToString() + "', " +
                                                     " " + Convert.ToDecimal(dtR.Rows[q]["ExpPer"]) + ",'" + dtR.Rows[q]["Add_Less_Flag"].ToString() + "', " +
                                                     " " + Convert.ToDecimal(dtR.Rows[q]["SurCharge"]) + "," + Convert.ToDecimal(dtR.Rows[q]["EDCess"]) + ", " +
                                                     " " + Convert.ToDecimal(dtR.Rows[q]["Amount"]) + "," + Convert.ToDecimal(dtR.Rows[q]["ExpValue"]) + "," +
                                                     " " + Convert.ToDecimal(dtR.Rows[q]["ExpPerValue"]) + "," + Convert.ToDecimal(dtR.Rows[q]["SurValue"]) + ", " +
                                                     " " + Convert.ToDecimal(dtR.Rows[q]["EDValue"]) + "," + Convert.ToDecimal(dtR.Rows[q]["HEDPer"]) + "," +
                                                      " " + Convert.ToDecimal(dtR.Rows[q]["HEDValue"]) + "," + Convert.ToDecimal(dtR.Rows[q]["NetPer"]) + "," +
                                                     " '" + (dtR.Rows[q]["QType"]) + "'," + iBillTransId + ", " +
                                                     " " + Convert.ToInt32(dtR.Rows[q]["ResourceId"]) + "," +
                                                     "  " + Convert.ToDecimal(dtR.Rows[q]["TaxablePer"]) + "," + Convert.ToDecimal(dtR.Rows[q]["TaxableValue"]) + ")";
                                            Command = new SqlCommand(sSql, conn, tran);
                                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                        }
                                    }

                                    //if (argBReg.BillType == "I")
                                    //{

                                    //    if (argSplit != "Y")
                                    //    {
                                    //        List<LabourTransBO> lChk = argItemLbr.FindAll(delegate(LabourTransBO del) { return del.AbsTypeId == objAbs.TypeId &&  del.RowId == objBTrns.RowId;});

                                    //        foreach (LabourTransBO objLbr in lChk)
                                    //        {
                                    //            sSql = "Insert into BillItemLabourTrans(BillTransId,LabourTypeId,Qty,Rate,Amount,MinRate,AppRate) " +
                                    //                   "Values(" + iBillTransId + "," + objLbr.LabourTypeID + "," + objLbr.Qty + "," + objLbr.Rate + "," + objLbr.Amount + "," + objLbr.MinRate + ", " + objLbr.AppRate + ")";
                                    //            Command = new SqlCommand(sSql, conn, tran);
                                    //            Command.ExecuteNonQuery(); Command.Dispose();
                                    //            Command.Dispose();
                                    //        }
                                    //    }
                                    //}




                                    //WBSTrans
                                    List<BillWBSTrans> Chk = argWBSTrans.FindAll(delegate(BillWBSTrans del) { return del.TypeId == objAbs.TypeId && del.RowId == objBTrns.RowId; });

                                    if (Chk.Count > 0)
                                    {
                                        foreach (BillWBSTrans objWBS in Chk)
                                        {
                                            if (objWBS.Qty != 0)
                                            {
                                                decimal dWBSQty = objWBS.Qty;
                                                decimal dWBSAmt = objWBS.Amount;

                                                if (objBTrns.Sign.ToString() == "-") { dWBSQty = dWBSQty * (-1); dWBSAmt = dWBSAmt * (-1); }

                                                sSql = "INSERT INTO BillWBSTrans (BillTransId,AnalysisId,Qty,MType,Rate,Amount)  " +
                                                       "VALUES(" + iBillTransId + "," + objWBS.AnalysisHeadId + "," + dWBSQty + "," + objWBS.MType + "," + objWBS.Rate + "," + dWBSAmt + ") Select SCOPE_IDENTITY();";
                                                Command = new SqlCommand(sSql, conn, tran);
                                                iBillWBSTransId = Convert.ToInt32(Command.ExecuteScalar());
                                                Command.Dispose();

                                                List<LabourTransBO> lChk = argItemLbr.FindAll(delegate(LabourTransBO del) { return del.AbsTypeId == objAbs.TypeId && del.RowId == objBTrns.RowId && del.AnalysisId == objWBS.AnalysisHeadId; });
                                                foreach (LabourTransBO objLbr in lChk)
                                                {
                                                    sSql = "Insert into BillWBSLabourTrans(BillWBSTransId,BillTransId,LabourTypeId,Qty,Rate,Amount,MinRate,AppRate,AnalysisId) " +
                                                           "Values(" + iBillWBSTransId + "," + iBillTransId + "," + objLbr.LabourTypeID + "," + objLbr.Qty + "," + objLbr.Rate + "," + objLbr.Amount + "," + objLbr.MinRate + ", " + objLbr.AppRate + "," + objWBS.AnalysisHeadId + ")";
                                                    Command = new SqlCommand(sSql, conn, tran);
                                                    Command.ExecuteNonQuery(); Command.Dispose();
                                                    Command.Dispose();
                                                }


                                                //WBSRow LabourTrans
                                                //List<BillIOWLbrTrans> oIOWLbr = argBIOWLbrTrans.FindAll(delegate(BillIOWLbrTrans del) 
                                                //{ return ((del.DPEItemTransId == rsrceId2) && (del.AnalysisId == objWBS.AnalysisHeadId)); });
                                                //if (oIOWLbr.Count > 0)
                                                //{
                                                //    foreach (BillIOWLbrTrans objIOWLbr in oIOWLbr)
                                                //    {
                                                //        Command = new SqlCommand("Insert_BillIOWLabourTrans", conn, tran);
                                                //        Command.CommandType = CommandType.StoredProcedure;
                                                //        Command.Parameters.Clear();
                                                //        Command.Parameters.AddWithValue("@BillIOWTransID", iBillIOWTransId);
                                                //        Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                //        Command.Parameters.AddWithValue("@LabourTypeId", objIOWLbr.LbrTypeId);
                                                //        Command.Parameters.AddWithValue("@Qty", objIOWLbr.Qtty);
                                                //        Command.Parameters.AddWithValue("@Rate", objIOWLbr.Rate);
                                                //        Command.Parameters.AddWithValue("@Amount", objIOWLbr.Amount);
                                                //        Command.Parameters.AddWithValue("@AppRate", objIOWLbr.AppRate);
                                                //        Command.Parameters.AddWithValue("@MinRate", objIOWLbr.MinRate);
                                                //        Command.Parameters.AddWithValue("@AnalysisId", objIOWLbr.AnalId);
                                                //        //AnalysisId

                                                //        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                //    }
                                                //}

                                                // WBSMeasurementTrans
                                                if (objWBS.MType == 0 || objWBS.MType == 2)
                                                {
                                                    List<BillWBSMeasurementTransBO> wbsMsr = argWBSMsrTrans.FindAll(
                                                        delegate(BillWBSMeasurementTransBO del)
                                                        {
                                                            return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objBTrns.RowId) && (del.AHeadId == objWBS.AnalysisHeadId));
                                                        });
                                                    if (wbsMsr.Count > 0)
                                                    {
                                                        foreach (BillWBSMeasurementTransBO objIMsr in wbsMsr)
                                                        {
                                                            Command = new SqlCommand("Insert_BillWBSMeasurment", conn, tran);
                                                            Command.CommandType = CommandType.StoredProcedure;
                                                            Command.Parameters.Clear();
                                                            Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                            Command.Parameters.AddWithValue("@BillIOWTransId", objIMsr.ItemTransId);
                                                            Command.Parameters.AddWithValue("@IOWId", objIMsr.AHeadId);
                                                            Command.Parameters.AddWithValue("@RowId", objIMsr.RowId);
                                                            Command.Parameters.AddWithValue("@SlNo", objIMsr.SlNo);
                                                            Command.Parameters.AddWithValue("@Description", objIMsr.Description);
                                                            Command.Parameters.AddWithValue("@No1", objIMsr.No1);
                                                            Command.Parameters.AddWithValue("@No2", objIMsr.No2);
                                                            Command.Parameters.AddWithValue("@Length", objIMsr.Length);
                                                            Command.Parameters.AddWithValue("@Breadth", objIMsr.Breadth);
                                                            Command.Parameters.AddWithValue("@Depth", objIMsr.Depth);
                                                            Command.Parameters.AddWithValue("@Qty", objIMsr.Qty);

                                                            Command.Parameters.AddWithValue("@Sign", objIMsr.Sign);
                                                            Command.Parameters.AddWithValue("@MBookNO", objIMsr.MBookNO);
                                                            Command.Parameters.AddWithValue("@PageNo", objIMsr.PageNo);
                                                            Command.Parameters.AddWithValue("@LevelNo", objIMsr.LevelNo);
                                                            Command.Parameters.AddWithValue("@ParentID", objIMsr.ParentID);
                                                            Command.Parameters.AddWithValue("@SteelId", objIMsr.SteelId);
                                                            Command.Parameters.AddWithValue("@Factor", objIMsr.Factor);

                                                            if (CommFun.IsNullCheck(objIMsr.FNo1, CommFun.datatypes.vartypestring) != null)
                                                                Command.Parameters.AddWithValue("@FNo1", CommFun.IsNullCheck(objIMsr.FNo1, CommFun.datatypes.vartypestring));
                                                            else
                                                                Command.Parameters.AddWithValue("@FNo1", "");

                                                            if (CommFun.IsNullCheck(objIMsr.FNo2, CommFun.datatypes.vartypestring) != null)
                                                                Command.Parameters.AddWithValue("@FNo2", CommFun.IsNullCheck(objIMsr.FNo2, CommFun.datatypes.vartypestring));
                                                            else
                                                                Command.Parameters.AddWithValue("@FNo2", "");

                                                            if (Convert.ToDecimal(CommFun.IsNullCheck(objIMsr.FLength, CommFun.datatypes.vartypenumeric)) != 0)
                                                                Command.Parameters.AddWithValue("@FLength", CommFun.IsNullCheck(objIMsr.FLength, CommFun.datatypes.vartypestring));
                                                            else
                                                                Command.Parameters.AddWithValue("@FLength", 0);

                                                            if (Convert.ToDecimal(CommFun.IsNullCheck(objIMsr.FBreadth, CommFun.datatypes.vartypenumeric)) != 0)
                                                                Command.Parameters.AddWithValue("@FBreadth", CommFun.IsNullCheck(objIMsr.FBreadth, CommFun.datatypes.vartypestring));
                                                            else
                                                                Command.Parameters.AddWithValue("@FBreadth", 0);

                                                            if (Convert.ToDecimal(CommFun.IsNullCheck(objIMsr.FDepth, CommFun.datatypes.vartypenumeric)) != 0)
                                                                Command.Parameters.AddWithValue("@FDepth", CommFun.IsNullCheck(objIMsr.FDepth, CommFun.datatypes.vartypestring));
                                                            else
                                                                Command.Parameters.AddWithValue("@FDepth", 0);

                                                            Command.Parameters.AddWithValue("@BillType", CommFun.IsNullCheck(objBTrns.Type.ToString(), CommFun.datatypes.vartypestring));

                                                            if (CommFun.IsNullCheck(objIMsr.SubFormula, CommFun.datatypes.vartypestring) != null)
                                                                Command.Parameters.AddWithValue("@SubFormula", CommFun.IsNullCheck(objIMsr.SubFormula, CommFun.datatypes.vartypestring));
                                                            else
                                                                Command.Parameters.AddWithValue("@SubFormula", "");

                                                            if (CommFun.IsNullCheck(objIMsr.WBSWise, CommFun.datatypes.vartypestring) != null)
                                                                Command.Parameters.AddWithValue("@WBSWise", CommFun.IsNullCheck(objIMsr.WBSWise, CommFun.datatypes.vartypestring));
                                                            else
                                                                Command.Parameters.AddWithValue("@WBSWise", "");   

                                                            //Command.Parameters.AddWithValue("@FNo1", objIMsr.FNo1);
                                                            //Command.Parameters.AddWithValue("@FNo2", objIMsr.FNo2);
                                                            //Command.Parameters.AddWithValue("@FLength", objIMsr.FLength);
                                                            //Command.Parameters.AddWithValue("@FBreadth", objIMsr.FBreadth);

                                                            //Command.Parameters.AddWithValue("@FDepth", objIMsr.FDepth);
                                                            //Command.Parameters.AddWithValue("@BillType", objIMsr.BillType);
                                                            //Command.Parameters.AddWithValue("@SubFormula", objIMsr.SubFormula);
                                                            //Command.Parameters.AddWithValue("@WBSWise", objIMsr.WBSWise);

                                                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                        }
                                                    }
                                                }
                                                else if (objWBS.MType == 1)
                                                {
                                                    List<BillMSteelSelection> ocheckUpdate = oSteelSel.FindAll(
                                                        delegate(BillMSteelSelection sel)
                                                        {
                                                            return sel.TypeId == objAbs.TypeId && sel.AnalId == objWBS.AnalysisHeadId && sel.TransRowId == objBTrns.RowId;
                                                        });
                                                    if (ocheckUpdate.Count > 0)
                                                    {
                                                        foreach (BillMSteelSelection IMsrSel in ocheckUpdate)
                                                        {
                                                            sSql = "Insert INTO BillMSteelSelection(BillTransId,IOW_ID,IOW_Trans_Id,AnalId,SteelId) " +
                                                             " Values(" + iBillTransId + "," + objBTrns.IOW_ID + ",0," + objWBS.AnalysisHeadId + " , " +
                                                             " " + CommFun.IsNullCheck(IMsrSel.SteelId, CommFun.datatypes.vartypenumeric) + ")";
                                                            Command = new SqlCommand(sSql, conn, tran);
                                                            Command.ExecuteNonQuery(); Command.Dispose();
                                                            Command.Dispose();
                                                        }
                                                    }

                                                    List<BillWBSMeasurementTransBO> wbsMsr = argWBSMsrTrans.FindAll(
                                                        delegate(BillWBSMeasurementTransBO del)
                                                        {
                                                            return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objBTrns.RowId) && (del.AHeadId == objWBS.AnalysisHeadId));
                                                        });
                                                    if (wbsMsr.Count > 0)
                                                    {
                                                        foreach (BillWBSMeasurementTransBO objIMsr in wbsMsr)
                                                        {
                                                            Command = new SqlCommand("Insert_BillWBSMeasurment", conn, tran);
                                                            Command.CommandType = CommandType.StoredProcedure;
                                                            Command.Parameters.Clear();
                                                            Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                            Command.Parameters.AddWithValue("@BillIOWTransId", objIMsr.ItemTransId);
                                                            Command.Parameters.AddWithValue("@IOWId", objIMsr.AHeadId);
                                                            Command.Parameters.AddWithValue("@RowId", objIMsr.RowId);
                                                            Command.Parameters.AddWithValue("@SlNo", objIMsr.SlNo);
                                                            Command.Parameters.AddWithValue("@Description", objIMsr.Description);
                                                            Command.Parameters.AddWithValue("@No1", objIMsr.No1);
                                                            Command.Parameters.AddWithValue("@No2", objIMsr.No2);
                                                            Command.Parameters.AddWithValue("@Length", objIMsr.Length);
                                                            Command.Parameters.AddWithValue("@Breadth", 0);
                                                            Command.Parameters.AddWithValue("@Depth", objIMsr.Diameter);
                                                            Command.Parameters.AddWithValue("@Qty", objIMsr.Qty);

                                                            Command.Parameters.AddWithValue("@Sign", "");
                                                            Command.Parameters.AddWithValue("@MBookNO", 0);
                                                            Command.Parameters.AddWithValue("@PageNo", 0);
                                                            Command.Parameters.AddWithValue("@LevelNo", 0);
                                                            Command.Parameters.AddWithValue("@ParentID", 0);
                                                            Command.Parameters.AddWithValue("@SteelId", objIMsr.SteelId);
                                                            Command.Parameters.AddWithValue("@Factor", objIMsr.Factor);
                                                            Command.Parameters.AddWithValue("@FNo1", "");
                                                            Command.Parameters.AddWithValue("@FNo2", "");
                                                            Command.Parameters.AddWithValue("@FLength", "");
                                                            Command.Parameters.AddWithValue("@FBreadth", "");

                                                            Command.Parameters.AddWithValue("@FDepth", "");
                                                            Command.Parameters.AddWithValue("@BillType", "");
                                                            Command.Parameters.AddWithValue("@SubFormula", "");
                                                            Command.Parameters.AddWithValue("@WBSWise", objIMsr.WBSWise);

                                                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                               


                                if(objBTrns.Type.ToString()=="I")
                                {
                                    //Insert Measurment for BillTYpe =I; List<BIMeasurementBO> argBIMsrment

                                    if (objBTrns.MType == 0 || objBTrns.MType == 2)
                                    {
                                        List<BIMeasurementBO> oSBIMsr = argBIMsrment.FindAll(delegate(BIMeasurementBO del) { return del.TypeId == objAbs.TypeId && del.TransRowId == objBTrns.RowId; });

                                        if (oSBIMsr.Count > 0)
                                        {
                                            foreach (BIMeasurementBO objIMsr in oSBIMsr)
                                            {
                                                Command = new SqlCommand("Insert_BillMeasurement", conn, tran);
                                                Command.CommandType = CommandType.StoredProcedure;
                                                Command.Parameters.Clear();
                                                Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                Command.Parameters.AddWithValue("@BillIOWTransId", 0);
                                                Command.Parameters.AddWithValue("@IOWId", objIMsr.IOWId);
                                                Command.Parameters.AddWithValue("@RowId", objIMsr.RowId);
                                                Command.Parameters.AddWithValue("@SlNo", objIMsr.SlNo);
                                                Command.Parameters.AddWithValue("@Description", objIMsr.Description);
                                                Command.Parameters.AddWithValue("@No1", objIMsr.No1);
                                                Command.Parameters.AddWithValue("@No2", objIMsr.No2);
                                                Command.Parameters.AddWithValue("@Length", objIMsr.Length);
                                                Command.Parameters.AddWithValue("@Breadth", objIMsr.Breadth);
                                                Command.Parameters.AddWithValue("@Depth", objIMsr.Depth);
                                                Command.Parameters.AddWithValue("@Qty", objIMsr.Qty);
                                                Command.Parameters.AddWithValue("@Sign", objIMsr.Sign);
                                                Command.Parameters.AddWithValue("@MBookNO", objIMsr.MBookNO);
                                                Command.Parameters.AddWithValue("@PageNo", objIMsr.PageNo);
                                                Command.Parameters.AddWithValue("@LevelNo", objIMsr.LevelNo);
                                                Command.Parameters.AddWithValue("@ParentID", objIMsr.ParentID);
                                                Command.Parameters.AddWithValue("@SteelId", objIMsr.SteelId);
                                                Command.Parameters.AddWithValue("@Factor", objIMsr.Factor);

                                                if (CommFun.IsNullCheck(objIMsr.FNo1, CommFun.datatypes.vartypestring) != null)
                                                    Command.Parameters.AddWithValue("@FNo1", CommFun.IsNullCheck(objIMsr.FNo1, CommFun.datatypes.vartypestring));
                                                else
                                                    Command.Parameters.AddWithValue("@FNo1", "");

                                                if (CommFun.IsNullCheck(objIMsr.FNo2, CommFun.datatypes.vartypestring) != null)
                                                    Command.Parameters.AddWithValue("@FNo2", CommFun.IsNullCheck(objIMsr.FNo2, CommFun.datatypes.vartypestring));
                                                else
                                                    Command.Parameters.AddWithValue("@FNo2", "");

                                                if (Convert.ToDecimal(CommFun.IsNullCheck(objIMsr.FLength, CommFun.datatypes.vartypenumeric)) != 0)
                                                    Command.Parameters.AddWithValue("@FLength", CommFun.IsNullCheck(objIMsr.FLength, CommFun.datatypes.vartypestring));
                                                else
                                                    Command.Parameters.AddWithValue("@FLength", 0);

                                                if (Convert.ToDecimal(CommFun.IsNullCheck(objIMsr.FBreadth, CommFun.datatypes.vartypenumeric)) != 0)
                                                    Command.Parameters.AddWithValue("@FBreadth", CommFun.IsNullCheck(objIMsr.FBreadth, CommFun.datatypes.vartypestring));
                                                else
                                                    Command.Parameters.AddWithValue("@FBreadth", 0);

                                                if (Convert.ToDecimal(CommFun.IsNullCheck(objIMsr.FDepth, CommFun.datatypes.vartypenumeric)) != 0)
                                                    Command.Parameters.AddWithValue("@FDepth", CommFun.IsNullCheck(objIMsr.FDepth, CommFun.datatypes.vartypestring));
                                                else
                                                    Command.Parameters.AddWithValue("@FDepth", 0);

                                                Command.Parameters.AddWithValue("@BillType", CommFun.IsNullCheck(objBTrns.Type.ToString(), CommFun.datatypes.vartypestring));

                                                if (CommFun.IsNullCheck(objIMsr.SubFormula, CommFun.datatypes.vartypestring) != null)
                                                    Command.Parameters.AddWithValue("@SubFormula", CommFun.IsNullCheck(objIMsr.SubFormula, CommFun.datatypes.vartypestring));
                                                else
                                                    Command.Parameters.AddWithValue("@SubFormula", "");                                             

                                                //Command.Parameters.AddWithValue("@FNo1", objIMsr.FNo1);
                                                //Command.Parameters.AddWithValue("@FNo2", objIMsr.FNo2);
                                                //Command.Parameters.AddWithValue("@FLength", objIMsr.FLength);
                                                //Command.Parameters.AddWithValue("@FBreadth", objIMsr.FBreadth);
                                                //Command.Parameters.AddWithValue("@FDepth", objIMsr.FDepth);
                                                //Command.Parameters.AddWithValue("@BillType", objIMsr.BillType);
                                                //Command.Parameters.AddWithValue("@SubFormula", objIMsr.SubFormula);

                                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                            }
                                        }
                                    }
                                    else if (objBTrns.MType == 1)
                                    {
                                        List<BillMSteelSelection> ocheckUpdate = oSteelSel.FindAll(
                                        delegate(BillMSteelSelection sel)
                                        {
                                            return sel.TypeId == objAbs.TypeId && sel.TransRowId == objBTrns.RowId;
                                        });
                                        if (ocheckUpdate.Count > 0)
                                        {
                                            foreach (BillMSteelSelection IMsrSel in ocheckUpdate)
                                            {
                                                sSql = "Insert INTO BillMSteelSelection(BillTransId,IOW_ID,IOW_Trans_Id,AnalId,SteelId) " +
                                                 " Values(" + iBillTransId + "," + IMsrSel.BillResId + ",0,0 , " +
                                                 " " + CommFun.IsNullCheck(IMsrSel.SteelId, CommFun.datatypes.vartypenumeric) + ")";
                                                Command = new SqlCommand(sSql, conn, tran);
                                                Command.ExecuteNonQuery(); Command.Dispose();
                                                Command.Dispose();
                                            }
                                        }

                                        List<BIMeasurementBO> oSBIMsr = argBIMsrment.FindAll(
                                            delegate(BIMeasurementBO del)
                                            { return del.TypeId == objAbs.TypeId && del.TransRowId == objBTrns.RowId; });

                                        if (oSBIMsr.Count > 0)
                                        {
                                            foreach (BIMeasurementBO objIMsr in oSBIMsr)
                                            {
                                                Command = new SqlCommand("Insert_BillMeasurement", conn, tran);
                                                Command.CommandType = CommandType.StoredProcedure;
                                                Command.Parameters.Clear();
                                                Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                Command.Parameters.AddWithValue("@BillIOWTransId", 0);
                                                Command.Parameters.AddWithValue("@IOWId", objIMsr.IOWId);
                                                Command.Parameters.AddWithValue("@RowId", objIMsr.RowId);
                                                Command.Parameters.AddWithValue("@SlNo", objIMsr.SlNo);
                                                Command.Parameters.AddWithValue("@Description", objIMsr.Description);
                                                Command.Parameters.AddWithValue("@No1", objIMsr.No1);
                                                Command.Parameters.AddWithValue("@No2", objIMsr.No2);
                                                Command.Parameters.AddWithValue("@Length", objIMsr.Length);
                                                Command.Parameters.AddWithValue("@Breadth", 0);
                                                Command.Parameters.AddWithValue("@Depth", objIMsr.Diameter);
                                                Command.Parameters.AddWithValue("@Qty", objIMsr.Qty);
                                                Command.Parameters.AddWithValue("@Sign", "");
                                                Command.Parameters.AddWithValue("@MBookNO", 0);
                                                Command.Parameters.AddWithValue("@PageNo", 0);
                                                Command.Parameters.AddWithValue("@LevelNo", 0);
                                                Command.Parameters.AddWithValue("@ParentID", 0);
                                                Command.Parameters.AddWithValue("@SteelId", objIMsr.SteelId);
                                                Command.Parameters.AddWithValue("@Factor", objIMsr.Factor);
                                                Command.Parameters.AddWithValue("@FNo1", "");
                                                Command.Parameters.AddWithValue("@FNo2", "");
                                                Command.Parameters.AddWithValue("@FLength", "");
                                                Command.Parameters.AddWithValue("@FBreadth", "");
                                                Command.Parameters.AddWithValue("@FDepth", "");
                                                Command.Parameters.AddWithValue("@BillType", objIMsr.BillType);
                                                Command.Parameters.AddWithValue("@SubFormula", "");

                                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                            }
                                        }
                                    }                                   

                                    
                                }
                                else if(objBTrns.Type.ToString()!="I")
                                {
                                    //Insert BillIOWTrans List<BillIOWTransUpdate> argBIOWTrans
                                    int rsrceId3 = 0;
                                    if (objBTrns.ResourceId == 0) { rsrceId3 = objBTrns.IOW_ID; }
                                    if (objBTrns.IOW_ID == 0) { rsrceId3 = objBTrns.ResourceId; }
                                    int iLbrResTransId = 0;

                                    if (objBTrns.Type.ToString() == "L")
                                    {
                                        List<BillLBRResourceTransBO> oLsel = argLbrRes.FindAll(
                                            delegate(BillLBRResourceTransBO del) { return del.TypeId == objAbs.TypeId && del.RowId == objBTrns.RowId; });
                                        if (oLsel.Count > 0)
                                        {
                                            foreach (BillLBRResourceTransBO objLRes in oLsel)
                                            {
                                                if (objLRes.Qty != 0)
                                                {

                                                    decimal dLQty = objLRes.Qty;
                                                    decimal dLAmt = (objLRes.Qty * objLRes.Rate);

                                                    if (objBTrns.Sign.ToString() == "-") { dLQty = dLQty * (-1); dLAmt = dLAmt * (-1); }

                                                    sSql = "INSERT INTO BillLbrResourceTrans (BillTransId,CompId,LbrResourceId,Qty,Rate,AnalysisType,Amount) " +
                                                            "VALUES(" + iBillTransId + "," + objLRes.ItemTransId + "," + objLRes.LbrResourceId + "," + dLQty + "," + objLRes.Rate + ",'" + objLRes.RateType + "'," + dLAmt + ") Select SCOPE_IDENTITY();";
                                                    Command = new SqlCommand(sSql, conn, tran);
                                                    iLbrResTransId = Convert.ToInt32(Command.ExecuteScalar());
                                                    Command.Dispose();

                                                    // Labour Bill IOW Trans

                                                    List<BillIOWTransUpdate> oSIOW = argBIOWTrans.FindAll(
                                                        delegate(BillIOWTransUpdate del)
                                                        { return del.TypeId == objAbs.TypeId && del.RowId == objBTrns.RowId && del.LbrResourceId == objLRes.LbrResourceId && del.RateType == objLRes.RateType ; });
                                                    if (oSIOW.Count > 0)
                                                    {
                                                        foreach (BillIOWTransUpdate objIOW in oSIOW)
                                                        {
                                                            if (objIOW.Qty != 0)
                                                            {
                                                                decimal dIQty = objIOW.Qty;
                                                                decimal dIAmt = objIOW.Amount;

                                                                if (objBTrns.Sign.ToString() == "-") { dIQty = dIQty * (-1); dIAmt = dIAmt * (-1); }


                                                                Command = new SqlCommand("Insert_BillIOWTrans", conn, tran);
                                                                Command.CommandType = CommandType.StoredProcedure;
                                                                Command.Parameters.Clear();
                                                                Command.Parameters.AddWithValue("@BillIOWTransID", objIOW.BillIOWTransID);
                                                                Command.Parameters["@BillIOWTransID"].Direction = ParameterDirection.Output;
                                                                Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                                Command.Parameters.AddWithValue("@IOW_ID", objIOW.IOW_ID);
                                                                Command.Parameters.AddWithValue("@Qty", dIQty);
                                                                Command.Parameters.AddWithValue("@ClaimType", objIOW.ClaimType);
                                                                Command.Parameters.AddWithValue("@AnalysisHeadId", objIOW.AnalysisHeadID);
                                                                Command.Parameters.AddWithValue("@LbrResTransId", iLbrResTransId);
                                                                Command.Parameters.AddWithValue("@MType", objIOW.MType);
                                                                Command.Parameters.AddWithValue("@MUnitId", objIOW.MUnitId);
                                                                Command.Parameters.AddWithValue("@UFactor", objIOW.UFactor);
                                                                Command.Parameters.AddWithValue("@Rate", objIOW.Rate);
                                                                Command.Parameters.AddWithValue("@Amount", dIAmt);
                                                                Command.Parameters.AddWithValue("@SubIOWId", objIOW.SubIOWID);

                                                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                                                                iBillIOWTransId = (int)Command.Parameters["@BillIOWTransID"].Value;

                                                                //Insert IOWLabourTrans List<BillIOWLabour> argBIOWLbrTrans

                                                                //List<BillIOWLbrTrans> oIOWLbr = argBIOWLbrTrans.FindAll(delegate(BillIOWLbrTrans del) { return ((del.IOWRowId == objIOW.RowId) && (del.BEntryRowId == objBTrns.RowId)); });
                                                                //if (oIOWLbr.Count > 0)
                                                                //{
                                                                //    foreach (BillIOWLbrTrans objIOWLbr in oIOWLbr)
                                                                //    {
                                                                //        Command = new SqlCommand("Insert_BillIOWLabourTrans", conn, tran);
                                                                //        Command.CommandType = CommandType.StoredProcedure;
                                                                //        Command.Parameters.Clear();
                                                                //        Command.Parameters.AddWithValue("@BillIOWTransID", iBillIOWTransId);
                                                                //        Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                                //        Command.Parameters.AddWithValue("@LabourTypeId", objIOWLbr.LbrTypeId);
                                                                //        Command.Parameters.AddWithValue("@Qty", objIOWLbr.Qtty);
                                                                //        Command.Parameters.AddWithValue("@Rate", objIOWLbr.Rate);
                                                                //        Command.Parameters.AddWithValue("@Amount", objIOWLbr.Amount);
                                                                //        Command.Parameters.AddWithValue("@AppRate", objIOWLbr.AppRate);
                                                                //        Command.Parameters.AddWithValue("@MinRate", objIOWLbr.MinRate);
                                                                //        Command.Parameters.AddWithValue("@AnalysisId", 0);

                                                                //        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                                //    }
                                                                //}

                                                                //Insert BillIOWMeasurement List<BillIOWMeasurementBOUpdate> argBIOWMsrment                                                        


                                                                if (objIOW.MType == 0 || objIOW.MType == 2)
                                                                {
                                                                    List<BillIOWMeasurementBOUpdate> oSIOWMsrMnt = argBIOWMsrment.FindAll(
                                                                        delegate(BillIOWMeasurementBOUpdate del)
                                                                        { return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objBTrns.RowId) && (del.AnalysisId == objIOW.AnalysisHeadID) && (del.IOWId == objIOW.IOW_ID)); });
                                                                    if (oSIOWMsrMnt.Count > 0)
                                                                    {
                                                                        foreach (BillIOWMeasurementBOUpdate objIOWMsr in oSIOWMsrMnt)
                                                                        {
                                                                            Command = new SqlCommand("Insert_BillMeasurement", conn, tran);
                                                                            Command.CommandType = CommandType.StoredProcedure;
                                                                            Command.Parameters.Clear();
                                                                            Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                                            Command.Parameters.AddWithValue("@BillIOWTransId", iBillIOWTransId);
                                                                            Command.Parameters.AddWithValue("@IOWId", objIOWMsr.IOWId);
                                                                            Command.Parameters.AddWithValue("@RowId", objIOWMsr.BEntryRowId);
                                                                            Command.Parameters.AddWithValue("@SlNo", objIOWMsr.SlNo);
                                                                            Command.Parameters.AddWithValue("@Description", objIOWMsr.Description);
                                                                            Command.Parameters.AddWithValue("@No1", objIOWMsr.No1);
                                                                            Command.Parameters.AddWithValue("@No2", objIOWMsr.No2);
                                                                            Command.Parameters.AddWithValue("@Length", objIOWMsr.Length);
                                                                            Command.Parameters.AddWithValue("@Breadth", objIOWMsr.Breadth);
                                                                            Command.Parameters.AddWithValue("@Depth", objIOWMsr.Depth);
                                                                            Command.Parameters.AddWithValue("@Qty", objIOWMsr.Qty);
                                                                            Command.Parameters.AddWithValue("@Sign", objIOWMsr.Sign);
                                                                            Command.Parameters.AddWithValue("@MBookNO", objIOWMsr.MBookNO);
                                                                            Command.Parameters.AddWithValue("@PageNo", objIOWMsr.PageNo);
                                                                            Command.Parameters.AddWithValue("@LevelNo", objIOWMsr.LevelNo);
                                                                            Command.Parameters.AddWithValue("@ParentID", objIOWMsr.ParentID);
                                                                            Command.Parameters.AddWithValue("@SteelId", objIOWMsr.SteelId);
                                                                            Command.Parameters.AddWithValue("@Factor", objIOWMsr.Factor);

                                                                            if (CommFun.IsNullCheck(objIOWMsr.FNo1, CommFun.datatypes.vartypestring) != null)
                                                                                Command.Parameters.AddWithValue("@FNo1", CommFun.IsNullCheck(objIOWMsr.FNo1, CommFun.datatypes.vartypestring));
                                                                            else
                                                                                Command.Parameters.AddWithValue("@FNo1", "");

                                                                            if (CommFun.IsNullCheck(objIOWMsr.FNo2, CommFun.datatypes.vartypestring) != null)
                                                                                Command.Parameters.AddWithValue("@FNo2", CommFun.IsNullCheck(objIOWMsr.FNo2, CommFun.datatypes.vartypestring));
                                                                            else
                                                                                Command.Parameters.AddWithValue("@FNo2", "");

                                                                            if (Convert.ToDecimal(CommFun.IsNullCheck(objIOWMsr.FLength, CommFun.datatypes.vartypenumeric)) != 0)
                                                                                Command.Parameters.AddWithValue("@FLength", CommFun.IsNullCheck(objIOWMsr.FLength, CommFun.datatypes.vartypestring));
                                                                            else
                                                                                Command.Parameters.AddWithValue("@FLength", 0);

                                                                            if (Convert.ToDecimal(CommFun.IsNullCheck(objIOWMsr.FBreadth, CommFun.datatypes.vartypenumeric)) != 0)
                                                                                Command.Parameters.AddWithValue("@FBreadth", CommFun.IsNullCheck(objIOWMsr.FBreadth, CommFun.datatypes.vartypestring));
                                                                            else
                                                                                Command.Parameters.AddWithValue("@FBreadth", 0);

                                                                            if (Convert.ToDecimal(CommFun.IsNullCheck(objIOWMsr.FDepth, CommFun.datatypes.vartypenumeric)) != 0)
                                                                                Command.Parameters.AddWithValue("@FDepth", CommFun.IsNullCheck(objIOWMsr.FDepth, CommFun.datatypes.vartypestring));
                                                                            else
                                                                                Command.Parameters.AddWithValue("@FDepth", 0);

                                                                            Command.Parameters.AddWithValue("@BillType", CommFun.IsNullCheck(objBTrns.Type.ToString(), CommFun.datatypes.vartypestring));

                                                                            if (CommFun.IsNullCheck(objIOWMsr.SubFormula, CommFun.datatypes.vartypestring) != null)
                                                                                Command.Parameters.AddWithValue("@SubFormula", CommFun.IsNullCheck(objIOWMsr.SubFormula, CommFun.datatypes.vartypestring));
                                                                            else
                                                                                Command.Parameters.AddWithValue("@SubFormula", "");


                                                                            //Command.Parameters.AddWithValue("@FNo1", objIOWMsr.FNo1);
                                                                            //Command.Parameters.AddWithValue("@FNo2", objIOWMsr.FNo2);
                                                                            //Command.Parameters.AddWithValue("@FLength", objIOWMsr.FLength);
                                                                            //Command.Parameters.AddWithValue("@FBreadth", objIOWMsr.FBreadth);
                                                                            //Command.Parameters.AddWithValue("@FDepth", objIOWMsr.FDepth);
                                                                            //Command.Parameters.AddWithValue("@BillType", objIOWMsr.BillType);
                                                                            //Command.Parameters.AddWithValue("@SubFormula", objIOWMsr.SubFormula);

                                                                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                                        }
                                                                    }
                                                                }
                                                                else if (objIOW.MType == 1)
                                                                {
                                                                    List<BillMSteelSelection> ocheckUpdate = oSteelSel.FindAll(
                                                                        delegate(BillMSteelSelection del)
                                                                        {
                                                                            return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objBTrns.RowId) && (del.AnalId == objIOW.AnalysisHeadID) && (del.IOWId == objIOW.IOW_ID));
                                                                            //if (objIOW.AnalysisHeadID != 0)
                                                                            //    return sel.BillResId == rsrceId3 && sel.IOWId == objIOW.IOW_ID && sel.AnalId == objIOW.AnalysisHeadID && sel.TransRowId == objBTrns.RowId;
                                                                            //else
                                                                            //    return sel.BillResId == rsrceId3 && sel.IOWId == objIOW.IOW_ID && sel.TransRowId == objBTrns.RowId;
                                                                        });

                                                                    if (ocheckUpdate.Count > 0)
                                                                    {
                                                                        foreach (BillMSteelSelection IMsrSel in ocheckUpdate)
                                                                        {
                                                                            sSql = "Insert INTO BillMSteelSelection(BillTransId,IOW_ID,IOW_Trans_Id,AnalId,SteelId) " +
                                                                             " Values(" + iBillTransId + "," + rsrceId3 + "," + objIOW.IOW_ID + "," + objIOW.AnalysisHeadID + " , " +
                                                                             " " + CommFun.IsNullCheck(IMsrSel.SteelId, CommFun.datatypes.vartypenumeric) + ")";
                                                                            Command = new SqlCommand(sSql, conn, tran);
                                                                            Command.ExecuteNonQuery(); Command.Dispose();
                                                                            Command.Dispose();
                                                                        }
                                                                    }

                                                                    List<BillIOWMeasurementBOUpdate> oSIOWMsrMnt = argBIOWMsrment.FindAll(
                                                                        delegate(BillIOWMeasurementBOUpdate del)
                                                                        {
                                                                            return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objBTrns.RowId) && (del.LbrResourceId == objLRes.LbrResourceId) && (del.RateType == objLRes.RateType) && (del.AnalysisId == objIOW.AnalysisHeadID) && (del.IOWId == objIOW.IOW_ID));
                                                                        });
                                                                    if (oSIOWMsrMnt.Count > 0)
                                                                    {
                                                                        foreach (BillIOWMeasurementBOUpdate objIOWMsr in oSIOWMsrMnt)
                                                                        {
                                                                            Command = new SqlCommand("Insert_BillMeasurement", conn, tran);
                                                                            Command.CommandType = CommandType.StoredProcedure;
                                                                            Command.Parameters.Clear();
                                                                            Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                                            Command.Parameters.AddWithValue("@BillIOWTransId", iBillIOWTransId);
                                                                            Command.Parameters.AddWithValue("@IOWId", objIOWMsr.IOWId);
                                                                            Command.Parameters.AddWithValue("@RowId", objIOWMsr.BEntryRowId);
                                                                            Command.Parameters.AddWithValue("@SlNo", objIOWMsr.SlNo);
                                                                            Command.Parameters.AddWithValue("@Description", objIOWMsr.Description);
                                                                            Command.Parameters.AddWithValue("@No1", objIOWMsr.No1);
                                                                            Command.Parameters.AddWithValue("@No2", objIOWMsr.No2);
                                                                            Command.Parameters.AddWithValue("@Length", objIOWMsr.Length);
                                                                            Command.Parameters.AddWithValue("@Breadth", 0);
                                                                            Command.Parameters.AddWithValue("@Depth", objIOWMsr.Diameter);
                                                                            Command.Parameters.AddWithValue("@Qty", objIOWMsr.Qty);
                                                                            Command.Parameters.AddWithValue("@Sign", "");
                                                                            Command.Parameters.AddWithValue("@MBookNO", 0);
                                                                            Command.Parameters.AddWithValue("@PageNo", 0);
                                                                            Command.Parameters.AddWithValue("@LevelNo", 0);
                                                                            Command.Parameters.AddWithValue("@ParentID", 0);
                                                                            Command.Parameters.AddWithValue("@SteelId", objIOWMsr.SteelId);
                                                                            Command.Parameters.AddWithValue("@Factor", objIOWMsr.Factor);
                                                                            Command.Parameters.AddWithValue("@FNo1", "");
                                                                            Command.Parameters.AddWithValue("@FNo2", "");
                                                                            Command.Parameters.AddWithValue("@FLength", "");
                                                                            Command.Parameters.AddWithValue("@FBreadth", "");
                                                                            Command.Parameters.AddWithValue("@FDepth", "");
                                                                            Command.Parameters.AddWithValue("@BillType", objIOWMsr.BillType);
                                                                            Command.Parameters.AddWithValue("@SubFormula", "");

                                                                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (objBTrns.Type.ToString() == "A" || objBTrns.Type.ToString() == "S")
                                    {
                                        List<BillIOWTransUpdate> oSIOW = argBIOWTrans.FindAll(delegate(BillIOWTransUpdate del) { return del.RowId == objBTrns.RowId && del.TypeId == objAbs.TypeId; });
                                        if (oSIOW.Count > 0)
                                        {
                                            foreach (BillIOWTransUpdate objIOW in oSIOW)
                                            {
                                                if (objIOW.Qty != 0)
                                                {
                                                    decimal dIQty = objIOW.Qty;
                                                    decimal dIAmt = objIOW.Amount;

                                                    if (objBTrns.Sign.ToString() == "-") { dIQty = dIQty * (-1); dIAmt = dIAmt * (-1); }

                                                    Command = new SqlCommand("Insert_BillIOWTrans", conn, tran);
                                                    Command.CommandType = CommandType.StoredProcedure;
                                                    Command.Parameters.Clear();
                                                    Command.Parameters.AddWithValue("@BillIOWTransID", objIOW.BillIOWTransID);
                                                    Command.Parameters["@BillIOWTransID"].Direction = ParameterDirection.Output;
                                                    Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                    Command.Parameters.AddWithValue("@IOW_ID", objIOW.IOW_ID);
                                                    Command.Parameters.AddWithValue("@Qty", dIQty);
                                                    Command.Parameters.AddWithValue("@ClaimType", objIOW.ClaimType);
                                                    Command.Parameters.AddWithValue("@AnalysisHeadId", objIOW.AnalysisHeadID);
                                                    Command.Parameters.AddWithValue("@LbrResTransId", 0);
                                                    Command.Parameters.AddWithValue("@MType", objIOW.MType);
                                                    Command.Parameters.AddWithValue("@MUnitId", objIOW.MUnitId);
                                                    Command.Parameters.AddWithValue("@UFactor", objIOW.UFactor);
                                                    Command.Parameters.AddWithValue("@Rate", objIOW.Rate);
                                                    Command.Parameters.AddWithValue("@Amount", dIAmt);
                                                    Command.Parameters.AddWithValue("@SubIOWId", objIOW.SubIOWID);

                                                    Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                                                    iBillIOWTransId = (int)Command.Parameters["@BillIOWTransID"].Value;

                                                    List<LabourTransBO> lChk = argItemLbr.FindAll(delegate(LabourTransBO del) { return del.AbsTypeId == objAbs.TypeId && del.RowId == objBTrns.RowId && del.AnalysisId == objIOW.AnalysisHeadID && del.IOWId == objIOW.IOW_ID; });
                                                    foreach (LabourTransBO objLbr in lChk)
                                                    {
                                                        sSql = "Insert into BillIOWLabourTrans(BillIOWTransID,BillTransId,LabourTypeId,Qty,Rate,Amount,MinRate,AppRate,AnalysisId,IOWId) " +
                                                               "Values(" + iBillIOWTransId + "," + iBillTransId + "," + objLbr.LabourTypeID + "," + objLbr.Qty + "," + objLbr.Rate + "," + objLbr.Amount + "," + objLbr.MinRate + ", " + objLbr.AppRate + "," + objIOW.AnalysisHeadID + "," + objIOW.IOW_ID + ")";
                                                        Command = new SqlCommand(sSql, conn, tran);
                                                        Command.ExecuteNonQuery(); Command.Dispose();
                                                        Command.Dispose();
                                                    }



                                                    //Insert IOWLabourTrans List<BillIOWLabour> argBIOWLbrTrans
                                                    //List<BillIOWLbrTrans> oIOWLbr = argBIOWLbrTrans.FindAll(delegate(BillIOWLbrTrans del) 
                                                    //{
                                                    //    if (objIOW.AnalysisHeadID != 0)
                                                    //        return ((del.DPEItemTransId == rsrceId3) && (del.IOW_ID == objIOW.IOW_ID) && (del.AnalysisId == objIOW.AnalysisHeadID));
                                                    //    else
                                                    //        return ((del.DPEItemTransId == rsrceId3) && (del.IOW_ID == objIOW.IOW_ID));
                                                    //});
                                                    //if (oIOWLbr.Count > 0)
                                                    //{
                                                    //    foreach (BillIOWLbrTrans objIOWLbr in oIOWLbr)
                                                    //    {
                                                    //        Command = new SqlCommand("Insert_BillIOWLabourTrans", conn, tran);
                                                    //        Command.CommandType = CommandType.StoredProcedure;
                                                    //        Command.Parameters.Clear();
                                                    //        Command.Parameters.AddWithValue("@BillIOWTransID", iBillIOWTransId);
                                                    //        Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                    //        Command.Parameters.AddWithValue("@LabourTypeId", objIOWLbr.LbrTypeId);
                                                    //        Command.Parameters.AddWithValue("@Qty", objIOWLbr.Qtty);
                                                    //        Command.Parameters.AddWithValue("@Rate", objIOWLbr.Rate);
                                                    //        Command.Parameters.AddWithValue("@Amount", objIOWLbr.Amount);
                                                    //        Command.Parameters.AddWithValue("@AppRate", objIOWLbr.AppRate);
                                                    //        Command.Parameters.AddWithValue("@MinRate", objIOWLbr.MinRate);
                                                    //        Command.Parameters.AddWithValue("@AnalysisId", 0);

                                                    //        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                    //    }
                                                    //}

                                                    //Insert BillIOWMeasurement List<BillIOWMeasurementBOUpdate> argBIOWMsrment
                                                    int rsrceId = 0;
                                                    if (objBTrns.ResourceId == 0) { rsrceId = objBTrns.IOW_ID; }
                                                    else if (objBTrns.IOW_ID == 0) { rsrceId = objBTrns.ResourceId; }

                                                    if (objIOW.MType == 0 || objIOW.MType == 2)
                                                    {
                                                        List<BillIOWMeasurementBOUpdate> oSIOWMsrMnt = argBIOWMsrment.FindAll(delegate(BillIOWMeasurementBOUpdate del)
                                                        {
                                                            return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objBTrns.RowId) && (del.AnalysisId == objIOW.AnalysisHeadID) && (del.IOWId == objIOW.IOW_ID)); 
                                                        });

                                                        if (oSIOWMsrMnt.Count > 0)
                                                        {
                                                            foreach (BillIOWMeasurementBOUpdate objIOWMsr in oSIOWMsrMnt)
                                                            {
                                                                Command = new SqlCommand("Insert_BillMeasurement", conn, tran);
                                                                Command.CommandType = CommandType.StoredProcedure;
                                                                Command.Parameters.Clear();
                                                                Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                                Command.Parameters.AddWithValue("@BillIOWTransId", iBillIOWTransId);
                                                                Command.Parameters.AddWithValue("@IOWId", objIOWMsr.IOWId);
                                                                Command.Parameters.AddWithValue("@RowId", objIOWMsr.BEntryRowId);
                                                                Command.Parameters.AddWithValue("@SlNo", objIOWMsr.SlNo);
                                                                Command.Parameters.AddWithValue("@Description", objIOWMsr.Description);
                                                                Command.Parameters.AddWithValue("@No1", objIOWMsr.No1);
                                                                Command.Parameters.AddWithValue("@No2", objIOWMsr.No2);
                                                                Command.Parameters.AddWithValue("@Length", objIOWMsr.Length);
                                                                Command.Parameters.AddWithValue("@Breadth", objIOWMsr.Breadth);
                                                                Command.Parameters.AddWithValue("@Depth", objIOWMsr.Depth);
                                                                Command.Parameters.AddWithValue("@Qty", objIOWMsr.Qty);
                                                                Command.Parameters.AddWithValue("@Sign", objIOWMsr.Sign);
                                                                Command.Parameters.AddWithValue("@MBookNO", objIOWMsr.MBookNO);
                                                                Command.Parameters.AddWithValue("@PageNo", objIOWMsr.PageNo);
                                                                Command.Parameters.AddWithValue("@LevelNo", objIOWMsr.LevelNo);
                                                                Command.Parameters.AddWithValue("@ParentID", objIOWMsr.ParentID);
                                                                Command.Parameters.AddWithValue("@SteelId", objIOWMsr.SteelId);
                                                                Command.Parameters.AddWithValue("@Factor", objIOWMsr.Factor);

                                                                if (CommFun.IsNullCheck(objIOWMsr.FNo1, CommFun.datatypes.vartypestring) != null)
                                                                    Command.Parameters.AddWithValue("@FNo1", CommFun.IsNullCheck(objIOWMsr.FNo1, CommFun.datatypes.vartypestring));
                                                                else
                                                                    Command.Parameters.AddWithValue("@FNo1", "");

                                                                if (CommFun.IsNullCheck(objIOWMsr.FNo2, CommFun.datatypes.vartypestring) != null)
                                                                    Command.Parameters.AddWithValue("@FNo2", CommFun.IsNullCheck(objIOWMsr.FNo2, CommFun.datatypes.vartypestring));
                                                                else
                                                                    Command.Parameters.AddWithValue("@FNo2", "");

                                                                if (Convert.ToDecimal(CommFun.IsNullCheck(objIOWMsr.FLength, CommFun.datatypes.vartypenumeric)) != 0)
                                                                    Command.Parameters.AddWithValue("@FLength", CommFun.IsNullCheck(objIOWMsr.FLength, CommFun.datatypes.vartypestring));
                                                                else
                                                                    Command.Parameters.AddWithValue("@FLength", 0);

                                                                if (Convert.ToDecimal(CommFun.IsNullCheck(objIOWMsr.FBreadth, CommFun.datatypes.vartypenumeric)) != 0)
                                                                    Command.Parameters.AddWithValue("@FBreadth", CommFun.IsNullCheck(objIOWMsr.FBreadth, CommFun.datatypes.vartypestring));
                                                                else
                                                                    Command.Parameters.AddWithValue("@FBreadth", 0);

                                                                if (Convert.ToDecimal(CommFun.IsNullCheck(objIOWMsr.FDepth, CommFun.datatypes.vartypenumeric)) != 0)
                                                                    Command.Parameters.AddWithValue("@FDepth", CommFun.IsNullCheck(objIOWMsr.FDepth, CommFun.datatypes.vartypestring));
                                                                else
                                                                    Command.Parameters.AddWithValue("@FDepth", 0);

                                                                Command.Parameters.AddWithValue("@BillType", CommFun.IsNullCheck(objBTrns.Type.ToString(), CommFun.datatypes.vartypestring));

                                                                if (CommFun.IsNullCheck(objIOWMsr.SubFormula, CommFun.datatypes.vartypestring) != null)
                                                                    Command.Parameters.AddWithValue("@SubFormula", CommFun.IsNullCheck(objIOWMsr.SubFormula, CommFun.datatypes.vartypestring));
                                                                else
                                                                    Command.Parameters.AddWithValue("@SubFormula", "");

                                                                //Command.Parameters.AddWithValue("@FNo1", objIOWMsr.FNo1);
                                                                //Command.Parameters.AddWithValue("@FNo2", objIOWMsr.FNo2);
                                                                //Command.Parameters.AddWithValue("@FLength", objIOWMsr.FLength);
                                                                //Command.Parameters.AddWithValue("@FBreadth", objIOWMsr.FBreadth);
                                                                //Command.Parameters.AddWithValue("@FDepth", objIOWMsr.FDepth);
                                                                //Command.Parameters.AddWithValue("@BillType", objIOWMsr.BillType);
                                                                //Command.Parameters.AddWithValue("@SubFormula", objIOWMsr.SubFormula);

                                                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                            }
                                                        }
                                                    }
                                                    else if (objIOW.MType == 1)
                                                    {
                                                        List<BillMSteelSelection> ocheckUpdate = oSteelSel.FindAll(
                                                            delegate(BillMSteelSelection del)
                                                            {

                                                                return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objBTrns.RowId) && (del.AnalId == objIOW.AnalysisHeadID) && (del.IOWId == objIOW.IOW_ID)); 
                                                                //if (objIOW.AnalysisHeadID != 0)
                                                                //    return sel.BillResId == rsrceId && sel.IOWId == objIOW.IOW_ID && sel.AnalId == objIOW.AnalysisHeadID && sel.TransRowId == objBTrns.RowId;
                                                                //else
                                                                //    return sel.BillResId == rsrceId && sel.IOWId == objIOW.IOW_ID && sel.TransRowId == objBTrns.RowId;
                                                            });
                                                        if (ocheckUpdate.Count > 0)
                                                        {
                                                            foreach (BillMSteelSelection IMsrSel in ocheckUpdate)
                                                            {
                                                                sSql = "Insert INTO BillMSteelSelection(BillTransId,IOW_ID,IOW_Trans_Id,AnalId,SteelId) " +
                                                                 " Values(" + iBillTransId + "," + rsrceId + "," + objIOW.IOW_ID + "," + objIOW.AnalysisHeadID + " , " +
                                                                 " " + CommFun.IsNullCheck(IMsrSel.SteelId, CommFun.datatypes.vartypenumeric) + ")";
                                                                Command = new SqlCommand(sSql, conn, tran);
                                                                Command.ExecuteNonQuery(); Command.Dispose();
                                                                Command.Dispose();
                                                            }
                                                        }

                                                        List<BillIOWMeasurementBOUpdate> oSIOWMsrMnt = argBIOWMsrment.FindAll(
                                                            delegate(BillIOWMeasurementBOUpdate del)
                                                            {
                                                                if (objBTrns.Type == "A")
                                                                    return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objBTrns.RowId) && (del.RateType == objIOW.RateType) && (del.AnalysisId == objIOW.AnalysisHeadID) && (del.IOWId == objIOW.IOW_ID));
                                                                else
                                                                    return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objBTrns.RowId) && (del.AnalysisId == objIOW.AnalysisHeadID) && (del.IOWId == objIOW.IOW_ID)); 
                                                            });

                                                        if (oSIOWMsrMnt.Count > 0)
                                                        {
                                                            foreach (BillIOWMeasurementBOUpdate objIOWMsr in oSIOWMsrMnt)
                                                            {
                                                                Command = new SqlCommand("Insert_BillMeasurement", conn, tran);
                                                                Command.CommandType = CommandType.StoredProcedure;
                                                                Command.Parameters.Clear();
                                                                Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                                Command.Parameters.AddWithValue("@BillIOWTransId", iBillIOWTransId);
                                                                Command.Parameters.AddWithValue("@IOWId", objIOWMsr.IOWId);
                                                                Command.Parameters.AddWithValue("@RowId", objIOWMsr.BEntryRowId);
                                                                Command.Parameters.AddWithValue("@SlNo", objIOWMsr.SlNo);
                                                                Command.Parameters.AddWithValue("@Description", objIOWMsr.Description);
                                                                Command.Parameters.AddWithValue("@No1", objIOWMsr.No1);
                                                                Command.Parameters.AddWithValue("@No2", objIOWMsr.No2);
                                                                Command.Parameters.AddWithValue("@Length", objIOWMsr.Length);
                                                                Command.Parameters.AddWithValue("@Breadth", 0);
                                                                Command.Parameters.AddWithValue("@Depth", objIOWMsr.Diameter);
                                                                Command.Parameters.AddWithValue("@Qty", objIOWMsr.Qty);
                                                                Command.Parameters.AddWithValue("@Sign", "");
                                                                Command.Parameters.AddWithValue("@MBookNO", 0);
                                                                Command.Parameters.AddWithValue("@PageNo", 0);
                                                                Command.Parameters.AddWithValue("@LevelNo", 0);
                                                                Command.Parameters.AddWithValue("@ParentID", 0);
                                                                Command.Parameters.AddWithValue("@SteelId", objIOWMsr.SteelId);
                                                                Command.Parameters.AddWithValue("@Factor", objIOWMsr.Factor);
                                                                Command.Parameters.AddWithValue("@FNo1", "");
                                                                Command.Parameters.AddWithValue("@FNo2", "");
                                                                Command.Parameters.AddWithValue("@FLength", "");
                                                                Command.Parameters.AddWithValue("@FBreadth", "");
                                                                Command.Parameters.AddWithValue("@FDepth", "");
                                                                Command.Parameters.AddWithValue("@BillType", objIOWMsr.BillType);
                                                                Command.Parameters.AddWithValue("@SubFormula", "");

                                                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                //Insert BillItemAbstractLabour Trans  List<BillItemLbrStrnthTransBO> argBLbrItem  
                                
                                //if (objBTrns.ResourceId == 0) { rsrceId2 = objBTrns.IOW_ID; }
                                //else if (objBTrns.IOW_ID == 0) { rsrceId2 = objBTrns.ResourceId; }
                                //List<BillItemLbrStrnthTransBO> oSItmLbrTrns2 = argBLbrItem.FindAll(delegate(BillItemLbrStrnthTransBO del) { return del.BAbsTypeId == objBTrns.BAbsTypeId && del.ItemTransId == rsrceId2; });
                                //if (oSItmLbrTrns.Count>0)
                                //{
                                //    foreach (BillItemLbrStrnthTransBO objItem in oSItmLbrTrns2)
                                //    {
                                //        Command = new SqlCommand("Insert_BillItemLabourTrans", conn, tran);
                                //        Command.CommandType = CommandType.StoredProcedure;
                                //        Command.Parameters.Clear();
                                //        Command.Parameters.AddWithValue("@BillTransID", iBillTransId);
                                //        Command.Parameters.AddWithValue("@LabourTypeID", objItem.LbrTypeId);
                                //        Command.Parameters.AddWithValue("@Qty", objItem.Qtty);
                                //        Command.Parameters.AddWithValue("@Rate", objItem.Rate);
                                //        Command.Parameters.AddWithValue("@Amount", objItem.Amount);
                                //        Command.Parameters.AddWithValue("@AppRate", objItem.AppRate);
                                //        Command.Parameters.AddWithValue("@MinRate", objItem.MinRate);

                                //        Command.ExecuteNonQuery(); Command.Dispose();
                                //    }
                                //}
                             
                            }

                        }                 
                    }
                    else if (objAbs.FormatTypeId == 5)
                    {
                        //Insert TDSDetails
                        //List<BillFormateTDSBO> argBFTDS
                        List<BillFormateTDSNewBO> oSL = argBFTDS.FindAll(delegate(BillFormateTDSNewBO del) { return ((del.BAbsTypeId == objAbs.TypeId)&&(del.BAbsRowId==objAbs.RowId)); });
                        if(oSL.Count>0)
                        {
                            int sLId = CommFun.GetSubLedgerId(objAbs.QualMId, 8, conn, tran);

                            foreach (BillFormateTDSNewBO objTDSF in oSL)
                            {
                                Command = new SqlCommand("Insert_TDSBillFormatTrans", conn, tran);
                                Command.CommandType = CommandType.StoredProcedure;
                                Command.Parameters.Clear();
                                Command.Parameters.AddWithValue("@BillRegisterId", iBillRegId);
                                Command.Parameters.AddWithValue("@Formula", objTDSF.Formula);
                                Command.Parameters.AddWithValue("@TypeId", objTDSF.BAbsTypeId);
                                Command.Parameters.AddWithValue("@GrossAmt", objTDSF.GrossAmt);
                                Command.Parameters.AddWithValue("@TDSPer", objTDSF.TDSPer);
                                Command.Parameters.AddWithValue("@TDSAmt", objTDSF.TDSAmt);
                                Command.Parameters.AddWithValue("@SurPer", objTDSF.SurPer);
                                Command.Parameters.AddWithValue("@SurAmt", objTDSF.SurAmt);
                                Command.Parameters.AddWithValue("@EDPer", objTDSF.EDPer);
                                Command.Parameters.AddWithValue("@EDAmt", objTDSF.EDAmt);

                                Command.Parameters.AddWithValue("@HEDPer", objTDSF.HEDPer);
                                Command.Parameters.AddWithValue("@HEDAmt", objTDSF.HEDAmt);
                                Command.Parameters.AddWithValue("@NetPer", objTDSF.NetPer);

                                Command.Parameters.AddWithValue("@TDSNetAmt", objTDSF.NetTDSAmt);
                                Command.Parameters.AddWithValue("@QualMId", objAbs.QualMId);
                                Command.Parameters.AddWithValue("@AccountId", objAbs.AccountId);
                                Command.Parameters.AddWithValue("@SubLedgerId", sLId);
                                

                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();                                           

                            }
                        }                
                    }
                    else if (objAbs.FormatTypeId == 6 && objAbs.AddType==1)
                    {
                        //Insert ServiceTaxDetails
                        //List<BillServiceTaxNewBO> argBFST
                        List<BillServiceTaxNewBO> oSL = argBFST.FindAll(delegate(BillServiceTaxNewBO del) { return ((del.BAbsTypeId == objAbs.TypeId) && (del.BAbsRowId == objAbs.RowId)); });
                        if (oSL.Count > 0)
                        {
                            int sLId = CommFun.GetSubLedgerId(objAbs.QualMId, 8, conn, tran);

                            foreach (BillServiceTaxNewBO objServiceT in oSL)
                            {
                                sSql = "Insert Into BillServiceTaxTrans(BillRegId,TypeId,Formula,GrossAmt,AccountId,TaxablePer,TaxableValue,ExpPer " + 
                                ",ExpValue,SurCharge,SurValue,EDCess,EDValue,HEDCess,HEDValue,NetPer,NetAmt) " +
                                "Values (" + iBillRegId + "," + objServiceT.BAbsTypeId + ",'" + objServiceT.Formula + "'," + objServiceT.GrossAmt + "," + objServiceT.AccountId + ", " + 
                                " " + objServiceT.TaxablePer + "," + objServiceT.TaxableAmt + "," + objServiceT.ExpPer + ", " +
                                " " + objServiceT.ExpPerAmt + "," + objServiceT.SurPer + "," + objServiceT.SurAmt + "," + objServiceT.EDPer + "," + objServiceT.EDAmt + " ," +
                                " " + objServiceT.HEDPer + "," + objServiceT.HEDAmt + "," + objServiceT.NetPer + "," + objServiceT.NetAmt + ")";
                                Command = new SqlCommand(sSql, conn, tran);
                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                            }
                        }
                    }

                    else if (objAbs.FormatTypeId == 3)
                    {
                        //Insert Material Recovery
                        List<BillMaterialRecovery> oSM = argBMatRec.FindAll(delegate(BillMaterialRecovery del) { return ((del.BAbsRowId == objAbs.RowId)&&(del.BAbsTypeId==objAbs.TypeId)) ; });
                        if (oSM.Count > 0)
                        {
                            foreach (BillMaterialRecovery objMat in oSM)
                            {
                                Command = new SqlCommand("Insert_BillMaterialRecovery", conn, tran);
                                Command.CommandType = CommandType.StoredProcedure;
                                Command.Parameters.Clear();
                                Command.Parameters.AddWithValue("@BillRegId", iBillRegId);
                                Command.Parameters.AddWithValue("@Comp_ID", objMat.Comp_Id);
                                Command.Parameters.AddWithValue("@Unit", objMat.Unit);
                                Command.Parameters.AddWithValue("@Qty", objMat.Qty);
                                Command.Parameters.AddWithValue("@Rate", objMat.Rate);
                                Command.Parameters.AddWithValue("@Amount", objMat.Amount);
                                Command.Parameters.AddWithValue("@IssueId", objMat.IssueId);
                                Command.Parameters.AddWithValue("@TypeId", objMat.BAbsTypeId);                                

                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();                      
                            }
                            if (BsfGlobal.g_bMMSDB == true)
                            {
                                sSql = "Update [" + BsfGlobal.g_sMMSDBName + "].dbo.IssueTrans Set RecQty=RecQty+Qty " +
                                         "from BillMaterialRecovery WHERE " +
                                         "BillRegId = " + iBillRegId + " And IssueId <> 0 " +
                                         "and [" + BsfGlobal.g_sMMSDBName + "].dbo.IssueTrans.IssueTransId=BillMaterialRecovery.IssueId ";

                                Command = new SqlCommand(sSql, conn, tran);
                                Command.ExecuteNonQuery(); Command.Dispose();
                                Command.Dispose();
                            }
                        }
                    }
                    else if (objAbs.FormatTypeId == 9)
                    {
                        if ((objAbs.BFormatType == "B" || objAbs.BFormatType == "A") && argInternal == true && (objAbs.AddType == 1 || objAbs.AddType == 0))
                        {

                            if (objAbs.BFormatType == "B" && argInternal == true && objAbs.AddType == 0)
                            {
                                if (dtLbrAdj.Rows.Count > 0)
                                {
                                    foreach (DataRow dr in dtLbrAdj.Rows)
                                    {
                                        decimal AdvAmount = Convert.ToDecimal(CommFun.IsNullCheck(dr["CAmount"], CommFun.datatypes.vartypenumeric));
                                        if (AdvAmount > 0)
                                        {
                                            sSql = "Insert Into LabourAdvAdjustment (BillRegisterId,LabourId,Amount,RegId,TypeId)  " +
                                                "Values (" + iBillRegId + "," + dr["LabourId"] + ",'" + AdvAmount + "'," + dr["RegId"] + "," + objAbs.TypeId+ ") ";
                                            Command = new SqlCommand(sSql, conn, tran);
                                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                        }
                                    }
                                }
                            }
                            if (objAbs.BFormatType == "A" && argInternal == true && objAbs.AddType == 1)
                            {
                                int iSign = 0;
                                List<BillLabourAdvance> chkAdv = argBLbrAdv.FindAll(
                                    delegate(BillLabourAdvance del)
                                    {
                                        return ((del.bAbsRowId == objAbs.RowId) && (del.bAbsTypeId == objAbs.TypeId));
                                    });
                                if (chkAdv.Count > 0)
                                {
                                    foreach (BillLabourAdvance objLAdv in chkAdv)
                                    {
                                        if (objLAdv.Sign == "+")
                                            iSign = 1;
                                        else
                                            iSign = 0;

                                        sSql = "Insert Into BillLabourAdvance(BillRegisterId,BFormatType,LabourId,TypeId,Sign,Amount)  values " +
                                            "(" + iBillRegId + ",'" + objAbs.BFormatType + "'," + objLAdv.LabourId + "," + objLAdv.bAbsTypeId + "," + iSign + "," + objLAdv.Amount + ")";
                                        Command = new SqlCommand(sSql, conn, tran);
                                        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                                    }
                                }
                            }
                        }
                    }
                    else if (objAbs.FormatTypeId == 4)
                    {

                        if (argInternal == false && objAbs.BFormatType.ToString() == "B")
                        {
                            List<BillLabourTypeTransBO> oSLt = argBLbrType.FindAll(delegate(BillLabourTypeTransBO del) { return (del.TypeId == objAbs.TypeId); });
                            if (oSLt.Count > 0)
                            {
                                foreach (BillLabourTypeTransBO objLType in oSLt)
                                {
                                    if (objLType.Qty != 0)
                                    {
                                        int iFromLS = 0;
                                        if (objLType.FromLS == true) { iFromLS = 1; }

                                        sSql = "Insert into BillLabourTypeTrans(BillRegisterId,LabourTypeId,TypeId,qty,Rate,Amount,FromLS) " +
                                               "Values(" + iBillRegId + "," + objLType.LabourTypeID + "," + objLType.TypeId + "," + objLType.Qty + "," + objLType.Rate + "," + objLType.Amount + "," + iFromLS + ") SELECT SCOPE_IDENTITY();";
                                        Command = new SqlCommand(sSql, conn, tran);
                                        int iTransId = int.Parse(Command.ExecuteScalar().ToString());
                                        Command.Dispose();


                                        if (argLSWBS.Count > 0)
                                        {
                                            List<BillLSWBSTrans> oSLt2 = argLSWBS.FindAll(delegate(BillLSWBSTrans del) { return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objLType.RowId)); });

                                            if (oSLt2.Count > 0)
                                            {
                                                foreach (BillLSWBSTrans objLSWBS in oSLt2)
                                                {
                                                    if (objLSWBS.Qty != 0)
                                                    {
                                                        sSql = "Insert Into BillLabourTypeWBSTrans (BillLabourTypeTransId,AnalysisId,Qty) " +
                                                               "Values (" + iTransId + "," + objLSWBS.AnalysisId + "," + objLSWBS.Qty + ") SELECT SCOPE_IDENTITY();";
                                                        Command = new SqlCommand(sSql, conn, tran);
                                                        int iWBSTransId = int.Parse(Command.ExecuteScalar().ToString());
                                                        Command.Dispose();

                                                        List<BillLSVTrans> oLSV = argBillLSV.FindAll(delegate(BillLSVTrans del) { return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objLType.RowId) && (del.AnalysisId == objLSWBS.AnalysisId)); });

                                                        if (oLSV.Count > 0)
                                                        {
                                                            foreach (BillLSVTrans objLSV in oLSV)
                                                            {
                                                                sSql = "Insert into BillLabourTypeWBSLSTrans(BillLSWBSTransId,LSId,Qty) " +
                                                                       "Values(" + iWBSTransId + "," + objLSV.LSId + ", " + objLSV.BillQty + ")";
                                                                Command = new SqlCommand(sSql, conn, tran);
                                                                Command.ExecuteNonQuery();
                                                                Command.Dispose();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (argBillLSV.Count >0)
                                            {
                                                List<BillLSVTrans> oLSV = argBillLSV.FindAll(delegate(BillLSVTrans del) { return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objLType.RowId)); });

                                                if (oLSV.Count > 0)
                                                {
                                                    foreach (BillLSVTrans objLSV in oLSV)
                                                    {
                                                        sSql = "Insert into BillLabourTypeWBSLSTrans(BillLabourTypeTransId,LSId,Qty) " +
                                                               "Values(" + iTransId + "," + objLSV.LSId + ", " + objLSV.BillQty + ")";
                                                        Command = new SqlCommand(sSql, conn, tran);
                                                        Command.ExecuteNonQuery();
                                                        Command.Dispose();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                  
                                }
                            }
                        }
                        else if (argInternal == true && objAbs.BFormatType.ToString() == "B")
                        {
                            List<BillLabourTypeTransBO> oSLt = argBLbrType.FindAll(delegate(BillLabourTypeTransBO del) { return ((del.TypeId == objAbs.TypeId)); });
                            if (oSLt.Count > 0)
                            {
                                foreach (BillLabourTypeTransBO objLType in oSLt)
                                {
                                    if (objLType.Qty != 0)
                                    {
                                        sSql = "Insert BillMLabourTrans(BillRegisterId,LabourId,TypeId,Qty,Rate,Amount) " +
                                               "Values(" + iBillRegId + "," + objLType.LabourTypeID + "," + objLType.TypeId + "," + objLType.Qty + "," + objLType.Rate + "," + objLType.Amount + ")";
                                        Command = new SqlCommand(sSql, conn, tran);
                                        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                    }
                                   
                                }
                            }
                        }

                    }
                }
                #endregion


                //if (argBReg.BillType == "I")
                //{
                //    sSql = "Insert into BillItemLabourTrans(BillTransId,LabourTypeId,Qty,Rate,Amount) " +
                //           "Select BillTransId,LabourTypeId,Sum(Qty) Qty,Case When Sum(isnull(Qty,0)) <>0 then  Sum(Amount)/Sum(Qty) else 0 end Rate,Sum(Amount) Amount from BillWBSLabourTrans " +
                //           "Where BillTransId in (Select BillTransId from BillTrans Where BillRegisterId = " + iBillRegId + ") Group by BillTransId,LabourTypeId";
                //    Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose();
                //}
                //else
                //{
                //    sSql = "Insert into BillItemLabourTrans(BillTransId,LabourTypeId,Qty,Rate,Amount) " +
                //           "Select BillTransId,LabourTypeId,Sum(Qty) Qty,Case When Sum(isnull(Qty,0)) <>0 then  Sum(Amount)/Sum(Qty) else 0 end Rate,Sum(Amount) Amount from BillIOWLabourTrans " +
                //           "Where BillTransId in (Select BillTransId from BillTrans Where BillRegisterId = " + iBillRegId + ") Group by BillTransId,LabourTypeId";
                //    Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose();
                //}


                //sSql = "Insert into BillLabourTrans(BillREgisterId,LabourTypeId,Qty,Rate,Amount) " +
                //       "Select " + iBillRegId + ",LabourTypeId,Sum(Qty) Qty,Case When Sum(isnull(Qty,0)) <>0 then  Sum(Amount)/Sum(Qty) else 0 end Rate,Sum(Amount) Amount from BillItemLabourTrans " +
                //       "Where BillTransId in (Select BillTransId from BillTrans Where BillRegisterId = " + iBillRegId + ") Group by LabourTypeId";
                //Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose();

                CommFun.ActualCompUpdate(iBillRegId, argCCId, "B", true, argRevId, argBReg.ContractorID, argDBName, conn, tran, argBReg.CostOption);

                //BsfGlobal.UpdateMaxNo(13, oVType, 0, 0, conn, tran);
                //BsfGlobal.UpdateMaxNo(13, oVCCType, 0, argBReg.CostCentreId, conn, tran);
                //BsfGlobal.UpdateMaxNo(13, oVCompanyType, argBReg.CompanyId, 0, conn, tran);

                //BillQty Update in WOTrans Table
                if (argBReg.WORegisterID!=0)
                    CommFun.RefreshWOBilledQty(argBReg.WORegisterID, conn, tran);



                sSql = "SELECT A.TypeId,A.Amount,B.Type from BillFormatTrans A  " +
                        "INNER JOIN BillFormatMaster B ON A.TypeId=B.TypeId " +
                        "WHERE A.BillRegisterId=" + iBillRegId + " and A.AccountId <>0 and A.Amount <>0 AND B.Header=0";
                Command = new SqlCommand(sSql, conn, tran);
                SqlDataReader dsr = Command.ExecuteReader();
                DataTable dt = new DataTable();
                dt.Load(dsr);
                Command.Dispose();
                dsr.Close();

                DataTable dtt;
                decimal dFAmt = 0;
                decimal dIOWAmt = 0;
                bool bAmtOK = true;
                int iTypeId = 0;

                for (int j = 0; j < dt.Rows.Count; j++)
                {
                    dFAmt =Math.Round(Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[j]["Amount"], CommFun.datatypes.vartypenumeric)),0);
                    iTypeId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["TypeId"], CommFun.datatypes.vartypenumeric));
                    dIOWAmt = 0;

                    // Refer T-Tracker Point No 1786, Function to post subledger details-Workgroup wise posting to FA 
                    if (dt.Rows[j]["Type"].ToString() == "I")
                    {
                        if (argBReg.BillType == "I")
                        {
                            sSql = "Select Sum(A.Amount) Amt From BillTrans A " +
                                    "Where A.BillRegisterId=" + iBillRegId + " and A.TypeId = " + iTypeId;
                        }
                        else
                        {
                            sSql = "Select Sum(A.Qty*B.Rate) Amt From BillIOWTrans A " +
                                    "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                                    "Where B.BillRegisterId=" + iBillRegId + " and B.TypeId = " + iTypeId;
                        }

                        Command = new SqlCommand(sSql, conn, tran);
                        dsr = Command.ExecuteReader();
                        dtt = new DataTable();
                        dtt.Load(dsr);
                        Command.Dispose();
                        dsr.Close();

                        if (dtt.Rows.Count > 0) { dIOWAmt = Math.Round(Convert.ToDecimal(CommFun.IsNullCheck(dtt.Rows[0]["Amt"], CommFun.datatypes.vartypenumeric)), 0); }
                        dtt.Dispose();

                        if (dIOWAmt != 0)
                        {
                            if (dFAmt != dIOWAmt)
                            {
                                bAmtOK = false;
                                break;
                            }
                        }
                     }
                 }

                if (bAmtOK == false)
                {
                    tran.Rollback();
                    MessageBox.Show("Amount Difference, Do Not Update"); 
                    argUpdate = false;
                }
                else
                {
                    tran.Commit();
                    if (sCVType == "CC") argRefNo = argBReg.CCBVNo; else if (sCVType == "CO") argRefNo = argBReg.CompanyBVNo; else argRefNo = argBReg.VNo;
                    argUpdate = true;
                }
                //argRefNo = argBReg.BillNo;
                
            }
            catch (SqlException ex)
            {
               tran.Rollback();
               argUpdate = false;
               BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
            return iBillRegId;
        }


        public bool UpdateBillEntries(BillRegister argBReg, List<BillAbstract> argBAbs, List<BillEntry> argBEntry, List<BillLabourTypeTransBO> argBLbrType, List<BillMaterialRecovery> argBMatRec, List<BillIOWTransUpdate> argBIOWTrans, List<BIMeasurementBO> argBIMsrment, List<BillIOWMeasurementBOUpdate> argBIOWMsrment, List<BillFormateTDSNewBO> argBFTDS, DataTable argBLbrTrNew, string argBillType, int argCCId, int argContId, int argBdetId, int argrevId, List<BillWBSTrans> argWBSTrans, List<BillWBSMeasurementTransBO> argWBSMsrTrans, List<DPERegTrans> argDPE, List<BillAdvanceBO> argAdvance, DataTable dtQtrans, List<BillTurnKeyEntry> argTurnKeyTrans, List<BillLBRResourceTransBO> argLbrRes, DataTable argWOTransQual, List<BillMSteelSelection> oSteelSel, List<BillLSWBSTrans> argLSWBS, bool argInternal, List<BillLabourAdvance> argBLbrAdv, List<BillServiceTaxNewBO> argBFST, DataTable dtLbrAdj, string argDBName, List<BillLSVTrans> argBillLSV, List<BillLSTransBO> argBillLSTrans, DataTable argResQualTran, DataTable argResRateQ, List<LabourTransBO> argItemLbr, List<LabourTransBO> argLabourItem, List<LabourTransBO> argLabourSum, List<BillRetentionBO> argRetention, DataTable argMatAdvance, List<BillVATBO> argVAT)
        {
            #region Variables
            bool bUpdate = false;
            int iBillRegId = 0;
            int iBillTransId = 0;
            int iBillIOWTransId = 0;
            int iBillWBSTransId = 0;
            SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();
            string sRefDate = "";

            string sSql = "";

            #endregion

            try
            {
                #region Update Register
              
                sRefDate = String.Format("{0:dd-MMM-yyyy}", argBReg.RefDate);
                //Insert BillRegister
                SqlCommand Command = new SqlCommand("Update_BillRegister", conn, tran);
                Command.CommandType = CommandType.StoredProcedure;
                Command.Parameters.Clear();
                Command.Parameters.AddWithValue("@BillRegisterId", argBReg.BillRegisterId);                
                Command.Parameters.AddWithValue("@Edate", argBReg.EDate);
                Command.Parameters.AddWithValue("@FDate", argBReg.FrmDate);
                Command.Parameters.AddWithValue("@TDate", argBReg.ToDate);
                Command.Parameters.AddWithValue("@VNo", argBReg.VNo);
                Command.Parameters.AddWithValue("@CCBVNo", argBReg.CCBVNo);
                Command.Parameters.AddWithValue("@BillNo", argBReg.BillNo);
                Command.Parameters.AddWithValue("@ContractorID", argBReg.ContractorID);
                Command.Parameters.AddWithValue("@BillType", argBReg.BillType);
                Command.Parameters.AddWithValue("@BillDetID", argBReg.BillDetId);
                Command.Parameters.AddWithValue("@BillAmount", argBReg.BillAmount);
                Command.Parameters.AddWithValue("@Narration", argBReg.Narration);
                Command.Parameters.AddWithValue("@CostCentreId", argBReg.CostCentreId);
                Command.Parameters.AddWithValue("@LRoundAmt", argBReg.LRoundAmt);
                Command.Parameters.AddWithValue("@LNetAmt", argBReg.LNetAmt);
                Command.Parameters.AddWithValue("@IOWAmount", argBReg.IOWAmount);
                Command.Parameters.AddWithValue("@LabourAmount", argBReg.LabourAmount);
                Command.Parameters.AddWithValue("@BillUpdateType", Convert.ToChar(argBReg.BillUpdateType));
                Command.Parameters.AddWithValue("@WORegisterId", argBReg.WORegisterID);
                Command.Parameters.AddWithValue("@CreatedUser", argBReg.CreatedUser);
                Command.Parameters.AddWithValue("@CreatedDate", argBReg.CreatedDate);
                Command.Parameters.AddWithValue("@ModifiedUser", argBReg.ModifiedUser);
                Command.Parameters.AddWithValue("@ModifiedDate", argBReg.ModifiedDate);
                Command.Parameters.AddWithValue("@CompanyBVNo", argBReg.CompanyBVNo);


                Command.ExecuteNonQuery(); Command.Dispose();
                Command.Dispose();
               
                iBillRegId = argBReg.BillRegisterId;

                int iReady = 0;
                if (argBReg.Ready == true) { iReady = 1; }


                //Update WorkAccountId in BillRegister
                sSql = "Update BillRegister Set WorkAccountId=" + argBReg.WorkAccountId + ",FormatType='" + argBReg.FormatType + "', " +
                        "CostOption='" + argBReg.CostOption + "',RefDate='" + sRefDate + "',RefNo='" + argBReg.RefNo + "',QualType = " + argBReg.QualType + ",Ready = " + iReady + ",LabourUsedType = '" + argBReg.LabourUsedType + "' Where BillRegisterId = " + iBillRegId;
                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose();
                Command.Dispose();

                //Update AdjustAmt in WORegister,for Advance option WOAdvAmt Validation
               


                   

                    //if (argInternal == true)
                    //{
                    //    if (dtLbrAdj.Rows.Count > 0)
                    //    {
                    //        sSql = "Delete LabourAdvAdjustment Where BillRegisterId=" + iBillRegId + " ";
                    //        Command = new SqlCommand(sSql, conn, tran);
                    //        Command.ExecuteNonQuery(); Command.Dispose();

                    //        foreach (DataRow dr in dtLbrAdj.Rows)
                    //        {
                    //            decimal AdvAmount = Convert.ToDecimal(CommFun.IsNullCheck(dr["CAmount"], CommFun.datatypes.vartypenumeric)); 
                    //            if (AdvAmount > 0)
                    //            {
                    //                sSql = "Insert Into LabourAdvAdjustment (BillRegisterId,LabourId,Amount,RegId) " + 
                    //                    "Values (" + iBillRegId + "," + dr["LabourId"] + ",'" + AdvAmount + "'," + dr["RegId"] + ") ";
                    //                Command = new SqlCommand(sSql, conn, tran);
                    //                Command.ExecuteNonQuery(); Command.Dispose();
                    //            }
                    //        }
                    //    }
                    //}
                //}

                #endregion

                #region Qualifiers

                //Delete BillRateQ
                sSql = "Delete from BillRateQ  where BillRegisterId=" + iBillRegId ;
                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose();
                Command.Dispose();

                //Bill Qualifier

                if (dtQtrans != null)
                {
                    for (int q = 0; q < dtQtrans.Rows.Count; q++)
                    {
                        sSql = "Insert Into BillRateQ (BillRegisterID,QualifierId,Expression,ExpPer,Add_Less_Flag,SurCharge,EDCess,Amount,ExpValue,ExpPerValue,SurValue,EDValue,HEDCess,HEDValue,NetPer) " +
                                 " Values (" + iBillRegId + "," + Convert.ToInt32(CommFun.IsNullCheck(dtQtrans.Rows[q]["QualifierId"], CommFun.datatypes.vartypenumeric)) + ",'" + dtQtrans.Rows[q]["Expression"] + "', " +
                                  " " + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["ExpPer"], CommFun.datatypes.vartypenumeric)) + ",'" + dtQtrans.Rows[q]["Add_Less_Flag"] + "', " +
                                  " " + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["SurCharge"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["EDCess"], CommFun.datatypes.vartypenumeric)) + ", " +
                                  " " + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["Amount"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["ExpValue"], CommFun.datatypes.vartypenumeric)) + "," +
                                  " " + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["ExpPerValue"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["SurValue"], CommFun.datatypes.vartypenumeric)) + ", " +
                                  " " + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["EDValue"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["HEDPer"], CommFun.datatypes.vartypenumeric)) + ", " +
                                  " " + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["HEDValue"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(dtQtrans.Rows[q]["NetPer"], CommFun.datatypes.vartypenumeric)) + ")";
                        Command = new SqlCommand(sSql, conn, tran);
                        Command.ExecuteNonQuery(); Command.Dispose();
                        Command.Dispose();
                    }
                }

                //if (argWOTransQual != null)
                //{
                //    for (int q = 0; q < argWOTransQual.Rows.Count; q++)
                //    {
                //        sSql = "Insert Into BillRateQ (BillRegisterID,QualifierId,Expression,ExpPer,Add_Less_Flag,SurCharge,EDCess,Amount,ExpValue,ExpPerValue,SurValue,EDValue,TypeId,HEDCess,HEDValue,NetPer) " +
                //                 " Values (" + iBillRegId + "," + Convert.ToInt32(CommFun.IsNullCheck(argWOTransQual.Rows[q]["QualifierId"], CommFun.datatypes.vartypenumeric)) + ",'" + argWOTransQual.Rows[q]["Expression"] + "', " +
                //                  " " + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["ExpPer"], CommFun.datatypes.vartypenumeric)) + ",'" + argWOTransQual.Rows[q]["Add_Less_Flag"] + "', " +
                //                  " " + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["SurCharge"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["EDCess"], CommFun.datatypes.vartypenumeric)) + ", " +
                //                  " " + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["Amount"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["ExpValue"], CommFun.datatypes.vartypenumeric)) + "," +
                //                  " " + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["ExpPerValue"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["SurValue"], CommFun.datatypes.vartypenumeric)) + ", " +
                //                  " " + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["EDValue"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToInt32(CommFun.IsNullCheck(argWOTransQual.Rows[q]["AbsTypeId"], CommFun.datatypes.vartypenumeric)) + "," +
                //                  " " + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["HEDPer"], CommFun.datatypes.vartypenumeric)) + "," + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["HEDValue"], CommFun.datatypes.vartypenumeric)) + ", " +
                //                  " " + Convert.ToDecimal(CommFun.IsNullCheck(argWOTransQual.Rows[q]["NetPer"], CommFun.datatypes.vartypenumeric)) + ")";
                //        Command = new SqlCommand(sSql, conn, tran);
                //        Command.ExecuteNonQuery(); Command.Dispose();
                //        Command.Dispose();
                //    }
                //}

                #endregion

                #region Delete Tables to Insert New

                //Delete BillLSTrans Table....

                sSql = "Update LabourStrengthMaster Set ConvertBill =0 Where LabourStrengthID in (Select LabourStrengthID from  BillLSTrans where BillRegisterID = " + iBillRegId + ")";
                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                sSql = "Delete from BillLSTrans where BillRegisterID = " + iBillRegId;
                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                sSql = "Update DPERegister Set ConvertBill=0 Where DPERegisterId in (Select DPERegisterId from BillDPETrans Where BillRegisterId = " + iBillRegId + ")";
                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                //Delete BillLSTrans Table....
                sSql = "Delete from  BillDPETrans where BillRegisterID = " + iBillRegId;
                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                //Delete BillLSWBSTrans Table....
                sSql = "Delete from BillLSWBSTrans where BillRegisterId = " + iBillRegId;
                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                sSql = "Delete from BillMaterialAdvanceTrans Where BillRegisterId = " + iBillRegId;
                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                sSql = "Delete from BillVATTrans Where BillRegisterId = " + iBillRegId;
                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();


                //Delete BillTypeTrans
                Command = new SqlCommand("Delete from BillTypeTrans  where BillRegisterId=" + iBillRegId + "", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose();
                Command.Dispose();

                //Delete BillLabourTrans
                Command = new SqlCommand("Delete from BillLabourTrans  Where BillRegisterId=" + iBillRegId + "", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                //Delete BillItemLabourTrans
                Command = new SqlCommand("Delete from BillItemLabourTrans Where BillTransId in (Select BillTransID from BillTrans Where BillRegisterId = " + iBillRegId + ")", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                Command = new SqlCommand("Delete from BillWBSLabourTrans Where BillTransId in (Select BillTransID from BillTrans Where BillRegisterId = " + iBillRegId + ")", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
            
                //Delete BillIOWLabourTrans
                Command = new SqlCommand("DELETE FROM BillIOWLabourTrans WHERE BillTransId IN (SELECT BillTransID FROM BillTrans WHERE BillRegisterId = " + iBillRegId + ")", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                //Delete BillTurnKeyTrans
                sSql="Delete from BillTurnKeyTrans  where BillRegisterId=" + iBillRegId ;
                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();


                //Delete BillTurnKeyTrans
                sSql = "Delete from BillServiceTaxTrans  where BillRegId=" + iBillRegId;
                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                //Delete BillMLabourTrans
                sSql = "Delete from BillMLabourTrans where BillRegisterId=" + iBillRegId;
                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                //Delete BillFormatTrans
                Command = new SqlCommand("Delete from BillFormatTrans  where BillRegisterId=" + iBillRegId + "", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                //Delete BillIOWTrans
                Command = new SqlCommand("DELETE FROM BillIOWTrans WHERE BillTransId IN (SELECT BillTransID FROM BillTrans WHERE BillRegisterId = " + iBillRegId + ")", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();              

                //Delete LabourBillTrans
                Command = new SqlCommand("Delete from LabourBillTrans  where BillRegisterId=" + iBillRegId + "", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                //Delete TDSBillFormatTrans
                Command = new SqlCommand("Delete from TDSBillFormatTrans  where BillRegisterId=" + iBillRegId + "", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();


                //Delete BillMaterialRecovery
                Command = new SqlCommand("Delete from BillMaterialRecovery  where BillRegId=" + iBillRegId + "", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                //Delete BillLabourType
                Command = new SqlCommand("Delete from BillLabourType  where BillRegisterId=" + iBillRegId + "", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                
                //BillLabourAdvance

                Command = new SqlCommand("Delete from BillLabourAdvance  where BillRegisterId=" + iBillRegId + "", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                //Delete BillWBSTrans
                Command = new SqlCommand("DELETE FROM BillWBSTrans WHERE BillTransId IN (SELECT BillTransID FROM BillTrans WHERE BillRegisterId = " + iBillRegId + " And BillType='I')", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                //Delete BillWBSMeasurement
                Command = new SqlCommand("DELETE FROM BillMeasurement WHERE WBSWise='Y'   And BillTransId IN (SELECT BillTransID FROM BillTrans WHERE BillRegisterId = " + iBillRegId + ")", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();         


                //Delete BillMeasurement
                Command = new SqlCommand("DELETE FROM BillMeasurement WHERE WBSWise='N'  And BillTransId IN (SELECT BillTransID FROM BillTrans WHERE BillRegisterId = " + iBillRegId + ")", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                //Delete BillLbrResourceTrans
                sSql = "DELETE FROM BillLbrResourceTrans WHERE BillTransId IN (SELECT BillTransID FROM BillTrans WHERE BillRegisterId = " + iBillRegId + " And BillType='L')";
                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                sSql = "Delete from BillResRate_Q Where BillTransID in (Select BillTransId from BillTrans Where BillRegisterId = " + iBillRegId + ")";
                Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose(); 

                sSql = "Delete from BillResourceTrans Where BillTransID in (Select BillTransId from BillTrans Where BillRegisterId = " + iBillRegId + ")";
                Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose(); 

                //Delete BillTrans
                Command = new SqlCommand("Delete from BillTrans  where BillRegisterId=" + iBillRegId + "", conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                sSql = "Delete from BillLabourTypeWBSLSTrans Where BillLSWBSTransId in (Select BillLSWBSTransId from BillLabourTypeWBSTrans Where BillLabourTypeTransId in(Select BillLabourTypeTransId from  BillLabourTypeTrans Where BillRegisterId = " + iBillRegId + "))";
                Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                sSql = "Delete from BillLabourTypeWBSLSTrans Where BillLabourTypeTransId in(Select BillLabourTypeTransId from  BillLabourTypeTrans Where BillRegisterId = " + iBillRegId + ")";
                Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                sSql = "Delete from BillLabourTypeWBSTrans Where BillLabourTypeTransId in(Select BillLabourTypeTransId from  BillLabourTypeTrans Where BillRegisterId = " + iBillRegId + ")";
                Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                sSql = "Delete from BillLabourTypeTrans Where BillRegisterId = " + iBillRegId;
                Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                sSql = "Delete from BillRetentionAdjustment Where AdjBillRegisterId = " + iBillRegId;
                Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();


                //if (CommFun.sCompDBName!= null)
                //{
                //    sSql = "DELETE FROM [" + CommFun.sCompDBName + "].dbo.EntryTrans WHERE RefId=" + iBillRegId + " AND RefType='WB'";
                //    Command = new SqlCommand(sSql, conn, tran);
                //    Command.ExecuteNonQuery(); Command.Dispose();
                //}

                #endregion


             //if (argBReg.FormatType == "A")
             //   {
             //       sSql = "Update WOPaymentTermsNew Set AdjustAmount=" + argBReg.BillAmount + " where TermsId=" + argTermsId + " and WORegisterId = " + argBReg.WORegisterID;
             //       Command = new SqlCommand(sSql, conn, tran);
             //       Command.ExecuteNonQuery(); Command.Dispose();
             //   }


                foreach (DataRow dRow in argMatAdvance.Rows)
                {
                    sSql = "Insert into BillMaterialAdvanceTrans(BillRegisterId,TypeId,ResourceId,Qty,Rate,Amount,Per,AdvanceAmt) " +
                           "Values(" + iBillRegId + "," + Convert.ToInt32(dRow["TypeId"]) + ", " + Convert.ToInt32(dRow["ResourceId"]) + "," + Convert.ToDecimal(dRow["Qty"]) + "," + Convert.ToDecimal(dRow["Rate"]) + "," + Convert.ToDecimal(dRow["Amount"]) + "," + Convert.ToDecimal(dRow["Per"]) + ", " + Convert.ToDecimal(dRow["AdvanceAmt"]) + ")";
                    Command = new SqlCommand(sSql, conn, tran);
                    Command.ExecuteNonQuery(); Command.Dispose();
                }

                foreach (LabourTransBO objLbr in argLabourSum)
                {
                    sSql = "Insert into BillLabourTrans(BillRegisterId,LabourTypeId,Qty,Rate,Amount,MinRate,AppRate) " +
                           "Values(" + iBillRegId + "," + objLbr.LabourTypeID + "," + objLbr.Qty + "," + objLbr.Rate + "," + objLbr.Amount + "," + objLbr.MinRate + ", " + objLbr.AppRate + ")";
                    Command = new SqlCommand(sSql, conn, tran);
                    Command.ExecuteNonQuery(); Command.Dispose();
                }


                if (argBReg.FormatType == "R")
                {
                    foreach (BillRetentionBO obj in argRetention)
                    {
                        if (Convert.ToDecimal(CommFun.IsNullCheck(obj.CurAmount, CommFun.datatypes.vartypenumeric)) > 0)
                        {
                            sSql = "Insert into BillRetentionAdjustment(BillRegisterId,AdjBillRegisterId,Amount) " +
                                   "Values(" + obj.BillRegisterId + "," + iBillRegId + "," + obj.CurAmount + ")";
                            Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose();
                        }
                     }
                }

                //insert AdjustAdvance Amount         
                if (argBReg.FormatType == "B")
                {
                    sSql = "Delete AdvAdjustment Where BillRegisterId=" + iBillRegId + " ";
                    Command = new SqlCommand(sSql, conn, tran);
                    Command.ExecuteNonQuery(); Command.Dispose();
                    Command.Dispose();

                    foreach (BillAdvanceBO obj in argAdvance)
                    {
                        decimal AdvAmount = Convert.ToDecimal(CommFun.IsNullCheck(obj.CAmount, CommFun.datatypes.vartypenumeric));
                        //decimal HAmount = Convert.ToDecimal(CommFun.IsNullCheck(dr["DedAmount"], CommFun.datatypes.vartypenumeric));

                        if (AdvAmount > 0)
                        {
                            sSql = "Insert Into AdvAdjustment (BillRegisterId,WORegisterId,Amount,RegId,FormatTypeId) " +
                                    "Values (" + iBillRegId + "," + obj.WORegisterId + "," + obj.CAmount + "," + obj.RegId + ", " + obj.FormatTypeId + ")";
                            Command = new SqlCommand(sSql, conn, tran);
                            Command.ExecuteNonQuery(); Command.Dispose();
                            Command.Dispose();

                            //sSql = "Update WOPaymentTermsNew Set AdjustAmount=AdjustAmount+" + AdvAmount + "-" + HAmount + " " +
                            //        "Where WORegisterId=" + Convert.ToInt32(CommFun.IsNullCheck(dr["WORegisterId"].ToString(), CommFun.datatypes.vartypenumeric));
                            //Command = new SqlCommand(sSql, conn, tran);
                            //Command.ExecuteNonQuery(); Command.Dispose();
                            //Command.Dispose();
                        }
                    }
                    
                }

                #region Insert BillLabours

                ////Insert BillTypeTrans
                //for (int p = 0; p < argBillType.Count; p++)
                //{
                //    Command = new SqlCommand("Insert Into BillTypeTrans (BillRegisterId,BillType) values (" + iBillRegId + ",'" + argBillType[p].ToString() + "')", conn, tran);
                //    Command.ExecuteNonQuery(); Command.Dispose();
                //}            



                //List<BillLabourTrans> argBLbrTrNew-BillLabourTrans
                //for (int u = 0; u <argLbrTrnNew.Rows.Count; u++)
                //{
                //    Command = new SqlCommand("Insert_BillLabourTrans", conn, tran);
                //    Command.CommandType = CommandType.StoredProcedure;
                //    Command.Parameters.Clear();
                //    Command.Parameters.AddWithValue("@BillRegisterId", iBillRegId);
                //    Command.Parameters.AddWithValue("@LabourTypeId", argLbrTrnNew.Rows[u]["TypeId"].ToString());
                //    Command.Parameters.AddWithValue("@Qty", argLbrTrnNew.Rows[u]["Qty"].ToString());
                //    Command.Parameters.AddWithValue("@Rate", argLbrTrnNew.Rows[u]["Rate"].ToString());
                //    Command.Parameters.AddWithValue("@Amount", argLbrTrnNew.Rows[u]["Amount"].ToString());
                //    Command.Parameters.AddWithValue("@MinRate", argLbrTrnNew.Rows[u]["MinWage"].ToString());
                //    Command.Parameters.AddWithValue("@AppRate", argLbrTrnNew.Rows[u]["AppRate"].ToString());

                //    Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                //}

                //Insert LabourBillTrans

                //List<LabourBillTrans> argLbrTrnNew -Wages Format
                for (int u = 0; u <argBLbrTrNew.Rows.Count; u++)
                {
                    Command = new SqlCommand("Insert_LabourBillTrans", conn, tran);
                    Command.CommandType = CommandType.StoredProcedure;
                    Command.Parameters.Clear();
                    Command.Parameters.AddWithValue("@BillRegisterId", iBillRegId);
                    Command.Parameters.AddWithValue("@TypeId", argBLbrTrNew.Rows[u]["TypeId"].ToString());
                    Command.Parameters.AddWithValue("@Amount", argBLbrTrNew.Rows[u]["Amount"].ToString());
                    Command.Parameters.AddWithValue("@Formula", argBLbrTrNew.Rows[u]["Formula"].ToString());

                    Command.ExecuteNonQuery(); Command.Dispose(); 
                }

                if (argDPE != null)
                {
                    List<DPERegTrans> oDpe = argDPE;
                    if (oDpe.Count > 0)
                    {
                        foreach (DPERegTrans objDPE in oDpe)
                        {
                            //Insert BillDPETrans
                            sSql = "Insert into BillDPETrans(BillRegisterID,DPERegisterID,TypeId) Values(" + iBillRegId + "," + objDPE.DPERegId + "," + objDPE.TypeId + ")";
                            Command = new SqlCommand(sSql, conn, tran);
                            Command.ExecuteNonQuery(); Command.Dispose(); 


                            //Update DPERegister Set ConvertBill=1 Where DPERegisterId ="++""
                            Command = new SqlCommand("Update DPERegister Set ConvertBill=1 Where DPERegisterId =" + objDPE.DPERegId + "", conn, tran);
                            Command.ExecuteNonQuery(); Command.Dispose(); 

                            //CommFun.ActualCompUpdate(objDPE.DPERegId, argCCId, "D", false, argrevId, argBReg.ContractorID, argDBName, conn, tran);
                        }

                        //InsertRateQ()
                    }
                }


                #endregion

                #region Bill FormatTrans



                foreach (BillLSTransBO obj in argBillLSTrans)
                {
                    sSql = "Insert into BillLSTrans(LabourStrengthID,BillRegisterID,TypeId) " +
                           "Values(" + obj.LabourStrengthID + "," + iBillRegId + ", " + obj.TypeId + ")";
                    Command = new SqlCommand(sSql, conn, tran);
                    Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                    sSql = "Update LabourStrengthMaster Set ConvertBill=1 Where LabourStrengthID  = " + obj.LabourStrengthID;
                    Command = new SqlCommand(sSql, conn, tran);
                    Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                }


                //Insert BillFormateTrans  List<BillAbstract> argBAbs
                foreach (BillAbstract objAbs in argBAbs)
                {
                    Command = new SqlCommand("Insert_BillFormatTrans", conn, tran);
                    Command.CommandType = CommandType.StoredProcedure;
                    Command.Parameters.Clear();
                    Command.Parameters.AddWithValue("@BillRegisterId", iBillRegId);
                    Command.Parameters.AddWithValue("@TypeId", objAbs.TypeId);
                    Command.Parameters.AddWithValue("@Amount", objAbs.Amount);
                    Command.Parameters.AddWithValue("@AccountId", objAbs.AccountId);
                    Command.Parameters.AddWithValue("@Formula", objAbs.Formula);
                    Command.Parameters.AddWithValue("@Add_Less_Flag", objAbs.Sign);
                    Command.Parameters.AddWithValue("@QualMId", objAbs.QualMId);

                    Command.ExecuteNonQuery(); Command.Dispose(); 

                    //Qualifier TypeId in BillFormatTrans

                    sSql = "Update BillFormatTrans Set QTypeId=" + objAbs.QTypeId + ",FormatType='" + objAbs.BFormatType + "',QualifierId = " + objAbs.QualifierId + ",TaxPercentage = " + objAbs.TaxPer + " Where BillRegisterId=" + iBillRegId + " and TypeId=" + objAbs.TypeId;
                    Command = new SqlCommand(sSql, conn, tran);
                    Command.ExecuteNonQuery(); Command.Dispose(); 
                    Command.Dispose();


                    if (objAbs.FormatTypeId == 8)
                    {
                        List<BillVATBO> oVATsel = argVAT.FindAll(delegate(BillVATBO del) { return (del.TypeId == objAbs.TypeId); });
                        if (oVATsel.Count > 0)
                        {
                            foreach (BillVATBO objVAT in oVATsel)
                            {
                                sSql = "Insert into BillVATTrans(BillRegisterId,TypeId,Expression,ExpValue,VATPer,NetValue) " +
                                       "Values(" + iBillRegId + "," + objAbs.TypeId + ",'" + objVAT.Expression + "'," + objVAT.ExpValue + ", " + objVAT.Per + "," + objVAT.NetTax + ")";
                                Command = new SqlCommand(sSql, conn, tran);
                                Command.ExecuteNonQuery(); Command.Dispose();
                            }
                        }
                    }



                    if (objAbs.FormatTypeId == 1)
                    {

                        //Insert Bill TurnKey Trans argTurnKeyTrans

                        List<BillTurnKeyEntry> oBTsel = argTurnKeyTrans.FindAll(delegate(BillTurnKeyEntry del) { return (del.BAbsTypeId == objAbs.TypeId); });
                        if (oBTsel.Count > 0)
                        {
                            foreach (BillTurnKeyEntry objBTKTrns in oBTsel)
                            {

                                //if (objBTKTrns.WORegId == 0)
                                //{
                                //    sSql = "Insert INTO BillTurnKeyTrans(BillRegisterId,TypeId,WORegisterId,DPERegisterId,AnalysisId,CumPercentage,CurPercentage,CurAmount,PrevPercentage,CumQty,WOAllotted) " +
                                //        "Values(" + iBillRegId + "," + objBTKTrns.BAbsTypeId + ",0,"+objBTKTrns.DPERegId+"," + objBTKTrns.AnalysisId + "," + objBTKTrns.CumulativeQty + ", " +
                                //        " " + objBTKTrns.CurrentQty + "," + objBTKTrns.CurrentAmount + "," + objBTKTrns.PreviousQty + "," + objBTKTrns.CurrentQty + "," + objBTKTrns.WOQty + ")";
                                //}
                                //else 
                                //{
                                //    sSql = "Insert INTO BillTurnKeyTrans(BillRegisterId,TypeId,WORegisterId,DPERegisterId,AnalysisId,CumPercentage,CurPercentage,CurAmount,CumAmount,WOAllotted,PrevPercentage,CumQty) " +
                                //        "Values(" + iBillRegId + "," + objBTKTrns.BAbsTypeId + "," + objBTKTrns.WORegId + ","+objBTKTrns.DPERegId+"," + objBTKTrns.AnalysisId + "," + objBTKTrns.CumulativeQty + ", " +
                                //        " " + objBTKTrns.CurrentQty + "," + objBTKTrns.CurrentAmount + "," + objBTKTrns.CumAmount + "," + objBTKTrns.WOQty + "," + objBTKTrns.PreviousQty + "," + objBTKTrns.CurrentQty + ")";
                                //}

                                sSql = "Insert INTO BillTurnKeyTrans(BillRegisterId,TypeId,WORegisterId,DPERegisterId,AnalysisId,CumPercentage,CurPercentage,CurAmount,CumAmount,WOAllotted,PrevPercentage,CumQty) " +
                                    "Values(" + iBillRegId + "," + objBTKTrns.BAbsTypeId + "," + objBTKTrns.WORegId + "," + objBTKTrns.DPERegId + "," + objBTKTrns.AnalysisId + "," + objBTKTrns.CumulativeQty + ", " +
                                    " " + objBTKTrns.CurrentQty + "," + objBTKTrns.CurrentAmount + "," + objBTKTrns.CumAmount + "," + objBTKTrns.WOQty + "," + objBTKTrns.PreviousQty + "," + objBTKTrns.CurrentQty + ")";

                                Command = new SqlCommand(sSql, conn, tran);
                                Command.ExecuteNonQuery(); Command.Dispose();
                                Command.Dispose();
                            }

                            //Bill TurnKey DPE TRans
                            //if (argDPE != null)
                            //{
                            //    List<DPERegTrans> oDpe = argDPE.FindAll(delegate(DPERegTrans del) { return (del.TypeId == objAbs.TypeId); });
                            //    if (oDpe.Count > 0)
                            //    {
                            //        foreach (DPERegTrans objDPE in oDpe)
                            //        {
                            //            //Insert BillDPETrans
                            //            Command = new SqlCommand("Insert_BillDPETrans", conn, tran);
                            //            Command.CommandType = CommandType.StoredProcedure;
                            //            Command.Parameters.Clear();
                            //            Command.Parameters.AddWithValue("@BillRegisterID", iBillRegId);
                            //            Command.Parameters.AddWithValue("@DPERegisterID", objDPE.DPERegId);

                            //            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                            //            //Update DPERegister Set ConvertBill=1 Where DPERegisterId ="++""
                            //            Command = new SqlCommand("Update DPERegister Set ConvertBill=1 Where DPERegisterId =" + objDPE.DPERegId + "", conn, tran);
                            //            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                            //            CommFun.ActualCompUpdate(objDPE.DPERegId, argCCId, "D", false, argrevId, argBReg.ContractorID,argDBName, conn, tran);
                            //        }

                            //        //InsertRateQ()
                            //    }
                            //}
                        }


                        //Insert BillTrans
                        List<BillEntry> osel = argBEntry.FindAll(delegate(BillEntry del)
                        {
                            return (del.BAbsTypeId == objAbs.TypeId); 
                        });
                        if (osel.Count > 0)
                        {
                            foreach (BillEntry objBTrns in osel)
                            {
                                Command = new SqlCommand("Insert_BillTrans", conn, tran);
                                Command.CommandType = CommandType.StoredProcedure;
                                Command.Parameters.Clear();
                                Command.Parameters.AddWithValue("@BillTransID", objBTrns.BillTransId);
                                Command.Parameters["@BillTransID"].Direction = ParameterDirection.Output;
                                Command.Parameters.AddWithValue("@BillRegisterID", iBillRegId);
                                Command.Parameters.AddWithValue("@TypeId", objBTrns.BAbsTypeId);
                                Command.Parameters.AddWithValue("@IOW_ID", objBTrns.IOW_ID);
                                Command.Parameters.AddWithValue("@Comp_ID", objBTrns.ResourceId);
                                Command.Parameters.AddWithValue("@UnitID", objBTrns.Unit);
                                if (objBTrns.Sign.ToString() == "-")
                                {
                                    Command.Parameters.AddWithValue("@Qty", objBTrns.Qty * (-1));
                                    Command.Parameters.AddWithValue("@Amount", objBTrns.Amount*(-1));
                                }
                                else
                                {
                                    Command.Parameters.AddWithValue("@Qty", objBTrns.Qty);
                                    Command.Parameters.AddWithValue("@Amount", objBTrns.Amount);
                                }

                                Command.Parameters.AddWithValue("@Rate", objBTrns.Rate);
                                
                                Command.Parameters.AddWithValue("@AnalysisHeadId", objBTrns.AnalysisHeadId);
                                Command.Parameters.AddWithValue("@BillType", argBReg.BillType);
                                Command.Parameters.AddWithValue("@MType", objBTrns.MType);
                                Command.Parameters.AddWithValue("@FullRate", objBTrns.FullRate);
                                Command.Parameters.AddWithValue("@PerPart", objBTrns.PerPart);
                                Command.Parameters.AddWithValue("@PartRate", objBTrns.PartRate);
                                Command.Parameters.AddWithValue("@MUnitID", objBTrns.MUOM_ID);
                                Command.Parameters.AddWithValue("@UFactor", objBTrns.UFactor);
                                Command.Parameters.AddWithValue("@DetSpec", objBTrns.DetSpec);
                                Command.Parameters.AddWithValue("@WORegisterID", objBTrns.WORegisterID);
                                Command.Parameters.AddWithValue("@RateType", objBTrns.RateType);    

                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                                iBillTransId = (int)Command.Parameters["@BillTransID"].Value;

                                //insert BillItem Labour Trans
                                int rsrceId2 = 0;
                                if (objBTrns.ResourceId == 0) { rsrceId2 = objBTrns.IOW_ID; }
                                else if (objBTrns.IOW_ID == 0) { rsrceId2 = objBTrns.ResourceId; }
                                //List<BillItemLbrStrnthTransBO> oSItmLbrTrns = argBLbrItem.FindAll(delegate(BillItemLbrStrnthTransBO del) { return del.BAbsTypeId == objBTrns.BAbsTypeId && del.ItemTransId == rsrceId2; });
                                //if (oSItmLbrTrns.Count > 0)
                                //{
                                //    foreach (BillItemLbrStrnthTransBO objItem in oSItmLbrTrns)
                                //    {
                                //        Command = new SqlCommand("Insert_BillItemLabourTrans", conn, tran);
                                //        Command.CommandType = CommandType.StoredProcedure;
                                //        Command.Parameters.Clear();
                                //        Command.Parameters.AddWithValue("@BillTransID", iBillTransId);
                                //        Command.Parameters.AddWithValue("@LabourTypeID", objItem.LbrTypeId);
                                //        Command.Parameters.AddWithValue("@Qty", objItem.Qtty);
                                //        Command.Parameters.AddWithValue("@Rate", objItem.Rate);
                                //        Command.Parameters.AddWithValue("@Amount", objItem.Amount);
                                //        Command.Parameters.AddWithValue("@AppRate", objItem.AppRate);
                                //        Command.Parameters.AddWithValue("@MinRate", objItem.MinRate);
                                //        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                //    }
                                //}    

                                List<LabourTransBO> oChk = argLabourItem.FindAll(delegate(LabourTransBO del) { return del.AbsTypeId == objAbs.TypeId && del.RowId == objBTrns.RowId; });

                                foreach (LabourTransBO objLbr in oChk)
                                {
                                    sSql = "Insert into BillItemLabourTrans(BillTransId,LabourTypeId,Qty,Rate,Amount,MinRate,AppRate) " +
                                           "Values(" + iBillTransId + "," + objLbr.LabourTypeID + "," + objLbr.Qty + "," + objLbr.Rate + "," + objLbr.Amount + "," + objLbr.MinRate + ", " + objLbr.AppRate + ")";
                                    Command = new SqlCommand(sSql, conn, tran);
                                    Command.ExecuteNonQuery(); Command.Dispose();
                                    Command.Dispose();
                                }


                                if (objBTrns.Type == "I")
                                {
                                    if (argBReg.QualType == 1)
                                    {
                                        DataView dv;
                                        DataTable dtR = new DataTable();
                                        //IOW Resource Trans
                                        if (argResQualTran != null)
                                        {
                                            if (argResQualTran.Rows.Count > 0)
                                            {
                                                dv = new DataView(argResQualTran);
                                                dv.RowFilter = "WOTransRowId=" + objBTrns.RowId;
                                                dtR = dv.ToTable();
                                            }
                                            else
                                            { dtR.Rows.Clear(); }
                                        }

                                        int iResSel = 0;
                                        for (int l = 0; l < dtR.Rows.Count; l++)
                                        {
                                            if (Convert.ToBoolean(dtR.Rows[l]["Select"]) == true) { iResSel = 1; }

                                            sSql = "Insert Into BillResourceTrans (BillTransId,TypeId,ResourceId,QRate,CoffQty,IOWQty,Amount,NetAmount,IOWId,BillQTypeId,ResSel) " +
                                                    "Values(" + iBillTransId + "," + Convert.ToInt32(dtR.Rows[l]["TypeId"]) + "," + Convert.ToInt32(dtR.Rows[l]["ResourceId"]) + ", " +
                                                    "" + Convert.ToDecimal(dtR.Rows[l]["QRate"]) + "," + Convert.ToDecimal(dtR.Rows[l]["CoffQty"]) + "," + Convert.ToDecimal(dtR.Rows[l]["IOWQty"]) + "," + Convert.ToDecimal(dtR.Rows[l]["WOAmount"]) + "," + Convert.ToDecimal(dtR.Rows[l]["NetAmount"]) + "," + Convert.ToInt32(dtR.Rows[l]["IOWId"]) + "," + Convert.ToInt32(dtR.Rows[l]["WOQTypeId"]) + "," + iResSel + ")";
                                            Command = new SqlCommand(sSql, conn, tran);
                                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                                        }
                                        //Insert QTypeTrans
                                        if (argResRateQ != null)
                                        {
                                            if (argResRateQ.Rows.Count > 0)
                                            {
                                                dv = new DataView(argResRateQ);
                                                dv.RowFilter = "TransRowId=" + objBTrns.RowId;
                                                dtR = dv.ToTable();
                                            }
                                            else
                                            {
                                                dtR.Rows.Clear();
                                            }
                                        }

                                        for (int q = 0; q < dtR.Rows.Count; q++)
                                        {
                                            sSql = "Insert Into BillResRate_Q (BillRegisterID,QualifierId,Expression,ExpPer,Add_Less_Flag,SurCharge,EDCess,Amount,ExpValue,ExpPerValue," +
                                                    "SurValue,EDValue,HEDCess,HEDValue,NetPer,QType,BillTransID,ResourceID,TaxablePer,TaxableValue) " +
                                                    " Values (" + iBillRegId + "," + Convert.ToInt32(dtR.Rows[q]["QualifierId"]) + ",'" + dtR.Rows[q]["Expression"].ToString() + "', " +
                                                     " " + Convert.ToDecimal(dtR.Rows[q]["ExpPer"]) + ",'" + dtR.Rows[q]["Add_Less_Flag"].ToString() + "', " +
                                                     " " + Convert.ToDecimal(dtR.Rows[q]["SurCharge"]) + "," + Convert.ToDecimal(dtR.Rows[q]["EDCess"]) + ", " +
                                                     " " + Convert.ToDecimal(dtR.Rows[q]["Amount"]) + "," + Convert.ToDecimal(dtR.Rows[q]["ExpValue"]) + "," +
                                                     " " + Convert.ToDecimal(dtR.Rows[q]["ExpPerValue"]) + "," + Convert.ToDecimal(dtR.Rows[q]["SurValue"]) + ", " +
                                                     " " + Convert.ToDecimal(dtR.Rows[q]["EDValue"]) + "," + Convert.ToDecimal(dtR.Rows[q]["HEDPer"]) + "," +
                                                      " " + Convert.ToDecimal(dtR.Rows[q]["HEDValue"]) + "," + Convert.ToDecimal(dtR.Rows[q]["NetPer"]) + "," +
                                                     " '" + (dtR.Rows[q]["QType"]) + "'," + iBillTransId + ", " +
                                                     " " + Convert.ToInt32(dtR.Rows[q]["ResourceId"]) + "," +
                                                     "  " + Convert.ToDecimal(dtR.Rows[q]["TaxablePer"]) + "," + Convert.ToDecimal(dtR.Rows[q]["TaxableValue"]) + ")";
                                            Command = new SqlCommand(sSql, conn, tran);
                                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                        }
                                    }


                                    //if (argBReg.BillType == "I")
                                    //{

                                    //    if (argSplit != "Y")
                                    //    {
                                          
                                    //    }
                                    //}



                                    //WBSTrans
                                    List<BillWBSTrans> Chk = argWBSTrans.FindAll(delegate(BillWBSTrans del) { return del.TypeId == objAbs.TypeId && del.RowId == objBTrns.RowId; });

                                    if (Chk.Count > 0)
                                    {
                                        foreach (BillWBSTrans objWBS in Chk)
                                        {
                                            if (objWBS.Qty != 0)
                                            {
                                                decimal dWBSQty = objWBS.Qty;
                                                decimal dWBSAmt = objWBS.Amount;
                                                if (objBTrns.Sign.ToString() == "-") { dWBSQty = dWBSQty * (-1); dWBSAmt = dWBSAmt * (-1);}

                                                sSql = "INSERT INTO BillWBSTrans (BillTransId,AnalysisId,Qty,MType,Rate,Amount)  " +
                                                       "VALUES (" + iBillTransId + "," + objWBS.AnalysisHeadId + "," + dWBSQty + "," + objWBS.MType + "," + objWBS.Rate + "," + dWBSAmt + ")Select SCOPE_IDENTITY();";
                                                Command = new SqlCommand(sSql, conn, tran);
                                                iBillWBSTransId = Convert.ToInt32(Command.ExecuteScalar());
                                                Command.Dispose();

                                                List<LabourTransBO> lChk = argItemLbr.FindAll(delegate(LabourTransBO del) { return del.AbsTypeId == objAbs.TypeId && del.RowId == objBTrns.RowId && del.AnalysisId == objWBS.AnalysisHeadId; });
                                                foreach (LabourTransBO objLbr in lChk)
                                                {
                                                    sSql = "Insert into BillWBSLabourTrans(BillWBSTransId,BillTransId,LabourTypeId,Qty,Rate,Amount,MinRate,AppRate,AnalysisId) " +
                                                           "Values(" + iBillWBSTransId + "," + iBillTransId + "," + objLbr.LabourTypeID + "," + objLbr.Qty + "," + objLbr.Rate + "," + objLbr.Amount + "," + objLbr.MinRate + ", " + objLbr.AppRate + "," + objWBS.AnalysisHeadId + ")";
                                                    Command = new SqlCommand(sSql, conn, tran);
                                                    Command.ExecuteNonQuery(); Command.Dispose();
                                                    Command.Dispose();
                                                }


                                                //WBSRow LabourTrans
                                                //List<BillIOWLbrTrans> oIOWLbr = argBIOWLbrTrans.FindAll(delegate(BillIOWLbrTrans del) { return ((del.IOWRowId == objWBS.WBSRowId) && (del.BEntryRowId == objBTrns.RowId)); });
                                                //List<BillIOWLbrTrans> oIOWLbr = argBIOWLbrTrans.FindAll(delegate(BillIOWLbrTrans del) { return ((del.DPEItemTransId == rsrceId2) && (del.AnalysisId == objWBS.AnalysisHeadId)); });
                                                //if (oIOWLbr.Count > 0)
                                                //{
                                                //    foreach (BillIOWLbrTrans objIOWLbr in oIOWLbr)
                                                //    {
                                                //        Command = new SqlCommand("Insert_BillIOWLabourTrans", conn, tran);
                                                //        Command.CommandType = CommandType.StoredProcedure;
                                                //        Command.Parameters.Clear();
                                                //        Command.Parameters.AddWithValue("@BillIOWTransID", iBillIOWTransId);
                                                //        Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                //        Command.Parameters.AddWithValue("@LabourTypeId", objIOWLbr.LbrTypeId);
                                                //        Command.Parameters.AddWithValue("@Qty", objIOWLbr.Qtty);
                                                //        Command.Parameters.AddWithValue("@Rate", objIOWLbr.Rate);
                                                //        Command.Parameters.AddWithValue("@Amount", objIOWLbr.Amount);
                                                //        Command.Parameters.AddWithValue("@AppRate", objIOWLbr.AppRate);
                                                //        Command.Parameters.AddWithValue("@MinRate", objIOWLbr.MinRate);                                                        
                                                //        Command.Parameters.AddWithValue("@AnalysisId", objIOWLbr.AnalId);


                                                //        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                //    }
                                                //}


                                                // WBSMeasurementTrans

                                                if (objWBS.MType == 0 || objWBS.MType == 2)
                                                {
                                                    List<BillWBSMeasurementTransBO> wbsMsr = argWBSMsrTrans.FindAll(
                                                        delegate(BillWBSMeasurementTransBO del)
                                                        {
                                                            return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objBTrns.RowId) && (del.AHeadId == objWBS.AnalysisHeadId));
                                                        });
                                                    if (wbsMsr.Count > 0)
                                                    {
                                                        foreach (BillWBSMeasurementTransBO objIMsr in wbsMsr)
                                                        {
                                                            Command = new SqlCommand("Insert_BillWBSMeasurment", conn, tran);
                                                            Command.CommandType = CommandType.StoredProcedure;
                                                            Command.Parameters.Clear();
                                                            Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                            Command.Parameters.AddWithValue("@BillIOWTransId", objIMsr.ItemTransId);
                                                            Command.Parameters.AddWithValue("@IOWId", objIMsr.AHeadId);
                                                            Command.Parameters.AddWithValue("@RowId", objIMsr.RowId);
                                                            Command.Parameters.AddWithValue("@SlNo", objIMsr.SlNo);
                                                            Command.Parameters.AddWithValue("@Description", objIMsr.Description);
                                                            Command.Parameters.AddWithValue("@No1", objIMsr.No1);
                                                            Command.Parameters.AddWithValue("@No2", objIMsr.No2);
                                                            Command.Parameters.AddWithValue("@Length", objIMsr.Length);
                                                            Command.Parameters.AddWithValue("@Breadth", objIMsr.Breadth);
                                                            Command.Parameters.AddWithValue("@Depth", objIMsr.Depth);
                                                            Command.Parameters.AddWithValue("@Qty", objIMsr.Qty);

                                                            Command.Parameters.AddWithValue("@Sign", objIMsr.Sign);
                                                            Command.Parameters.AddWithValue("@MBookNO", objIMsr.MBookNO);
                                                            Command.Parameters.AddWithValue("@PageNo", objIMsr.PageNo);
                                                            Command.Parameters.AddWithValue("@LevelNo", objIMsr.LevelNo);
                                                            Command.Parameters.AddWithValue("@ParentID", objIMsr.ParentID);
                                                            Command.Parameters.AddWithValue("@SteelId", objIMsr.SteelId);
                                                            Command.Parameters.AddWithValue("@Factor", objIMsr.Factor);

                                                            if (CommFun.IsNullCheck(objIMsr.FNo1, CommFun.datatypes.vartypestring) != null)
                                                                Command.Parameters.AddWithValue("@FNo1", CommFun.IsNullCheck(objIMsr.FNo1, CommFun.datatypes.vartypestring));
                                                            else
                                                                Command.Parameters.AddWithValue("@FNo1", "");

                                                            if (CommFun.IsNullCheck(objIMsr.FNo2, CommFun.datatypes.vartypestring) != null)
                                                                Command.Parameters.AddWithValue("@FNo2", CommFun.IsNullCheck(objIMsr.FNo2, CommFun.datatypes.vartypestring));
                                                            else
                                                                Command.Parameters.AddWithValue("@FNo2", "");

                                                            if (Convert.ToDecimal(CommFun.IsNullCheck(objIMsr.FLength, CommFun.datatypes.vartypenumeric)) != 0)
                                                                Command.Parameters.AddWithValue("@FLength", CommFun.IsNullCheck(objIMsr.FLength, CommFun.datatypes.vartypestring));
                                                            else
                                                                Command.Parameters.AddWithValue("@FLength", 0);

                                                            if (Convert.ToDecimal(CommFun.IsNullCheck(objIMsr.FBreadth, CommFun.datatypes.vartypenumeric)) != 0)
                                                                Command.Parameters.AddWithValue("@FBreadth", CommFun.IsNullCheck(objIMsr.FBreadth, CommFun.datatypes.vartypestring));
                                                            else
                                                                Command.Parameters.AddWithValue("@FBreadth", 0);

                                                            if (Convert.ToDecimal(CommFun.IsNullCheck(objIMsr.FDepth, CommFun.datatypes.vartypenumeric)) != 0)
                                                                Command.Parameters.AddWithValue("@FDepth", CommFun.IsNullCheck(objIMsr.FDepth, CommFun.datatypes.vartypestring));
                                                            else
                                                                Command.Parameters.AddWithValue("@FDepth", 0);

                                                            Command.Parameters.AddWithValue("@BillType", CommFun.IsNullCheck(objBTrns.Type.ToString(), CommFun.datatypes.vartypestring));

                                                            if (CommFun.IsNullCheck(objIMsr.SubFormula, CommFun.datatypes.vartypestring) != null)
                                                                Command.Parameters.AddWithValue("@SubFormula", CommFun.IsNullCheck(objIMsr.SubFormula, CommFun.datatypes.vartypestring));
                                                            else
                                                                Command.Parameters.AddWithValue("@SubFormula", "");

                                                            if (CommFun.IsNullCheck(objIMsr.WBSWise, CommFun.datatypes.vartypestring) != null)
                                                                Command.Parameters.AddWithValue("@WBSWise", CommFun.IsNullCheck(objIMsr.WBSWise, CommFun.datatypes.vartypestring));
                                                            else
                                                                Command.Parameters.AddWithValue("@WBSWise", "");

                                                            //Command.Parameters.AddWithValue("@FNo1", objIMsr.FNo1);
                                                            //Command.Parameters.AddWithValue("@FNo2", objIMsr.FNo2);
                                                            //Command.Parameters.AddWithValue("@FLength", objIMsr.FLength);
                                                            //Command.Parameters.AddWithValue("@FBreadth", objIMsr.FBreadth);

                                                            //Command.Parameters.AddWithValue("@FDepth", objIMsr.FDepth);
                                                            //Command.Parameters.AddWithValue("@BillType", objIMsr.BillType);
                                                            //Command.Parameters.AddWithValue("@SubFormula", objIMsr.SubFormula);
                                                            //Command.Parameters.AddWithValue("@WBSWise", objIMsr.WBSWise);

                                                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                        }
                                                    }
                                                }
                                                else if (objWBS.MType == 1)
                                                {
                                                    List<BillMSteelSelection> ocheckUpdate = oSteelSel.FindAll(
                                                        delegate(BillMSteelSelection sel)
                                                        {
                                                            return sel.TypeId == objAbs.TypeId  && sel.AnalId == objWBS.AnalysisHeadId && sel.TransRowId == objBTrns.RowId;
                                                        });
                                                    if (ocheckUpdate.Count > 0)
                                                    {
                                                        foreach (BillMSteelSelection IMsrSel in ocheckUpdate)
                                                        {
                                                            sSql = "Insert INTO BillMSteelSelection(BillTransId,IOW_ID,IOW_Trans_Id,AnalId,SteelId) " +
                                                             " Values(" + iBillTransId + "," + objBTrns.IOW_ID + ",0," + objWBS.AnalysisHeadId + " , " +
                                                             " " + CommFun.IsNullCheck(IMsrSel.SteelId, CommFun.datatypes.vartypenumeric) + ")";
                                                            Command = new SqlCommand(sSql, conn, tran);
                                                            Command.ExecuteNonQuery(); Command.Dispose();
                                                            Command.Dispose();
                                                        }
                                                    }

                                                    List<BillWBSMeasurementTransBO> wbsMsr = argWBSMsrTrans.FindAll(
                                                        delegate(BillWBSMeasurementTransBO del)
                                                        {
                                                            return (del.TypeId == objAbs.TypeId && del.TransRowId == objBTrns.RowId && del.AHeadId == objWBS.AnalysisHeadId);
                                                        });
                                                    if (wbsMsr.Count > 0)
                                                    {
                                                        foreach (BillWBSMeasurementTransBO objIMsr in wbsMsr)
                                                        {
                                                            Command = new SqlCommand("Insert_BillWBSMeasurment", conn, tran);
                                                            Command.CommandType = CommandType.StoredProcedure;
                                                            Command.Parameters.Clear();
                                                            Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                            Command.Parameters.AddWithValue("@BillIOWTransId", objIMsr.ItemTransId);
                                                            Command.Parameters.AddWithValue("@IOWId", objIMsr.AHeadId);
                                                            Command.Parameters.AddWithValue("@RowId", objIMsr.RowId);
                                                            Command.Parameters.AddWithValue("@SlNo", objIMsr.SlNo);
                                                            Command.Parameters.AddWithValue("@Description", objIMsr.Description);
                                                            Command.Parameters.AddWithValue("@No1", objIMsr.No1);
                                                            Command.Parameters.AddWithValue("@No2", objIMsr.No2);
                                                            Command.Parameters.AddWithValue("@Length", objIMsr.Length);
                                                            Command.Parameters.AddWithValue("@Breadth", 0);
                                                            Command.Parameters.AddWithValue("@Depth", objIMsr.Diameter);
                                                            Command.Parameters.AddWithValue("@Qty", objIMsr.Qty);

                                                            Command.Parameters.AddWithValue("@Sign", "");
                                                            Command.Parameters.AddWithValue("@MBookNO", 0);
                                                            Command.Parameters.AddWithValue("@PageNo", 0);
                                                            Command.Parameters.AddWithValue("@LevelNo", 0);
                                                            Command.Parameters.AddWithValue("@ParentID", 0);
                                                            Command.Parameters.AddWithValue("@SteelId", objIMsr.SteelId);
                                                            Command.Parameters.AddWithValue("@Factor", objIMsr.Factor);
                                                            Command.Parameters.AddWithValue("@FNo1", "");
                                                            Command.Parameters.AddWithValue("@FNo2", "");
                                                            Command.Parameters.AddWithValue("@FLength", "");
                                                            Command.Parameters.AddWithValue("@FBreadth", "");

                                                            Command.Parameters.AddWithValue("@FDepth", "");
                                                            Command.Parameters.AddWithValue("@BillType", "");
                                                            Command.Parameters.AddWithValue("@SubFormula", "");
                                                            Command.Parameters.AddWithValue("@WBSWise", objIMsr.WBSWise);

                                                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }                                            
                                }
                                //if (argDPE!=null)
                                //{
                                //    List<DPERegTrans> oDpe = argDPE.FindAll(delegate(DPERegTrans del) { return (del.TypeId == objAbs.TypeId); });
                                //    if (oDpe.Count > 0)
                                //    {
                                //        foreach (DPERegTrans objDPE in oDpe)
                                //        {
                                //            //Insert BillDPETrans
                                //            Command = new SqlCommand("Insert_BillDPETrans", conn, tran);
                                //            Command.CommandType = CommandType.StoredProcedure;
                                //            Command.Parameters.Clear();
                                //            Command.Parameters.AddWithValue("@BillRegisterID", iBillRegId);
                                //            Command.Parameters.AddWithValue("@DPERegisterID", objDPE.DPERegId);

                                //            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                                //            //Update DPERegister Set ConvertBill=1 Where DPERegisterId ="++""
                                //            Command = new SqlCommand("Update DPERegister Set ConvertBill=1 Where DPERegisterId =" + objDPE.DPERegId + "", conn, tran);
                                //            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                                //            CommFun.ActualCompUpdate(objDPE.DPERegId, argCCId, "D", false, argrevId, argBReg.ContractorID, argDBName, conn, tran);
                                //        }
                                //        //InsertRateQ()
                                //    }
                                //}

                                if (objBTrns.Type.ToString() == "I")
                                {
                                    //Insert Measurment for BillTYpe =I; List<BIMeasurementBO> argBIMsrment

                                    if (objBTrns.MType == 0 || objBTrns.MType == 2)
                                    {
                                        List<BIMeasurementBO> oSBIMsr = argBIMsrment.FindAll(delegate(BIMeasurementBO del) { return del.TypeId == objAbs.TypeId && del.TransRowId == objBTrns.RowId; });

                                        if (oSBIMsr.Count > 0)
                                        {
                                            foreach (BIMeasurementBO objIMsr in oSBIMsr)
                                            {
                                                Command = new SqlCommand("Insert_BillMeasurement", conn, tran);
                                                Command.CommandType = CommandType.StoredProcedure;
                                                Command.Parameters.Clear();
                                                Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                Command.Parameters.AddWithValue("@BillIOWTransId", 0);
                                                Command.Parameters.AddWithValue("@IOWId", objIMsr.IOWId);
                                                Command.Parameters.AddWithValue("@RowId", objIMsr.RowId);
                                                Command.Parameters.AddWithValue("@SlNo", objIMsr.SlNo);
                                                Command.Parameters.AddWithValue("@Description", objIMsr.Description);
                                                Command.Parameters.AddWithValue("@No1", objIMsr.No1);
                                                Command.Parameters.AddWithValue("@No2", objIMsr.No2);
                                                Command.Parameters.AddWithValue("@Length", objIMsr.Length);
                                                Command.Parameters.AddWithValue("@Breadth", objIMsr.Breadth);
                                                Command.Parameters.AddWithValue("@Depth", objIMsr.Depth);
                                                Command.Parameters.AddWithValue("@Qty", objIMsr.Qty);
                                                Command.Parameters.AddWithValue("@Sign", objIMsr.Sign);
                                                Command.Parameters.AddWithValue("@MBookNO", objIMsr.MBookNO);
                                                Command.Parameters.AddWithValue("@PageNo", objIMsr.PageNo);
                                                Command.Parameters.AddWithValue("@LevelNo", objIMsr.LevelNo);
                                                Command.Parameters.AddWithValue("@ParentID", objIMsr.ParentID);
                                                Command.Parameters.AddWithValue("@SteelId", objIMsr.SteelId);
                                                Command.Parameters.AddWithValue("@Factor", objIMsr.Factor);

                                                if (CommFun.IsNullCheck(objIMsr.FNo1, CommFun.datatypes.vartypestring) != null)
                                                    Command.Parameters.AddWithValue("@FNo1", CommFun.IsNullCheck(objIMsr.FNo1, CommFun.datatypes.vartypestring));
                                                else
                                                    Command.Parameters.AddWithValue("@FNo1", "");

                                                if (CommFun.IsNullCheck(objIMsr.FNo2, CommFun.datatypes.vartypestring) != null)
                                                    Command.Parameters.AddWithValue("@FNo2", CommFun.IsNullCheck(objIMsr.FNo2, CommFun.datatypes.vartypestring));
                                                else
                                                    Command.Parameters.AddWithValue("@FNo2", "");

                                                if (Convert.ToDecimal(CommFun.IsNullCheck(objIMsr.FLength, CommFun.datatypes.vartypenumeric)) != 0)
                                                    Command.Parameters.AddWithValue("@FLength", CommFun.IsNullCheck(objIMsr.FLength, CommFun.datatypes.vartypestring));
                                                else
                                                    Command.Parameters.AddWithValue("@FLength", 0);

                                                if (Convert.ToDecimal(CommFun.IsNullCheck(objIMsr.FBreadth, CommFun.datatypes.vartypenumeric)) != 0)
                                                    Command.Parameters.AddWithValue("@FBreadth", CommFun.IsNullCheck(objIMsr.FBreadth, CommFun.datatypes.vartypestring));
                                                else
                                                    Command.Parameters.AddWithValue("@FBreadth", 0);

                                                if (Convert.ToDecimal(CommFun.IsNullCheck(objIMsr.FDepth, CommFun.datatypes.vartypenumeric)) != 0)
                                                    Command.Parameters.AddWithValue("@FDepth", CommFun.IsNullCheck(objIMsr.FDepth, CommFun.datatypes.vartypestring));
                                                else
                                                    Command.Parameters.AddWithValue("@FDepth", 0);

                                                Command.Parameters.AddWithValue("@BillType", CommFun.IsNullCheck(objBTrns.Type.ToString(), CommFun.datatypes.vartypestring));

                                                if (CommFun.IsNullCheck(objIMsr.SubFormula, CommFun.datatypes.vartypestring) != null)
                                                    Command.Parameters.AddWithValue("@SubFormula", CommFun.IsNullCheck(objIMsr.SubFormula, CommFun.datatypes.vartypestring));
                                                else
                                                    Command.Parameters.AddWithValue("@SubFormula", "");

                                                //Command.Parameters.AddWithValue("@FNo1", objIMsr.FNo1);
                                                //Command.Parameters.AddWithValue("@FNo2", objIMsr.FNo2);
                                                //Command.Parameters.AddWithValue("@FLength", objIMsr.FLength);
                                                //Command.Parameters.AddWithValue("@FBreadth", objIMsr.FBreadth);
                                                //Command.Parameters.AddWithValue("@FDepth", objIMsr.FDepth);
                                                //Command.Parameters.AddWithValue("@BillType", objIMsr.BillType);
                                                //Command.Parameters.AddWithValue("@SubFormula", objIMsr.SubFormula);

                                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                            }
                                        }
                                    }
                                    else if (objBTrns.MType == 1)
                                    {
                                        List<BillMSteelSelection> ocheckUpdate = oSteelSel.FindAll(
                                        delegate(BillMSteelSelection sel)
                                        {
                                            return sel.TypeId == objAbs.TypeId && sel.TransRowId == objBTrns.RowId;
                                        });
                                        if (ocheckUpdate.Count > 0)
                                        {
                                            foreach (BillMSteelSelection IMsrSel in ocheckUpdate)
                                            {
                                                sSql = "Insert INTO BillMSteelSelection(BillTransId,IOW_ID,IOW_Trans_Id,AnalId,SteelId) " +
                                                 " Values(" + iBillTransId + "," + IMsrSel.BillResId + ",0,0 , " +
                                                 " " + CommFun.IsNullCheck(IMsrSel.SteelId, CommFun.datatypes.vartypenumeric) + ")";
                                                Command = new SqlCommand(sSql, conn, tran);
                                                Command.ExecuteNonQuery(); Command.Dispose();
                                                Command.Dispose();
                                            }
                                        }

                                        List<BIMeasurementBO> oSBIMsr = argBIMsrment.FindAll(
                                            delegate(BIMeasurementBO del)
                                            { return del.TypeId == objAbs.TypeId && del.TransRowId == objBTrns.RowId; });

                                        if (oSBIMsr.Count > 0)
                                        {
                                            foreach (BIMeasurementBO objIMsr in oSBIMsr)
                                            {
                                                Command = new SqlCommand("Insert_BillMeasurement", conn, tran);
                                                Command.CommandType = CommandType.StoredProcedure;
                                                Command.Parameters.Clear();
                                                Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                Command.Parameters.AddWithValue("@BillIOWTransId", 0);
                                                Command.Parameters.AddWithValue("@IOWId", objIMsr.IOWId);
                                                Command.Parameters.AddWithValue("@RowId", objIMsr.RowId);
                                                Command.Parameters.AddWithValue("@SlNo", objIMsr.SlNo);
                                                Command.Parameters.AddWithValue("@Description", objIMsr.Description);
                                                Command.Parameters.AddWithValue("@No1", objIMsr.No1);
                                                Command.Parameters.AddWithValue("@No2", objIMsr.No2);
                                                Command.Parameters.AddWithValue("@Length", objIMsr.Length);
                                                Command.Parameters.AddWithValue("@Breadth", 0);
                                                Command.Parameters.AddWithValue("@Depth", objIMsr.Diameter);
                                                Command.Parameters.AddWithValue("@Qty", objIMsr.Qty);
                                                Command.Parameters.AddWithValue("@Sign", "");
                                                Command.Parameters.AddWithValue("@MBookNO", 0);
                                                Command.Parameters.AddWithValue("@PageNo", 0);
                                                Command.Parameters.AddWithValue("@LevelNo", 0);
                                                Command.Parameters.AddWithValue("@ParentID", 0);
                                                Command.Parameters.AddWithValue("@SteelId", objIMsr.SteelId);
                                                Command.Parameters.AddWithValue("@Factor", objIMsr.Factor);
                                                Command.Parameters.AddWithValue("@FNo1", "");
                                                Command.Parameters.AddWithValue("@FNo2", "");
                                                Command.Parameters.AddWithValue("@FLength", "");
                                                Command.Parameters.AddWithValue("@FBreadth", "");
                                                Command.Parameters.AddWithValue("@FDepth", "");
                                                Command.Parameters.AddWithValue("@BillType", objIMsr.BillType);
                                                Command.Parameters.AddWithValue("@SubFormula", "");

                                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                            }
                                        }
                                    }
    
                                }
                                else if (objBTrns.Type.ToString() != "I")
                                {
                                    //Insert BillIOWTrans List<BillIOWTransUpdate> argBIOWTrans
                                    int rsrceId3 = 0;
                                    if (objBTrns.ResourceId == 0) { rsrceId3 = objBTrns.IOW_ID; }
                                    if (objBTrns.IOW_ID == 0) { rsrceId3 = objBTrns.ResourceId; }
                                    int iLbrResTransId = 0;

                                    if (objBTrns.Type.ToString() == "L")
                                    {
                                        List<BillLBRResourceTransBO> oLsel = argLbrRes.FindAll(
                                            delegate(BillLBRResourceTransBO del) { return del.TypeId == objAbs.TypeId && del.RowId == objBTrns.RowId; });
                                        if (oLsel.Count > 0)
                                        {
                                            foreach (BillLBRResourceTransBO objLRes in oLsel)
                                            {
                                                if (objLRes.Qty != 0)
                                                {

                                                    decimal dLQty = objLRes.Qty;
                                                    decimal dLAmt = (objLRes.Qty * objLRes.Rate);

                                                    if (objBTrns.Sign.ToString() == "-") { dLQty = dLQty * (-1); dLAmt = dLAmt * (-1); }

                                                    sSql = "INSERT INTO BillLbrResourceTrans (BillTransId,CompId,LbrResourceId,Qty,Rate,AnalysisType,Amount) " +
                                                           "VALUES(" + iBillTransId + "," + objLRes.ItemTransId + "," + objLRes.LbrResourceId + "," + dLQty + "," + objLRes.Rate + ",'" + objLRes.RateType + "'," + dLAmt + ") Select SCOPE_IDENTITY();";
                                                    Command = new SqlCommand(sSql, conn, tran);
                                                    iLbrResTransId = Convert.ToInt32(Command.ExecuteScalar());
                                                    Command.Dispose();

                                                    // Labour Bill IOW Trans

                                                    List<BillIOWTransUpdate> oSIOW = argBIOWTrans.FindAll(
                                                        delegate(BillIOWTransUpdate del)
                                                        { return del.TypeId == objAbs.TypeId && del.RowId == objBTrns.RowId && del.LbrResourceId == objLRes.LbrResourceId && del.RateType == objLRes.RateType; });
                                                    if (oSIOW.Count > 0)
                                                    {
                                                        foreach (BillIOWTransUpdate objIOW in oSIOW)
                                                        {
                                                            if (objIOW.Qty != 0)
                                                            {
                                                                decimal dIQty = objIOW.Qty;
                                                                decimal dIAmt = objIOW.Amount;
                                                                if (objBTrns.Sign.ToString() == "-") { dIQty = dIQty * (-1); dIAmt = dIAmt * (-1); }

                                                                Command = new SqlCommand("Insert_BillIOWTrans", conn, tran);
                                                                Command.CommandType = CommandType.StoredProcedure;
                                                                Command.Parameters.Clear();
                                                                Command.Parameters.AddWithValue("@BillIOWTransID", objIOW.BillIOWTransID);
                                                                Command.Parameters["@BillIOWTransID"].Direction = ParameterDirection.Output;
                                                                Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                                Command.Parameters.AddWithValue("@IOW_ID", objIOW.IOW_ID);
                                                                Command.Parameters.AddWithValue("@Qty", dIQty);
                                                                Command.Parameters.AddWithValue("@ClaimType", objIOW.ClaimType);
                                                                Command.Parameters.AddWithValue("@AnalysisHeadId", objIOW.AnalysisHeadID);
                                                                Command.Parameters.AddWithValue("@LbrResTransId", iLbrResTransId);
                                                                Command.Parameters.AddWithValue("@MType", objIOW.MType);
                                                                Command.Parameters.AddWithValue("@MUnitId", objIOW.MUnitId);
                                                                Command.Parameters.AddWithValue("@UFactor", objIOW.UFactor);
                                                                Command.Parameters.AddWithValue("@Rate", objIOW.Rate);
                                                                Command.Parameters.AddWithValue("@Amount", dIAmt);
                                                                Command.Parameters.AddWithValue("@SubIOWId", objIOW.SubIOWID);

                                                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                                                                iBillIOWTransId = (int)Command.Parameters["@BillIOWTransID"].Value;

                                                                //Insert IOWLabourTrans List<BillIOWLabour> argBIOWLbrTrans
                                                                //List<BillIOWLbrTrans> oIOWLbr = argBIOWLbrTrans.FindAll(delegate(BillIOWLbrTrans del) { return ((del.IOWRowId == objIOW.RowId) && (del.BEntryRowId == objBTrns.RowId)); });
                                                                //if (oIOWLbr.Count > 0)
                                                                //{
                                                                //    foreach (BillIOWLbrTrans objIOWLbr in oIOWLbr)
                                                                //    {
                                                                //        Command = new SqlCommand("Insert_BillIOWLabourTrans", conn, tran);
                                                                //        Command.CommandType = CommandType.StoredProcedure;
                                                                //        Command.Parameters.Clear();
                                                                //        Command.Parameters.AddWithValue("@BillIOWTransID", iBillIOWTransId);
                                                                //        Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                                //        Command.Parameters.AddWithValue("@LabourTypeId", objIOWLbr.LbrTypeId);
                                                                //        Command.Parameters.AddWithValue("@Qty", objIOWLbr.Qtty);
                                                                //        Command.Parameters.AddWithValue("@Rate", objIOWLbr.Rate);
                                                                //        Command.Parameters.AddWithValue("@Amount", objIOWLbr.Amount);
                                                                //        Command.Parameters.AddWithValue("@AppRate", objIOWLbr.AppRate);
                                                                //        Command.Parameters.AddWithValue("@MinRate", objIOWLbr.MinRate);
                                                                //        Command.Parameters.AddWithValue("@AnalysisId", 0);

                                                                //        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                                //    }
                                                                //}

                                                                //Insert BillIOWMeasurement List<BillIOWMeasurementBOUpdate> argBIOWMsrment                                                        

                                                                if (objIOW.MType == 0 || objIOW.MType == 2)
                                                                {
                                                                    List<BillIOWMeasurementBOUpdate> oSIOWMsrMnt = argBIOWMsrment.FindAll(
                                                                        delegate(BillIOWMeasurementBOUpdate del)
                                                                        { return (del.TypeId == objAbs.TypeId && del.RowId == objBTrns.RowId && del.LbrResourceId == objLRes.LbrResourceId && del.RateType == objLRes.RateType && del.AnalysisId == objIOW.AnalysisHeadID && del.IOWId == objIOW.IOW_ID); });
                                                                    if (oSIOWMsrMnt.Count > 0)
                                                                    {
                                                                        foreach (BillIOWMeasurementBOUpdate objIOWMsr in oSIOWMsrMnt)
                                                                        {
                                                                            Command = new SqlCommand("Insert_BillMeasurement", conn, tran);
                                                                            Command.CommandType = CommandType.StoredProcedure;
                                                                            Command.Parameters.Clear();
                                                                            Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                                            Command.Parameters.AddWithValue("@BillIOWTransId", iBillIOWTransId);
                                                                            Command.Parameters.AddWithValue("@IOWId", objIOWMsr.IOWId);
                                                                            Command.Parameters.AddWithValue("@RowId", objIOWMsr.BEntryRowId);
                                                                            Command.Parameters.AddWithValue("@SlNo", objIOWMsr.SlNo);
                                                                            Command.Parameters.AddWithValue("@Description", objIOWMsr.Description);
                                                                            Command.Parameters.AddWithValue("@No1", objIOWMsr.No1);
                                                                            Command.Parameters.AddWithValue("@No2", objIOWMsr.No2);
                                                                            Command.Parameters.AddWithValue("@Length", objIOWMsr.Length);
                                                                            Command.Parameters.AddWithValue("@Breadth", objIOWMsr.Breadth);
                                                                            Command.Parameters.AddWithValue("@Depth", objIOWMsr.Depth);
                                                                            Command.Parameters.AddWithValue("@Qty", objIOWMsr.Qty);
                                                                            Command.Parameters.AddWithValue("@Sign", objIOWMsr.Sign);
                                                                            Command.Parameters.AddWithValue("@MBookNO", objIOWMsr.MBookNO);
                                                                            Command.Parameters.AddWithValue("@PageNo", objIOWMsr.PageNo);
                                                                            Command.Parameters.AddWithValue("@LevelNo", objIOWMsr.LevelNo);
                                                                            Command.Parameters.AddWithValue("@ParentID", objIOWMsr.ParentID);
                                                                            Command.Parameters.AddWithValue("@SteelId", objIOWMsr.SteelId);
                                                                            Command.Parameters.AddWithValue("@Factor", objIOWMsr.Factor);

                                                                            if (CommFun.IsNullCheck(objIOWMsr.FNo1, CommFun.datatypes.vartypestring) != null)
                                                                                Command.Parameters.AddWithValue("@FNo1", CommFun.IsNullCheck(objIOWMsr.FNo1, CommFun.datatypes.vartypestring));
                                                                            else
                                                                                Command.Parameters.AddWithValue("@FNo1", "");

                                                                            if (CommFun.IsNullCheck(objIOWMsr.FNo2, CommFun.datatypes.vartypestring) != null)
                                                                                Command.Parameters.AddWithValue("@FNo2", CommFun.IsNullCheck(objIOWMsr.FNo2, CommFun.datatypes.vartypestring));
                                                                            else
                                                                                Command.Parameters.AddWithValue("@FNo2", "");

                                                                            if (Convert.ToDecimal(CommFun.IsNullCheck(objIOWMsr.FLength, CommFun.datatypes.vartypenumeric)) != 0)
                                                                                Command.Parameters.AddWithValue("@FLength", CommFun.IsNullCheck(objIOWMsr.FLength, CommFun.datatypes.vartypestring));
                                                                            else
                                                                                Command.Parameters.AddWithValue("@FLength", 0);

                                                                            if (Convert.ToDecimal(CommFun.IsNullCheck(objIOWMsr.FBreadth, CommFun.datatypes.vartypenumeric)) != 0)
                                                                                Command.Parameters.AddWithValue("@FBreadth", CommFun.IsNullCheck(objIOWMsr.FBreadth, CommFun.datatypes.vartypestring));
                                                                            else
                                                                                Command.Parameters.AddWithValue("@FBreadth", 0);

                                                                            if (Convert.ToDecimal(CommFun.IsNullCheck(objIOWMsr.FDepth, CommFun.datatypes.vartypenumeric)) != 0)
                                                                                Command.Parameters.AddWithValue("@FDepth", CommFun.IsNullCheck(objIOWMsr.FDepth, CommFun.datatypes.vartypestring));
                                                                            else
                                                                                Command.Parameters.AddWithValue("@FDepth", 0);

                                                                            Command.Parameters.AddWithValue("@BillType", CommFun.IsNullCheck(objBTrns.Type.ToString(), CommFun.datatypes.vartypestring));

                                                                            if (CommFun.IsNullCheck(objIOWMsr.SubFormula, CommFun.datatypes.vartypestring) != null)
                                                                                Command.Parameters.AddWithValue("@SubFormula", CommFun.IsNullCheck(objIOWMsr.SubFormula, CommFun.datatypes.vartypestring));
                                                                            else
                                                                                Command.Parameters.AddWithValue("@SubFormula", "");

                                                                            //Command.Parameters.AddWithValue("@FNo1", objIOWMsr.FNo1);
                                                                            //Command.Parameters.AddWithValue("@FNo2", objIOWMsr.FNo2);
                                                                            //Command.Parameters.AddWithValue("@FLength", objIOWMsr.FLength);
                                                                            //Command.Parameters.AddWithValue("@FBreadth", objIOWMsr.FBreadth);
                                                                            //Command.Parameters.AddWithValue("@FDepth", objIOWMsr.FDepth);
                                                                            //Command.Parameters.AddWithValue("@BillType", objIOWMsr.BillType);
                                                                            //Command.Parameters.AddWithValue("@SubFormula", objIOWMsr.SubFormula);

                                                                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                                        }
                                                                    }
                                                                }
                                                                else if (objIOW.MType == 1)
                                                                {
                                                                    List<BillMSteelSelection> ocheckUpdate = oSteelSel.FindAll(
                                                                        delegate(BillMSteelSelection del)
                                                                        {
                                                                            return (del.TypeId == objAbs.TypeId && del.TransRowId == objBTrns.RowId && del.AnalId == objIOW.AnalysisHeadID && del.IOWId == objIOW.IOW_ID);

                                                                            //if (objIOW.AnalysisHeadID != 0)
                                                                            //    return sel.BillResId == rsrceId3 && sel.IOWId == objIOW.IOW_ID && sel.AnalId == objIOW.AnalysisHeadID && sel.TransRowId == objBTrns.RowId;
                                                                            //else
                                                                            //    return sel.BillResId == rsrceId3 && sel.IOWId == objIOW.IOW_ID && sel.TransRowId == objBTrns.RowId;
                                                                        });

                                                                    if (ocheckUpdate.Count > 0)
                                                                    {
                                                                        foreach (BillMSteelSelection IMsrSel in ocheckUpdate)
                                                                        {
                                                                            sSql = "Insert INTO BillMSteelSelection(BillTransId,IOW_ID,IOW_Trans_Id,AnalId,SteelId) " +
                                                                             " Values(" + iBillTransId + "," + rsrceId3 + "," + objIOW.IOW_ID + "," + objIOW.AnalysisHeadID + " , " +
                                                                             " " + CommFun.IsNullCheck(IMsrSel.SteelId, CommFun.datatypes.vartypenumeric) + ")";
                                                                            Command = new SqlCommand(sSql, conn, tran);
                                                                            Command.ExecuteNonQuery(); Command.Dispose();
                                                                            Command.Dispose();
                                                                        }
                                                                    }

                                                                    List<BillIOWMeasurementBOUpdate> oSIOWMsrMnt = argBIOWMsrment.FindAll(
                                                                        delegate(BillIOWMeasurementBOUpdate del)
                                                                        {
                                                                            return (del.TypeId == objAbs.TypeId && del.RowId == objBTrns.RowId && del.LbrResourceId == objLRes.LbrResourceId && del.RateType == objLRes.RateType && del.AnalysisId == objIOW.AnalysisHeadID && del.IOWId == objIOW.IOW_ID);
                                                                        });
                                                                    if (oSIOWMsrMnt.Count > 0)
                                                                    {
                                                                        foreach (BillIOWMeasurementBOUpdate objIOWMsr in oSIOWMsrMnt)
                                                                        {
                                                                            Command = new SqlCommand("Insert_BillMeasurement", conn, tran);
                                                                            Command.CommandType = CommandType.StoredProcedure;
                                                                            Command.Parameters.Clear();
                                                                            Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                                            Command.Parameters.AddWithValue("@BillIOWTransId", iBillIOWTransId);
                                                                            Command.Parameters.AddWithValue("@IOWId", objIOWMsr.IOWId);
                                                                            Command.Parameters.AddWithValue("@RowId", objIOWMsr.BEntryRowId);
                                                                            Command.Parameters.AddWithValue("@SlNo", objIOWMsr.SlNo);
                                                                            Command.Parameters.AddWithValue("@Description", objIOWMsr.Description);
                                                                            Command.Parameters.AddWithValue("@No1", objIOWMsr.No1);
                                                                            Command.Parameters.AddWithValue("@No2", objIOWMsr.No2);
                                                                            Command.Parameters.AddWithValue("@Length", objIOWMsr.Length);
                                                                            Command.Parameters.AddWithValue("@Breadth", 0);
                                                                            Command.Parameters.AddWithValue("@Depth", objIOWMsr.Diameter);
                                                                            Command.Parameters.AddWithValue("@Qty", objIOWMsr.Qty);
                                                                            Command.Parameters.AddWithValue("@Sign", "");
                                                                            Command.Parameters.AddWithValue("@MBookNO", 0);
                                                                            Command.Parameters.AddWithValue("@PageNo", 0);
                                                                            Command.Parameters.AddWithValue("@LevelNo", 0);
                                                                            Command.Parameters.AddWithValue("@ParentID", 0);
                                                                            Command.Parameters.AddWithValue("@SteelId", objIOWMsr.SteelId);
                                                                            Command.Parameters.AddWithValue("@Factor", objIOWMsr.Factor);
                                                                            Command.Parameters.AddWithValue("@FNo1", "");
                                                                            Command.Parameters.AddWithValue("@FNo2", "");
                                                                            Command.Parameters.AddWithValue("@FLength", "");
                                                                            Command.Parameters.AddWithValue("@FBreadth", "");
                                                                            Command.Parameters.AddWithValue("@FDepth", "");
                                                                            Command.Parameters.AddWithValue("@BillType", objIOWMsr.BillType);
                                                                            Command.Parameters.AddWithValue("@SubFormula", "");

                                                                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (objBTrns.Type.ToString() == "A" || objBTrns.Type.ToString() == "S")
                                    {
                                        List<BillIOWTransUpdate> oSIOW = argBIOWTrans.FindAll(delegate(BillIOWTransUpdate del) { return del.RowId == objBTrns.RowId && del.TypeId == objAbs.TypeId; });
                                        if (oSIOW.Count > 0)
                                        {
                                            foreach (BillIOWTransUpdate objIOW in oSIOW)
                                            {
                                                if (objIOW.Qty != 0)
                                                {

                                                    decimal dIQty = objIOW.Qty;
                                                    decimal dIAmt = objIOW.Amount;
                                                    if (objBTrns.Sign.ToString() == "-") { dIQty = dIQty * (-1); dIAmt = dIAmt * (-1); }

                                                    Command = new SqlCommand("Insert_BillIOWTrans", conn, tran);
                                                    Command.CommandType = CommandType.StoredProcedure;
                                                    Command.Parameters.Clear();
                                                    Command.Parameters.AddWithValue("@BillIOWTransID", objIOW.BillIOWTransID);
                                                    Command.Parameters["@BillIOWTransID"].Direction = ParameterDirection.Output;
                                                    Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                    Command.Parameters.AddWithValue("@IOW_ID", objIOW.IOW_ID);
                                                    Command.Parameters.AddWithValue("@Qty", dIQty);
                                                    Command.Parameters.AddWithValue("@ClaimType", objIOW.ClaimType);
                                                    Command.Parameters.AddWithValue("@AnalysisHeadId", objIOW.AnalysisHeadID);
                                                    Command.Parameters.AddWithValue("@LbrResTransId", 0);
                                                    Command.Parameters.AddWithValue("@MType", objIOW.MType);
                                                    Command.Parameters.AddWithValue("@MUnitId", objIOW.MUnitId);
                                                    Command.Parameters.AddWithValue("@UFactor", objIOW.UFactor);
                                                    Command.Parameters.AddWithValue("@Rate", objIOW.Rate);
                                                    Command.Parameters.AddWithValue("@Amount", dIAmt);
                                                    Command.Parameters.AddWithValue("@SubIOWId", objIOW.SubIOWID);

                                                    Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                    
                                                    iBillIOWTransId = (int)Command.Parameters["@BillIOWTransID"].Value;

                                                    List<LabourTransBO> lChk = argItemLbr.FindAll(delegate(LabourTransBO del) { return del.AbsTypeId == objAbs.TypeId && del.RowId == objBTrns.RowId && del.AnalysisId == objIOW.AnalysisHeadID && del.IOWId == objIOW.IOW_ID; });
                                                    foreach (LabourTransBO objLbr in lChk)
                                                    {
                                                        sSql = "Insert into BillIOWLabourTrans(BillIOWTransID,BillTransId,LabourTypeId,Qty,Rate,Amount,MinRate,AppRate,AnalysisId,IOWId) " +
                                                               "Values(" + iBillIOWTransId + "," + iBillTransId + "," + objLbr.LabourTypeID + "," + objLbr.Qty + "," + objLbr.Rate + "," + objLbr.Amount + "," + objLbr.MinRate + ", " + objLbr.AppRate + "," + objIOW.AnalysisHeadID + "," + objIOW.IOW_ID + ")";
                                                        Command = new SqlCommand(sSql, conn, tran);
                                                        Command.ExecuteNonQuery(); Command.Dispose();
                                                        Command.Dispose();
                                                    }


                                                    //Insert IOWLabourTrans List<BillIOWLabour> argBIOWLbrTrans
                                                    //List<BillIOWLbrTrans> oIOWLbr = argBIOWLbrTrans.FindAll(delegate(BillIOWLbrTrans del) 
                                                    //{ 
                                                    //    return ((del.IOWRowId == objIOW.BillTransRowId) && (del.BEntryRowId == objBTrns.RowId)); 
                                                    //});
                                                    //List<BillIOWLbrTrans> oIOWLbr = argBIOWLbrTrans.FindAll(delegate(BillIOWLbrTrans del)
                                                    //{
                                                    //    //if (objIOW.AnalysisHeadID!=0)
                                                    //    //    return ((del.DPEItemTransId == rsrceId3) && (del.IOW_ID == objIOW.IOW_ID) && (del.AnalysisId == objIOW.AnalysisHeadID));
                                                    //    //else
                                                    //        return ((del.DPEItemTransId == rsrceId3) && (del.IOW_ID == objIOW.IOW_ID));
                                                    //});

                                                    //if (oIOWLbr.Count > 0)
                                                    //{
                                                    //    foreach (BillIOWLbrTrans objIOWLbr in oIOWLbr)
                                                    //    {
                                                    //        Command = new SqlCommand("Insert_BillIOWLabourTrans", conn, tran);
                                                    //        Command.CommandType = CommandType.StoredProcedure;
                                                    //        Command.Parameters.Clear();
                                                    //        Command.Parameters.AddWithValue("@BillIOWTransID", iBillIOWTransId);
                                                    //        Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                    //        Command.Parameters.AddWithValue("@LabourTypeId", objIOWLbr.LbrTypeId);
                                                    //        Command.Parameters.AddWithValue("@Qty", objIOWLbr.Qtty);
                                                    //        Command.Parameters.AddWithValue("@Rate", objIOWLbr.Rate);
                                                    //        Command.Parameters.AddWithValue("@Amount", objIOWLbr.Amount);
                                                    //        Command.Parameters.AddWithValue("@AppRate", objIOWLbr.AppRate);
                                                    //        Command.Parameters.AddWithValue("@MinRate", objIOWLbr.MinRate);
                                                    //        Command.Parameters.AddWithValue("@AnalysisId", 0);

                                                    //        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                    //    }
                                                    //}

                                                    //Insert BillIOWMeasurement List<BillIOWMeasurementBOUpdate> argBIOWMsrment
                                                    int rsrceId = 0;
                                                    if (objBTrns.ResourceId == 0) { rsrceId = objBTrns.IOW_ID; }
                                                    else if (objBTrns.IOW_ID == 0) { rsrceId = objBTrns.ResourceId; }

                                                    if (objIOW.MType == 0 || objIOW.MType == 2)
                                                    {
                                                        List<BillIOWMeasurementBOUpdate> oSIOWMsrMnt = argBIOWMsrment.FindAll(delegate(BillIOWMeasurementBOUpdate del)
                                                        { 
                                                            return del.TypeId == objAbs.TypeId && del.TransRowId == objBTrns.RowId && del.AnalysisId == objIOW.AnalysisHeadID && del.IOWId == objIOW.IOW_ID;
                                                        });
                                                        if (oSIOWMsrMnt.Count > 0)
                                                        {
                                                            foreach (BillIOWMeasurementBOUpdate objIOWMsr in oSIOWMsrMnt)
                                                            {
                                                                Command = new SqlCommand("Insert_BillMeasurement", conn, tran);
                                                                Command.CommandType = CommandType.StoredProcedure;
                                                                Command.Parameters.Clear();
                                                                Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                                Command.Parameters.AddWithValue("@BillIOWTransId", iBillIOWTransId);
                                                                Command.Parameters.AddWithValue("@IOWId", objIOWMsr.IOWId);
                                                                Command.Parameters.AddWithValue("@RowId", objIOWMsr.BEntryRowId);
                                                                Command.Parameters.AddWithValue("@SlNo", objIOWMsr.SlNo);
                                                                Command.Parameters.AddWithValue("@Description", objIOWMsr.Description);
                                                                Command.Parameters.AddWithValue("@No1", objIOWMsr.No1);
                                                                Command.Parameters.AddWithValue("@No2", objIOWMsr.No2);
                                                                Command.Parameters.AddWithValue("@Length", objIOWMsr.Length);
                                                                Command.Parameters.AddWithValue("@Breadth", objIOWMsr.Breadth);
                                                                Command.Parameters.AddWithValue("@Depth", objIOWMsr.Depth);
                                                                Command.Parameters.AddWithValue("@Qty", objIOWMsr.Qty);
                                                                Command.Parameters.AddWithValue("@Sign", objIOWMsr.Sign);
                                                                Command.Parameters.AddWithValue("@MBookNO", objIOWMsr.MBookNO);
                                                                Command.Parameters.AddWithValue("@PageNo", objIOWMsr.PageNo);
                                                                Command.Parameters.AddWithValue("@LevelNo", objIOWMsr.LevelNo);
                                                                Command.Parameters.AddWithValue("@ParentID", objIOWMsr.ParentID);
                                                                Command.Parameters.AddWithValue("@SteelId", objIOWMsr.SteelId);
                                                                Command.Parameters.AddWithValue("@Factor", objIOWMsr.Factor);

                                                                if (CommFun.IsNullCheck(objIOWMsr.FNo1, CommFun.datatypes.vartypestring) != null)
                                                                    Command.Parameters.AddWithValue("@FNo1", CommFun.IsNullCheck(objIOWMsr.FNo1, CommFun.datatypes.vartypestring));
                                                                else
                                                                    Command.Parameters.AddWithValue("@FNo1", "");

                                                                if (CommFun.IsNullCheck(objIOWMsr.FNo2, CommFun.datatypes.vartypestring) != null)
                                                                    Command.Parameters.AddWithValue("@FNo2", CommFun.IsNullCheck(objIOWMsr.FNo2, CommFun.datatypes.vartypestring));
                                                                else
                                                                    Command.Parameters.AddWithValue("@FNo2", "");

                                                                if (Convert.ToDecimal(CommFun.IsNullCheck(objIOWMsr.FLength, CommFun.datatypes.vartypenumeric)) != 0)
                                                                    Command.Parameters.AddWithValue("@FLength", CommFun.IsNullCheck(objIOWMsr.FLength, CommFun.datatypes.vartypestring));
                                                                else
                                                                    Command.Parameters.AddWithValue("@FLength", 0);

                                                                if (Convert.ToDecimal(CommFun.IsNullCheck(objIOWMsr.FBreadth, CommFun.datatypes.vartypenumeric)) != 0)
                                                                    Command.Parameters.AddWithValue("@FBreadth", CommFun.IsNullCheck(objIOWMsr.FBreadth, CommFun.datatypes.vartypestring));
                                                                else
                                                                    Command.Parameters.AddWithValue("@FBreadth", 0);

                                                                if (Convert.ToDecimal(CommFun.IsNullCheck(objIOWMsr.FDepth, CommFun.datatypes.vartypenumeric)) != 0)
                                                                    Command.Parameters.AddWithValue("@FDepth", CommFun.IsNullCheck(objIOWMsr.FDepth, CommFun.datatypes.vartypestring));
                                                                else
                                                                    Command.Parameters.AddWithValue("@FDepth", 0);

                                                                Command.Parameters.AddWithValue("@BillType", CommFun.IsNullCheck(objBTrns.Type.ToString(), CommFun.datatypes.vartypestring));

                                                                if (CommFun.IsNullCheck(objIOWMsr.SubFormula, CommFun.datatypes.vartypestring) != null)
                                                                    Command.Parameters.AddWithValue("@SubFormula", CommFun.IsNullCheck(objIOWMsr.SubFormula, CommFun.datatypes.vartypestring));
                                                                else
                                                                    Command.Parameters.AddWithValue("@SubFormula", "");

                                                                //Command.Parameters.AddWithValue("@FNo1", objIOWMsr.FNo1);
                                                                //Command.Parameters.AddWithValue("@FNo2", objIOWMsr.FNo2);
                                                                //Command.Parameters.AddWithValue("@FLength", objIOWMsr.FLength);
                                                                //Command.Parameters.AddWithValue("@FBreadth", objIOWMsr.FBreadth);
                                                                //Command.Parameters.AddWithValue("@FDepth", objIOWMsr.FDepth);
                                                                //Command.Parameters.AddWithValue("@BillType", objIOWMsr.BillType);
                                                                //Command.Parameters.AddWithValue("@SubFormula", objIOWMsr.SubFormula);

                                                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                            }
                                                        }
                                                    }
                                                    else if (objIOW.MType == 1)
                                                    {
                                                        List<BillMSteelSelection> ocheckUpdate = oSteelSel.FindAll(
                                                            delegate(BillMSteelSelection del)
                                                            {
                                                                return del.TypeId == objAbs.TypeId && del.TransRowId == objBTrns.RowId && del.AnalId == objIOW.AnalysisHeadID && del.IOWId == objIOW.IOW_ID;

                                                                //if (objIOW.AnalysisHeadID != 0)
                                                                //    return sel.BillResId == rsrceId && sel.IOWId == objIOW.IOW_ID && sel.AnalId == objIOW.AnalysisHeadID && sel.TransRowId == objBTrns.RowId;
                                                                //else
                                                                //    return sel.BillResId == rsrceId && sel.IOWId == objIOW.IOW_ID && sel.TransRowId == objBTrns.RowId;
                                                            });
                                                        if (ocheckUpdate.Count > 0)
                                                        {
                                                            foreach (BillMSteelSelection IMsrSel in ocheckUpdate)
                                                            {
                                                                sSql = "Insert INTO BillMSteelSelection(BillTransId,IOW_ID,IOW_Trans_Id,AnalId,SteelId) " +
                                                                 " Values(" + iBillTransId + "," + rsrceId + "," + objIOW.IOW_ID + "," + objIOW.AnalysisHeadID + " , " +
                                                                 " " + CommFun.IsNullCheck(IMsrSel.SteelId, CommFun.datatypes.vartypenumeric) + ")";
                                                                Command = new SqlCommand(sSql, conn, tran);
                                                                Command.ExecuteNonQuery(); Command.Dispose();
                                                                Command.Dispose();
                                                            }
                                                        }

                                                        List<BillIOWMeasurementBOUpdate> oSIOWMsrMnt = argBIOWMsrment.FindAll(
                                                            delegate(BillIOWMeasurementBOUpdate del)
                                                            {
                                                                return del.TypeId == objAbs.TypeId && del.TransRowId == objBTrns.RowId && del.AnalysisId == objIOW.AnalysisHeadID && del.IOWId == objIOW.IOW_ID;

                                                                //if (objBTrns.Type == "A")
                                                                //    return del.TypeId == objAbs.TypeId && del.RowId == objBTrns.RowId && del.RateType == objIOW.RateType && del.AnalysisId == objIOW.AnalysisHeadID && del.IOWId == objIOW.IOW_ID;
                                                                //else
                                                                //    return del.TypeId == objAbs.TypeId && del.RowId == objBTrns.RowId && del.AnalysisId == objIOW.AnalysisHeadID && del.IOWId == objIOW.IOW_ID;

                                                            });

                                                        if (oSIOWMsrMnt.Count > 0)
                                                        {
                                                            foreach (BillIOWMeasurementBOUpdate objIOWMsr in oSIOWMsrMnt)
                                                            {
                                                                Command = new SqlCommand("Insert_BillMeasurement", conn, tran);
                                                                Command.CommandType = CommandType.StoredProcedure;
                                                                Command.Parameters.Clear();
                                                                Command.Parameters.AddWithValue("@BillTransId", iBillTransId);
                                                                Command.Parameters.AddWithValue("@BillIOWTransId", iBillIOWTransId);
                                                                Command.Parameters.AddWithValue("@IOWId", objIOWMsr.IOWId);
                                                                Command.Parameters.AddWithValue("@RowId", objIOWMsr.BEntryRowId);
                                                                Command.Parameters.AddWithValue("@SlNo", objIOWMsr.SlNo);
                                                                Command.Parameters.AddWithValue("@Description", objIOWMsr.Description);
                                                                Command.Parameters.AddWithValue("@No1", objIOWMsr.No1);
                                                                Command.Parameters.AddWithValue("@No2", objIOWMsr.No2);
                                                                Command.Parameters.AddWithValue("@Length", objIOWMsr.Length);
                                                                Command.Parameters.AddWithValue("@Breadth", 0);
                                                                Command.Parameters.AddWithValue("@Depth", objIOWMsr.Diameter);
                                                                Command.Parameters.AddWithValue("@Qty", objIOWMsr.Qty);
                                                                Command.Parameters.AddWithValue("@Sign", "");
                                                                Command.Parameters.AddWithValue("@MBookNO", 0);
                                                                Command.Parameters.AddWithValue("@PageNo", 0);
                                                                Command.Parameters.AddWithValue("@LevelNo", 0);
                                                                Command.Parameters.AddWithValue("@ParentID", 0);
                                                                Command.Parameters.AddWithValue("@SteelId", objIOWMsr.SteelId);
                                                                Command.Parameters.AddWithValue("@Factor", objIOWMsr.Factor);
                                                                Command.Parameters.AddWithValue("@FNo1", "");
                                                                Command.Parameters.AddWithValue("@FNo2", "");
                                                                Command.Parameters.AddWithValue("@FLength", "");
                                                                Command.Parameters.AddWithValue("@FBreadth", "");
                                                                Command.Parameters.AddWithValue("@FDepth", "");
                                                                Command.Parameters.AddWithValue("@BillType", objIOWMsr.BillType);
                                                                Command.Parameters.AddWithValue("@SubFormula", "");

                                                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }                                
        
                                //int rsrceId2 = 0;
                                //if (objBTrns.ResourceId == 0) { rsrceId2 = objBTrns.IOW_ID; }
                                //else if (objBTrns.IOW_ID == 0) { rsrceId2 = objBTrns.ResourceId; }
                                //List<BillItemLbrStrnthTransBO> oSItmLbrTrns = argBLbrItem.FindAll(delegate(BillItemLbrStrnthTransBO del) { return del.BAbsTypeId == objBTrns.BAbsTypeId && del.ItemTransId == rsrceId2; });
                                //if (oSItmLbrTrns.Count > 0)
                                //{
                                //    foreach (BillItemLbrStrnthTransBO objItem in oSItmLbrTrns)
                                //    {
                                //        Command = new SqlCommand("Insert_BillItemLabourTrans", conn, tran);
                                //        Command.CommandType = CommandType.StoredProcedure;
                                //        Command.Parameters.Clear();
                                //        Command.Parameters.AddWithValue("@BillTransID", iBillTransId);
                                //        Command.Parameters.AddWithValue("@LabourTypeID", objItem.LbrTypeId);
                                //        Command.Parameters.AddWithValue("@Qty", objItem.Qtty);
                                //        Command.Parameters.AddWithValue("@Rate", objItem.Rate);
                                //        Command.Parameters.AddWithValue("@Amount", objItem.Amount);
                                //        Command.Parameters.AddWithValue("@AppRate", objItem.AppRate);
                                //        Command.Parameters.AddWithValue("@MinRate", objItem.MinRate);

                                //        Command.ExecuteNonQuery(); Command.Dispose();
                                //    }
                                //}

                            }

                        }
                    }
                    else if (objAbs.FormatTypeId == 5)
                    {
                        //Insert TDSDetails
                        //List<BillFormateTDSBO> argBFTDS
                        List<BillFormateTDSNewBO> oSL = argBFTDS.FindAll(delegate(BillFormateTDSNewBO del) { return ((del.BAbsTypeId == objAbs.TypeId) && (del.BAbsRowId == objAbs.RowId)); });
                        if (oSL.Count > 0)
                        {
                            int sLId = CommFun.GetSubLedgerId(objAbs.QualMId, 8, conn, tran);

                            foreach (BillFormateTDSNewBO objTDSF in oSL)
                            {
                                Command = new SqlCommand("Insert_TDSBillFormatTrans", conn, tran);
                                Command.CommandType = CommandType.StoredProcedure;
                                Command.Parameters.Clear();
                                Command.Parameters.AddWithValue("@BillRegisterId", iBillRegId);
                                Command.Parameters.AddWithValue("@Formula", objTDSF.Formula);
                                Command.Parameters.AddWithValue("@TypeId", objTDSF.BAbsTypeId);
                                Command.Parameters.AddWithValue("@GrossAmt", objTDSF.GrossAmt);
                                Command.Parameters.AddWithValue("@TDSPer", objTDSF.TDSPer);
                                Command.Parameters.AddWithValue("@TDSAmt", objTDSF.TDSAmt);
                                Command.Parameters.AddWithValue("@SurPer", objTDSF.SurPer);
                                Command.Parameters.AddWithValue("@SurAmt", objTDSF.SurAmt);
                                Command.Parameters.AddWithValue("@EDPer", objTDSF.EDPer);
                                Command.Parameters.AddWithValue("@EDAmt", objTDSF.EDAmt);

                                Command.Parameters.AddWithValue("@HEDPer", objTDSF.HEDPer);
                                Command.Parameters.AddWithValue("@HEDAmt", objTDSF.HEDAmt);
                                Command.Parameters.AddWithValue("@NetPer", objTDSF.NetPer);

                                Command.Parameters.AddWithValue("@TDSNetAmt", objTDSF.NetTDSAmt);
                                Command.Parameters.AddWithValue("@QualMId", objAbs.QualMId);
                                Command.Parameters.AddWithValue("@AccountId", objAbs.AccountId);
                                Command.Parameters.AddWithValue("@SubLedgerId", sLId);
                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();                              

                            }
                        }
                    }
                    else if (objAbs.FormatTypeId == 6 && objAbs.AddType == 1)
                    {
                        //Insert ServiceTaxDetails
                        //List<BillServiceTaxNewBO> argBFST
                        List<BillServiceTaxNewBO> oSL = argBFST.FindAll(delegate(BillServiceTaxNewBO del) { return ((del.BAbsTypeId == objAbs.TypeId) && (del.BAbsRowId == objAbs.RowId)); });
                        if (oSL.Count > 0)
                        {
                            int sLId = CommFun.GetSubLedgerId(objAbs.QualMId, 8, conn, tran);

                            foreach (BillServiceTaxNewBO objServiceT in oSL)
                            {
                                sSql = "Insert Into BillServiceTaxTrans(BillRegId,TypeId,Formula,GrossAmt,AccountId,TaxablePer,TaxableValue,ExpPer " +
                                ",ExpValue,SurCharge,SurValue,EDCess,EDValue,HEDCess,HEDValue,NetPer,NetAmt) " +
                                "Values (" + iBillRegId + "," + objServiceT.BAbsTypeId + ",'" + objServiceT.Formula + "'," + objServiceT.GrossAmt + "," + objServiceT.AccountId + ", " +
                                " " + objServiceT.TaxablePer + "," + objServiceT.TaxableAmt + "," + objServiceT.ExpPer + ", " +
                                " " + objServiceT.ExpPerAmt + "," + objServiceT.SurPer + "," + objServiceT.SurAmt + "," + objServiceT.EDPer + "," + objServiceT.EDAmt + " ," +
                                " " + objServiceT.HEDPer + "," + objServiceT.HEDAmt + "," + objServiceT.NetPer + "," + objServiceT.NetAmt + ")";
                                Command = new SqlCommand(sSql, conn, tran);
                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                            }
                        }
                    }
                    else if (objAbs.FormatTypeId == 3)
                    {
                        //Insert Material Recovery
                        List<BillMaterialRecovery> oSM = argBMatRec.FindAll(delegate(BillMaterialRecovery del) { return ((del.BAbsRowId == objAbs.RowId) && (del.BAbsTypeId == objAbs.TypeId)); });
                        if (oSM.Count > 0)
                        {
                            foreach (BillMaterialRecovery objMat in oSM)
                            {
                                Command = new SqlCommand("Insert_BillMaterialRecovery", conn, tran);
                                Command.CommandType = CommandType.StoredProcedure;
                                Command.Parameters.Clear();
                                Command.Parameters.AddWithValue("@BillRegId", iBillRegId);
                                Command.Parameters.AddWithValue("@Comp_ID", objMat.Comp_Id);
                                Command.Parameters.AddWithValue("@Unit", objMat.Unit);
                                Command.Parameters.AddWithValue("@Qty", objMat.Qty);
                                Command.Parameters.AddWithValue("@Rate", objMat.Rate);
                                Command.Parameters.AddWithValue("@Amount", objMat.Amount);
                                Command.Parameters.AddWithValue("@IssueId", objMat.IssueId);
                                Command.Parameters.AddWithValue("@TypeId", objMat.TypeId);

                                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                                if (BsfGlobal.g_bMMSDB == true)
                                {
                                    sSql = "Update [" + BsfGlobal.g_sMMSDBName + "].dbo.IssueTrans Set RecQty=(RecQty-" + objMat.PrevQty + ")+Qty " +
                                        "from BillMaterialRecovery WHERE " +
                                        "BillRegId = " + iBillRegId + " And IssueId <> 0 " +
                                        "and [" + BsfGlobal.g_sMMSDBName + "].dbo.IssueTrans.IssueTransId=BillMaterialRecovery.IssueId ";

                                    Command = new SqlCommand(sSql, conn, tran);
                                    Command.ExecuteNonQuery(); Command.Dispose();
                                    Command.Dispose();
                                }
                            }
                        }
                    }
                    else if (objAbs.FormatTypeId == 9)
                    {
                        if ((objAbs.BFormatType == "B" || objAbs.BFormatType == "A") && argInternal == true && (objAbs.AddType == 1 || objAbs.AddType == 0))
                        {
                            if (objAbs.BFormatType == "B" && argInternal == true && objAbs.AddType == 0)
                            {
                                if (dtLbrAdj.Rows.Count > 0)
                                {
                                    sSql = "Delete LabourAdvAdjustment Where BillRegisterId=" + iBillRegId + " ";
                                    Command = new SqlCommand(sSql, conn, tran);
                                    Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                                    foreach (DataRow dr in dtLbrAdj.Rows)
                                    {
                                        decimal AdvAmount = Convert.ToDecimal(CommFun.IsNullCheck(dr["CAmount"], CommFun.datatypes.vartypenumeric));
                                        if (AdvAmount > 0)
                                        {
                                            sSql = "Insert Into LabourAdvAdjustment (BillRegisterId,LabourId,Amount,RegId,TypeId)  " +
                                                "Values (" + iBillRegId + "," + dr["LabourId"] + ",'" + AdvAmount + "'," + dr["RegId"] + ","+objAbs.TypeId+") ";
                                            Command = new SqlCommand(sSql, conn, tran);
                                            Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                        }
                                    }
                                }
                            }

                            if (objAbs.BFormatType == "A" && argInternal == true && objAbs.AddType == 1)
                            {
                                int iSign = 0;
                                List<BillLabourAdvance> chkAdv = argBLbrAdv.FindAll(
                                    delegate(BillLabourAdvance del)
                                    {
                                        return ((del.bAbsRowId == objAbs.RowId) && (del.bAbsTypeId == objAbs.TypeId));
                                    });
                                if (chkAdv.Count > 0)
                                {
                                    foreach (BillLabourAdvance objLAdv in chkAdv)
                                    {
                                        if (objLAdv.Sign == "+")
                                            iSign = 1;
                                        else
                                            iSign = 0;

                                        sSql = "Insert Into BillLabourAdvance(BillRegisterId,BFormatType,LabourId,TypeId,Sign,Amount)  values " +
                                            "(" + iBillRegId + ",'" + objLAdv.BFormatType + "'," + objLAdv.LabourId + "," + objLAdv.bAbsTypeId + "," + iSign + "," + objLAdv.Amount + ")";
                                        Command = new SqlCommand(sSql, conn, tran);
                                        Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                                    }
                                }
                            }
                        }
                    }
                    else if (objAbs.FormatTypeId == 4)
                    {
                        //Insert LabourTypeTrans

                        if (argInternal == false && objAbs.BFormatType.ToString() == "B")
                        {
                            List<BillLabourTypeTransBO> oSLt = argBLbrType.FindAll(delegate(BillLabourTypeTransBO del) { return (del.TypeId == objAbs.TypeId); });
                            if (oSLt.Count > 0)
                            {
                                foreach (BillLabourTypeTransBO objLType in oSLt)
                                {
                                    if (objLType.Qty != 0)
                                    {
                                        int iFromLS = 0;
                                        if (objLType.FromLS == true) { iFromLS = 1; }

                                        sSql = "Insert into BillLabourTypeTrans(BillRegisterId,LabourTypeId,TypeId,qty,Rate,Amount,FromLS) " +
                                               "Values(" + iBillRegId + "," + objLType.LabourTypeID + "," + objLType.TypeId + "," + objLType.Qty + "," + objLType.Rate + "," + objLType.Amount + "," + iFromLS + ") SELECT SCOPE_IDENTITY();";
                                        Command = new SqlCommand(sSql, conn, tran);
                                        int iTransId = int.Parse(Command.ExecuteScalar().ToString());
                                        Command.Dispose();


                                        if (argLSWBS.Count > 0)
                                        {
                                            List<BillLSWBSTrans> oSLt2 = argLSWBS.FindAll(delegate(BillLSWBSTrans del) { return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objLType.RowId)); });

                                            if (oSLt2.Count > 0)
                                            {
                                                foreach (BillLSWBSTrans objLSWBS in oSLt2)
                                                {
                                                    if (objLSWBS.Qty != 0)
                                                    {
                                                        sSql = "Insert Into BillLabourTypeWBSTrans (BillLabourTypeTransId,AnalysisId,Qty) " +
                                                               "Values (" + iTransId + "," + objLSWBS.AnalysisId + "," + objLSWBS.Qty + ") SELECT SCOPE_IDENTITY();";
                                                        Command = new SqlCommand(sSql, conn, tran);
                                                        int iWBSTransId = int.Parse(Command.ExecuteScalar().ToString());
                                                        Command.Dispose();

                                                        List<BillLSVTrans> oLSV = argBillLSV.FindAll(delegate(BillLSVTrans del) { return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objLType.RowId) && (del.AnalysisId == objLSWBS.AnalysisId)); });

                                                        if (oLSV.Count > 0)
                                                        {
                                                            foreach (BillLSVTrans objLSV in oLSV)
                                                            {
                                                                sSql = "Insert into BillLabourTypeWBSLSTrans(BillLSWBSTransId,LSId,Qty) " +
                                                                       "Values(" + iWBSTransId + "," + objLSV.LSId + ", " + objLSV.BillQty + ")";
                                                                Command = new SqlCommand(sSql, conn, tran);
                                                                Command.ExecuteNonQuery();
                                                                Command.Dispose();
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (argBillLSV.Count > 0)
                                            {
                                                List<BillLSVTrans> oLSV = argBillLSV.FindAll(delegate(BillLSVTrans del) { return ((del.TypeId == objAbs.TypeId) && (del.TransRowId == objLType.RowId)); });

                                                if (oLSV.Count > 0)
                                                {
                                                    foreach (BillLSVTrans objLSV in oLSV)
                                                    {
                                                        sSql = "Insert into BillLabourTypeWBSLSTrans(BillLabourTypeTransId,LSId,Qty) " +
                                                               "Values(" + iTransId + "," + objLSV.LSId + ", " + objLSV.BillQty + ")";
                                                        Command = new SqlCommand(sSql, conn, tran);
                                                        Command.ExecuteNonQuery();
                                                        Command.Dispose();
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }
                            }
                        }
                        else if (argInternal == true && objAbs.BFormatType.ToString() == "B")
                        {
                            List<BillLabourTypeTransBO> oSLt = argBLbrType.FindAll(delegate(BillLabourTypeTransBO del) { return ((del.TypeId == objAbs.TypeId)); });
                            if (oSLt.Count > 0)
                            {
                                foreach (BillLabourTypeTransBO objLType in oSLt)
                                {
                                    sSql = "Insert BillMLabourTrans(BillRegisterId,LabourId,TypeId,Qty,Rate,Amount) " +
                                           "Values(" + iBillRegId + "," + objLType.LabourTypeID + "," + objLType.TypeId + ","+objLType.Qty+","+objLType.Rate+","+objLType.Amount+")";
                                    Command = new SqlCommand(sSql, conn, tran);
                                    Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();
                                   
                                }
                            }
                        }

                    }
                }

                #endregion

                //if (argBReg.BillType == "I")
                //{
                //    sSql = "Insert into BillItemLabourTrans(BillTransId,LabourTypeId,Qty,Rate,Amount) " +
                //           "Select BillTransId,LabourTypeId,Sum(Qty) Qty,Case When Sum(isnull(Qty,0)) <>0 then  Sum(Amount)/Sum(Qty) else 0 end Rate,Sum(Amount) Amount from BillWBSLabourTrans " +
                //           "Where BillTransId in (Select BillTransId from BillTrans Where BillRegisterId = " + iBillRegId + ") Group by BillTransId,LabourTypeId";
                //    Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose();
                //}
                //else
                //{
                //    sSql = "Insert into BillItemLabourTrans(BillTransId,LabourTypeId,Qty,Rate,Amount) " +
                //           "Select BillTransId,LabourTypeId,Sum(Qty) Qty,Case When Sum(isnull(Qty,0)) <>0 then  Sum(Amount)/Sum(Qty) else 0 end Rate,Sum(Amount) Amount from BillIOWLabourTrans " +
                //           "Where BillTransId in (Select BillTransId from BillTrans Where BillRegisterId = " + iBillRegId + ") Group by BillTransId,LabourTypeId";
                //    Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose();
                //}


                //sSql = "Insert into BillLabourTrans(BillREgisterId,LabourTypeId,Qty,Rate,Amount) " +
                //       "Select " + iBillRegId + ",LabourTypeId,Sum(Qty) Qty,Case When Sum(isnull(Qty,0)) <>0 then  Sum(Amount)/Sum(Qty) else 0 end Rate,Sum(Amount) Amount from BillItemLabourTrans " +
                //       "Where BillTransId in (Select BillTransId from BillTrans Where BillRegisterId = " + iBillRegId + ") Group by LabourTypeId";
                //Command = new SqlCommand(sSql, conn, tran); Command.ExecuteNonQuery(); Command.Dispose();

                CommFun.ActualCompUpdate(iBillRegId, argCCId, "B", true, argrevId, argBReg.ContractorID,argDBName, conn, tran,argBReg.CostOption);

                //BillQty Update in WOTrans Table
                if (argBReg.WORegisterID != 0)
                    CommFun.RefreshWOBilledQty(argBReg.WORegisterID, conn, tran);



                sSql = "SELECT A.TypeId,A.Amount,B.Type from BillFormatTrans A  " +
                      "INNER JOIN BillFormatMaster B ON A.TypeId=B.TypeId " +
                      "WHERE A.BillRegisterId=" + iBillRegId + " and A.AccountId <>0 and A.Amount <>0 AND B.Header=0";
                Command = new SqlCommand(sSql, conn, tran);
                SqlDataReader dsr = Command.ExecuteReader();
                DataTable dt = new DataTable();
                dt.Load(dsr);
                Command.Dispose();
                dsr.Close();

                DataTable dtt;
                decimal dFAmt = 0;
                decimal dIOWAmt = 0;
                bool bAmtOK = true;
                int iTypeId=0;

                for (int j = 0; j < dt.Rows.Count; j++)
                {
                    dFAmt = Math.Round(Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[j]["Amount"], CommFun.datatypes.vartypenumeric)), 0);
                    iTypeId=Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["TypeId"], CommFun.datatypes.vartypenumeric));
                    dIOWAmt = 0;

                    // Refer T-Tracker Point No 1786, Function to post subledger details-Workgroup wise posting to FA 
                    if (dt.Rows[j]["Type"].ToString() == "I")
                    {
                        if (argBReg.BillType == "I")
                        {
                            sSql = "Select Sum(A.Amount) Amt From BillTrans A " +
                                    "Where A.BillRegisterId=" + iBillRegId + " and A.TypeId = " + iTypeId;
                        }
                        else
                        {
                            sSql = "Select Sum(A.Qty*B.Rate) Amt From BillIOWTrans A " +
                                    "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                                    "Where B.BillRegisterId=" + iBillRegId + " and B.TypeId = " + iTypeId;
                        }

                        Command = new SqlCommand(sSql, conn, tran);
                        dsr = Command.ExecuteReader();
                        dtt = new DataTable();
                        dtt.Load(dsr);
                        Command.Dispose();
                        dsr.Close();

                        if (dtt.Rows.Count > 0) { dIOWAmt = Math.Round(Convert.ToDecimal(CommFun.IsNullCheck(dtt.Rows[0]["Amt"], CommFun.datatypes.vartypenumeric)), 0); }
                        dtt.Dispose();

                        if (dIOWAmt != 0)
                        {
                            if (dFAmt != dIOWAmt)
                            {
                                bAmtOK = false;
                                break;
                            }
                        }
                    }
                }

                if (bAmtOK == false)
                {
                    tran.Rollback();
                    MessageBox.Show("Amount Difference, Do Not Update");
                    bUpdate = false;
                }
                else
                {
                    tran.Commit();
                    bUpdate = true;
                }
                
            }
            catch (SqlException ex)
            {
               tran.Rollback();
               BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
            return bUpdate;
        }


        private void UpdateLatestRate(SqlConnection conn, SqlTransaction tran,int argIOWId,int argCompId,int argCCId,decimal argRate,string argRateType)
        {
            #region Variables

            int iIOW_Id = 0;
            int iComp_Id = 0;
            decimal dLatestRate = 0;
            string sRateType = "";
            int iCCId = 0;
            SqlCommand cmd;
            string sSql = "";
            int iRtnId = 0;

            #endregion

            try
            {
                iIOW_Id = argIOWId;
                iComp_Id = argCompId;
                dLatestRate = argRate;
                sRateType = argRateType;
                iCCId = argCCId;

                if (iComp_Id != 0)
                {
                    sSql = "Update BillLatestRate Set LatestRate = " + dLatestRate + " Where Comp_ID="+argCompId+" and CostCentreId="+iCCId+" and RateType='"+sRateType+"' ";
                    cmd = new SqlCommand(sSql, conn, tran); iRtnId =Convert.ToInt32(CommFun.IsNullCheck(cmd.ExecuteNonQuery(),CommFun.datatypes.vartypenumeric)); cmd.Dispose();
                    if (iRtnId == 0)
                    {
                        sSql = "Insert into BillLatestRate(IOW_ID,Comp_Id,CostCentreId,LatestRate,RateType)  " +
                            "Values(" + iIOW_Id + "," + iComp_Id + ","+iCCId+","+dLatestRate+",'" + sRateType + "')";
                        cmd = new SqlCommand(sSql, conn,tran); cmd.ExecuteNonQuery(); cmd.Dispose();
                    }
                }
                else if (iIOW_Id != 0)
                {
                    sSql = "Update BillLatestRate Set LatestRate = " + dLatestRate + " Where IOW_ID=" + iIOW_Id + " and CostCentreId=" + iCCId + " and RateType='" + sRateType + "' ";
                    cmd = new SqlCommand(sSql, conn, tran); iRtnId = Convert.ToInt32(CommFun.IsNullCheck(cmd.ExecuteNonQuery(), CommFun.datatypes.vartypenumeric)); cmd.Dispose();
                    if (iRtnId == 0)
                    {
                        sSql = "Insert into BillLatestRate(IOW_ID,Comp_Id,CostCentreId,LatestRate,RateType)  " +
                            "Values(" + iIOW_Id + "," + iComp_Id + "," + iCCId + "," + dLatestRate + ",'" + sRateType + "')";
                        cmd = new SqlCommand(sSql, conn, tran); cmd.ExecuteNonQuery(); cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);                
            }
            finally
            {                
            }

        }       
      

        //public void UpdateMaxVNo(int argTypeId,int argCCId,int argYrId,int argCompId)
        //{
        //    SqlConnection conn;
        //    conn = new SqlConnection();
        //    conn = BsfGlobal.OpenWPMDB();
        //    SqlTransaction tran = conn.BeginTransaction();
        //    SqlCommand Command;
        //    string sSql = "";

        //    try
        //    {
        //        sSql = "Update Type set MaxNo = MaxNo+1 Where TypeId = " + argTypeId + " and CostCentreId = " + argCCId + "";

        //        Command = new SqlCommand(sSql, conn, tran);
        //        Command.ExecuteNonQuery(); Command.Dispose();

        //        sSql = "Update Type set MaxNo = MaxNo+1 Where TypeId = " + argTypeId + " and CostCentreId = 0";

        //        Command = new SqlCommand(sSql, conn, tran);
        //        Command.ExecuteNonQuery(); Command.Dispose();


        //        sSql = "Update YearTypeTrans set MaxNo = MaxNo+1 Where TypeId = " + argTypeId + " and CostCentreId =0 and CompanyId=0 and YearId = " + argYrId + "";

        //        Command = new SqlCommand(sSql, conn, tran);
        //        Command.ExecuteNonQuery(); Command.Dispose();

        //        if (argCompId != 0)
        //        {
        //            sSql = "Update YearTypeTrans set MaxNo = MaxNo+1 Where TypeId = " + argTypeId + " and CompanyId = " + argCompId + " and YearId = " + argYrId + "";

        //            Command = new SqlCommand(sSql, conn, tran);
        //            Command.ExecuteNonQuery(); Command.Dispose();

        //        }
        //        if (argCCId != 0)
        //        {
        //            sSql = "Update YearTypeTrans set MaxNo = MaxNo+1 Where TypeId = " + argTypeId + " and CostCentreId = " + argCCId + " and YearId = " + argYrId + "";

        //            Command = new SqlCommand(sSql, conn, tran);
        //            Command.ExecuteNonQuery(); Command.Dispose();
        //        }
        //        tran.Commit();

        //    }            
        //    catch (SqlException ex)
        //    {
        //        tran.Rollback();
        //        BsfGlobal.CustomException(ex.Message, ex.StackTrace);                
        //    }
        //    finally
        //    {
        //        conn.Close();
        //    }           
        //}

        public void UpdateCurrentBill(int argBRegId, int argCCId, int argContId)
        {
            SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();
            SqlCommand Command;
            string sSql = "";

            try
            {
                sSql = "Update BillRegister Set CurrentBill='N' Where " +
                    "BillRegisterId < " + argBRegId + " and CostCentreId = " + argCCId + " " +
                    "and ContractorId = " + argContId + "";

                Command = new SqlCommand(sSql, conn, tran);
                Command.ExecuteNonQuery(); Command.Dispose(); Command.Dispose();

                tran.Commit();
            }
            catch (SqlException ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }  
        }


        public DataTable getIOWResource(int argIOWId, int argRevID, decimal argQty, string argmode, int argBillTransId, string argDBName,int argWORegId,int argTypeId)
        {

            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                if (argBillTransId == 0)
                {
                    sSql = "Select A.Resource_ID,C.TypeID,C.Resource_Code,C.Resource_Name,D.Unit_Name,	" +
                        "A.Qualified_Rate,Case When B.Qtty >0 then (A.Qtty/B.Qtty) Else 0 End CoffQty ,(A.Qualified_Rate*Case When B.Qtty >0 then (A.Qtty/B.Qtty) Else 0 End) as Amount, " + argQty + " as IOWQty,0 as BillTransId,Cast(0 as Decimal(18,3)) NetAmount,0 as BillWBSTransId  " +
                        "From [" + argDBName + "].dbo.Project_Details A	 " +
                        "Inner Join [" + argDBName + "].dbo.Iow B on A.IOW_Trans_ID=B.IOW_Trans_ID and B.Revision_ID=" + argRevID + "	 " +
                        "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource C on A.Resource_ID=C.Resource_ID	 " +
                        "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM D on C.Unit_Id=D.Unit_ID	 " +
                        "Where B.ProjIOWID=" + argIOWId + " and A.Incl_Est_Flag=1 and A.Revision_ID=" + argRevID;
                    
                    if (argTypeId == 1)
                    {
                        if (argWORegId != 0)
                        {
                            sSql = sSql + " and A.Resource_Id in (Select ResourceId from WOResourceTrans Where ResSel=1 and WOTransId in (Select WOTransId from WOTrans Where WORegisterId=" + argWORegId + " and IOWId=" + argIOWId + "))";
                        }
                    }

                }
                else 
                {
                    sSql = "Select  A.BillTransId,A.ResourceId Resource_ID,A.TypeId,D.Resource_Code,D.Resource_Name,E.Unit_Name,A.CoffQty,A.IOWQty,A.QRate Qualified_Rate,A.Amount,A.NetAmount,0 as BillWBSTransId,A.ResSel from BillResourceTrans A  " +
                        "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource D on A.ResourceId=D.Resource_ID  " +
                        "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM E on D.Unit_Id=E.Unit_ID " +
                        "Where A.BillTransId=" + argBillTransId;
                }

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }


        public DataTable PopulateWBSResQual(int argBillTransId, int argResId, int argIOWId, int argVendorId, string argQType, DateTime argDate)
        {
            SqlDataAdapter da;
            DataTable dt = new DataTable();
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                if (argBillTransId == 0)
                {

                    if (argQType == "M")
                    {
                        sSql = "Select Distinct 0 WoTransID,F.ResourceId ResourceID,A.QualifierId,G.Qualifiername Description, " +
                               "A.AddLessFlag,A.Expression,CAST(0 As Decimal(18,3)) Amount,A.ExpPer, " +
                               "A.SurCharge SurPer,CAST(0 As Decimal(18,3)) SurValue,A.EDCess EDPer,CAST(0 As Decimal(18,3)) EDValue,A.HEDCess HEDPer,CAST(0 As Decimal(18,3)) HEDValue, A.TaxablePer,CAST(0 As Decimal(18,3)) TaxableValue,A.Net NetPer, A.QualifierId HQualId,G.QualTypeId from [" + BsfGlobal.g_sRateAnalDBName + "].dbo.CommodityQualTrans A " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.CommodityMaster B ON A.CommodityId=B.CommodityId  " +
                               "Inner Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.StateMaster C ON B.StateId=C.StateID  " +
                               "Inner Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CityMaster D ON C.StateID=D.StateId  " +
                               "Inner Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster E On D.CityId=E.CityId And E.VendorId=" + argVendorId + " " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.CommodityResTrans F On A.CommodityId=F.CommodityId And B.StateId=F.StateId " +
                               "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Qualifier_Temp G On A.QualifierId=G.QualifierId And G.QualType='M' " +
                               "Where F.ResourceId=" + argResId;
                    }
                    else
                    {
                        int iQualId = 0;
                        string sQualName = "";
                        string sStr = "";
                        int iPeriodId = 0;

                        sSql = "Select QualifierId,QualifierName from [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Qualifier_Temp Where QualTypeId=2 and QualType='W'";
                        SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        SqlDataReader dr = cmd.ExecuteReader();
                        DataTable dtT = new DataTable();
                        dtT.Load(dr);
                        dr.Close();
                        cmd.Dispose();

                        if (dtT.Rows.Count > 0)
                        {
                            iQualId = Convert.ToInt32(dtT.Rows[0]["QualifierId"]);
                            sQualName = dtT.Rows[0]["QualifierName"].ToString();
                        }
                        dtT.Dispose();

                        if (iQualId != 0)
                        {

                            sSql = "Select PeriodId from [" + BsfGlobal.g_sRateAnalDBName + "].dbo.QualPeriod Where QualType='S' and " +
                                    "((TDate is not null and Fdate <= '" + argDate.AddDays(1).ToString("dd MMM yyyy") + "' and TDate >= '" + argDate.AddDays(1).ToString("dd MMM yyyy") + "') or " +
                                    "(TDate is null  and FDate <= '" + argDate.AddDays(1).ToString("dd MMM yyyy") + "'))";
                            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                            dr = cmd.ExecuteReader();
                            dtT = new DataTable();
                            dtT.Load(dr);
                            dr.Close();
                            cmd.Dispose();

                            iPeriodId = 0;

                            if (dtT.Rows.Count > 0) { iPeriodId = Convert.ToInt32(dtT.Rows[0]["PeriodId"]); }
                            dtT.Dispose();

                            //Select Taxable,ExpPer,SurCharge,EDCess,HEDCess,Net from STSetting
                            sStr = "Select 0 WOTransID," + argResId + " ResourceID," + iQualId + " QualifierId,'" + sQualName + "' Description, " +
                                    "'+' AddLessFlag, 'R0' Expression,CAST(0 As Decimal(18,3)) Amount,ExpPer, " +
                                    "SurCharge SurPer,CAST(0 As Decimal(18,3)) SurValue,EDCess EDPer,CAST(0 As Decimal(18,3)) EDValue,HEDCess HEDPer,CAST(0 As Decimal(18,3)) HEDValue, Taxable TaxablePer,CAST(0 As Decimal(18,3)) TaxableValue,Net NetPer, " + iQualId + " HQualId,2 QualTypeId from [" + BsfGlobal.g_sRateAnalDBName + "].dbo.STSetting " +
                                    "Where WorkType='I' and PeriodId= " + iPeriodId;
                        }

                        int iServiceTypeId = 0;

                        sSql = "Select ServiceTypeId from [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster Where VendorId = " + argVendorId;

                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        dtT = new DataTable();
                        dtT.Load(dr);
                        dr.Close();
                        cmd.Dispose();

                        if (dtT.Rows.Count > 0)
                        {
                            iServiceTypeId = Convert.ToInt32(dtT.Rows[0]["ServiceTypeId"]);
                        }
                        dtT.Dispose();


                        sSql = "Select QualifierId,QualifierName from [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Qualifier_Temp Where QualTypeId=1 and QualType='W'";
                        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                        dr = cmd.ExecuteReader();
                        dtT = new DataTable();
                        dtT.Load(dr);
                        dr.Close();
                        cmd.Dispose();

                        if (dtT.Rows.Count > 0)
                        {
                            iQualId = Convert.ToInt32(dtT.Rows[0]["QualifierId"]);
                            sQualName = dtT.Rows[0]["QualifierName"].ToString();
                        }
                        dtT.Dispose();

                        if (iQualId != 0)
                        {

                            sSql = "Select PeriodId from [" + BsfGlobal.g_sRateAnalDBName + "].dbo.QualPeriod Where QualType='T' and " +
                                    "((TDate is not null and Fdate <= '" + argDate.AddDays(1).ToString("dd MMM yyyy") + "' and TDate >= '" + argDate.AddDays(1).ToString("dd MMM yyyy") + "') or " +
                                    "(TDate is null  and FDate <= '" + argDate.AddDays(1).ToString("dd MMM yyyy") + "'))";
                            cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                            dr = cmd.ExecuteReader();
                            dtT = new DataTable();
                            dtT.Load(dr);
                            dr.Close();
                            cmd.Dispose();

                            iPeriodId = 0;

                            if (dtT.Rows.Count > 0) { iPeriodId = Convert.ToInt32(dtT.Rows[0]["PeriodId"]); }
                            dtT.Dispose();


                            if (sStr != "") { sStr = sStr + " Union All "; }

                            sStr = sStr + " Select 0 WOTransID," + argResId + " ResourceID," + iQualId + " QualifierId,'" + sQualName + "' Description, " +
                                   "'-' AddLessFlag, 'R0' Expression,CAST(0 As Decimal(18,3)) Amount,ExpPer, " +
                                   "SurCharge SurPer,CAST(0 As Decimal(18,3)) SurValue,EDCess EDPer,CAST(0 As Decimal(18,3)) EDValue,HEDCess HEDPer,CAST(0 As Decimal(18,3)) HEDValue, CAST(100 As Decimal(18,3)) TaxablePer,CAST(0 As Decimal(18,3)) TaxableValue,Net NetPer, " + iQualId + " HQualId,2 QualTypeId from [" + BsfGlobal.g_sRateAnalDBName + "].dbo.TDSSetting " +
                                   "Where ServiceTypeId=" + iServiceTypeId + " and PeriodId= " + iPeriodId;
                        }

                        sSql = sStr;
                    }
                }
                else
                {
                    sSql = "Select A.BillTransId WOTransID,A.ResourceId ResourceID,A.QualifierId,G.Qualifiername Description, " +
                          "A.Add_Less_Flag AddLessFlag,A.Expression,A.Amount,A.ExpPer, " +
                          "A.SurCharge SurPer,A.SurValue,A.EDCess EDPer,A.EDValue,A.HEDCess HEDPer,A.HEDValue, A.TaxablePer,A.TaxableValue,A.NetPer, A.QualifierId HQualId,G.QualTypeId from BillResRate_Q A " +
                          "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Qualifier_Temp G On A.QualifierId=G.QualifierId And G.QualType='" + argQType + "'" +
                          "Where A.BillTransId= " + argBillTransId + " and  A.ResourceId=" + argResId;
                }

                if (sSql != "")
                {
                    da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    da.Fill(dt);
                    da.Dispose();
                }

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

       


        public DataSet getBillRegDetailsE(int argBRegId)
        {
            SqlDataAdapter da;
            DataSet ds = new DataSet();
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                sSql = "Select A.BillRegisterID,A.EDate,A.FDate,A.TDate,A.VNo,A.CCBVNo,A.BillNo,A.BillType,A.ContractorID,B.VendorName,A.Narration,A.CostCentreId,A.LRoundAmt,A.BillUpdateType, " +
                    "A.LabourAmount,A.IOWAmount,A.LNetAmt,A.WORegisterId,A.CompanyBVNo,A.BillDetId,A.Approve,A.AdvAmount,A.BillAmount,A.FormatType,A.WorkAccountId,CostOption,RefNo,RefDate,A.QualType,A.Ready,A.LabourUsedType  " + 
                    "From BillRegister A " +
                    "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster B on A.ContractorId=B.VendorId Where A.BillRegisterID = " + argBRegId;
                da = new SqlDataAdapter(sSql,BsfGlobal.g_WPMDB);
                da.Fill(ds, "BillRegister");
                da.Dispose();
          
                sSql="Select A.*,B.Type,B.RefNo,B.Bold from BillFormatTrans A " +
                    "Left Join BillFormatMaster B on A.TypeId=B.TypeID " +
                    "Where A.BillRegisterId="+argBRegId + " Order By A.TypeId ";
                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(ds, "BillFormatTrans");
                da.Dispose();

                sSql = "Select BillType from BillRegister Where BillRegisterId=" + argBRegId + "";
                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(ds, "BillTypeTrans");
                da.Dispose();

                sSql = "Select * from BillRateQ Where BillRegisterId=" + argBRegId + "";
                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(ds, "Qualifier");
                da.Dispose();

                sSql = "Select distinct DPERegisterId,BillRegisterId from BillDPETrans Where BillRegisterId=" + argBRegId + " and DPERegisterId>0";
                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(ds, "BillDPETrans");
                da.Dispose();

                sSql = "Select LabourStrengthId,BillRegisterId,TypeId from BillLSTrans Where BillRegisterId=" + argBRegId + " and LabourStrengthId>0";
                da = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                da.Fill(ds, "BillLSTrans");
                da.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return ds;
        }       

        public DataTable PopulateService(int argBillRegId, string argBillType, int argTypeId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            try
            {                
                sSql = "Select Distinct D.DPERegisterID, A.BillTransId,A.TypeId,A.Comp_ID,A.IOW_ID,B.ServiceCode Code,'' SerialNo,B.ServiceName Component_Name,C.Unit_Name UnitId,A.Qty,Rate,A.Amount,A.MType,A.AnalysisHeadId,A.FullRate,A.PerPart,A.PartRate,A.MUnitId,A.UFactor,A.BillType,A.WORegisterID From BillTrans A " +
                    "Inner Join [" + BsfGlobal.g_sVendorDBName + "].dbo.ServiceMaster B on A.Comp_ID=B.ServiceId " +
                    "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on B.UnitId=C.Unit_ID " +
                    "Left Join BillDPETrans D on A.BillRegisterID=D.BillRegisterID " +
                     "Where A.BillType in ('" + argBillType + "') and A.BillRegisterID=" + argBillRegId + " and A.TypeId = " + argTypeId + "";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable PopulateIOW(int argBillRegId, string argBillType, int argTypeId, int argRevId, string argDBName)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            try
            {
                if (argBillType == "I")
                {
                    sSql = "Select A.BillTransId,A.TypeId,A.Comp_ID,A.IOW_ID,B.RefSerialNo,'' SerialNo,B.Specification,C.Unit_Name UnitId,A.Qty,Rate,A.Amount,A.MType,A.AnalysisHeadId,A.FullRate,A.PerPart,A.PartRate,A.MUnitId,A.UFactor,A.BillType,A.WORegisterID,DetSpec,A.RateType From BillTrans A " +
                            "Left Join [" + argDBName + "].dbo.Project_IOW B on A.IOW_ID=B.Project_IOW_ID " +
                            //"Left Join BillDPETrans D on A.BillRegisterID=D.BillRegisterID " +
                            "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on B.Unit_Id=C.Unit_ID " +
                            "Where A.BillType in ('" + argBillType + "') and A.BillRegisterID=" + argBillRegId + " and A.TypeId = " + argTypeId + "";
                }
                else 
                {
                    sSql = "Select A.BillTransId,A.TypeId,A.Comp_ID,A.IOW_ID,B.New_Serial_No RefSerialNo,'' SerialNo,B.Specification,C.Unit_Name UnitId,A.Qty,Rate,A.Amount,A.MType,A.AnalysisHeadId,A.FullRate,A.PerPart,A.PartRate,A.MUnitId,A.UFactor,A.BillType,A.WORegisterID,DetSpec,A.RateType From BillTrans A " +
                        "Left Join [" + argDBName + "].dbo.IOW B on A.IOW_ID=B.ProjIOWID and B.Revision_ID="+argRevId+" " +
                        //"Left Join BillDPETrans D on A.BillRegisterID=D.BillRegisterID " +
                        "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on B.Unit_Id=C.Unit_ID " +
                        "Where A.BillType in ('" + argBillType + "') and A.BillRegisterID=" + argBillRegId + " and A.TypeId = " + argTypeId + "";
                }

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable getBillLbrResTranQtyEdit(int argResID, int argTransId, string argAHType)
        {

            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";
            try
            {
                sSql = "Select BillLbrResTransId,Qty,Rate,Amount from BillLbrResourceTrans Where BillTransID=" + argTransId + " and LbrResourceId = " + argResID + " and AnalysisType='" + argAHType + "' ";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);

                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable PopulateLabourE(int argBillRegId, string argBillType,int argTypeId)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";      
            try
            {
                if (argBillType == "A")
                {
                    //sSql = "Select distinct D.DPERegisterID,A.BillTransId,A.TypeId,A.Comp_ID,A.IOW_ID,B.Resource_Code Code,'' SerialNo,(B.Resource_Name+isnull((case when A.RateType='A' then '(Mechanical)' when A.RateType='M' then '(Manual)' end),'')) Component_Name,C.Unit_Name UnitId,A.Qty,Rate,A.Amount,A.MType,A.AnalysisHeadId,A.FullRate,A.PerPart,A.PartRate,A.MUnitId,A.UFactor,A.BillType,A.WORegisterID,DetSpec,A.RateType From BillTrans A " +
                    //    "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.Comp_ID=B.Resource_ID  and B.TypeId=4" +
                    //    "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on B.Unit_Id=C.Unit_ID " +
                    //    "Left Join BillDPETrans D on A.BillRegisterID=D.BillRegisterID " +
                    //    "Where A.BillType in ('" + argBillType + "') and A.BillRegisterID=" + argBillRegId + " and A.TypeId = " + argTypeId + "";


                    sSql = "Select distinct A.BillTransId,A.TypeId,A.Comp_ID,A.IOW_ID,B.Resource_Code Code,'' SerialNo,(B.Resource_Name+isnull((case when A.RateType='A' then '(Mechanical)' when A.RateType='M' then '(Manual)' end),'')) Component_Name,C.Unit_Name UnitId,A.Qty,Rate,A.Amount,A.MType,A.AnalysisHeadId,A.FullRate,A.PerPart,A.PartRate,A.MUnitId,A.UFactor,A.BillType,A.WORegisterID,DetSpec,A.RateType From BillTrans A " +
                        "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.Comp_ID=B.Resource_ID  and B.TypeId=4" +
                        "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on B.Unit_Id=C.Unit_ID " +
                        "Where A.BillType in ('" + argBillType + "') and A.BillRegisterID=" + argBillRegId + " and A.TypeId = " + argTypeId + "";

                }
                else if (argBillType == "L")
                {

                    sSql = "Select distinct A.BillTransId,A.TypeId,A.Comp_ID,A.IOW_ID,B.Resource_Code Code,'' SerialNo,(B.Resource_Name+isnull((case when A.RateType='A' then '(Mechanical)' when A.RateType='M' then '(Manual)' end),''))Component_Name,C.Unit_Name UnitId,A.Qty,Rate,A.Amount,A.MType,A.AnalysisHeadId,A.FullRate,A.PerPart,A.PartRate,A.MUnitId,A.UFactor,A.BillType,A.WORegisterID,DetSpec,A.RateType From BillTrans A " +
                        //"Inner Join [" + argDBName + "].dbo.Resource_Rate E on A.Comp_Id=E.Resource_ID " +
                        "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.Comp_Id=B.Resource_ID and B.TypeId=1 " +
                        "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on B.Unit_Id=C.Unit_ID " +
                        "Where A.BillType in ('" + argBillType + "') and A.BillRegisterID=" + argBillRegId + " and A.TypeId = " + argTypeId + "";

                    //sSql = "Select distinct D.DPERegisterID,A.BillTransId,A.TypeId,A.Comp_ID,A.IOW_ID,B.Resource_Code Code,'' SerialNo,(B.Resource_Name+isnull((case when A.RateType='A' then '(Mechanical)' when A.RateType='M' then '(Manual)' end),''))Component_Name,C.Unit_Name UnitId,A.Qty,Rate,A.Amount,A.MType,A.AnalysisHeadId,A.FullRate,A.PerPart,A.PartRate,A.MUnitId,A.UFactor,A.BillType,A.WORegisterID,DetSpec,A.RateType From BillTrans A " +
                    //    //"Inner Join [" + argDBName + "].dbo.Resource_Rate E on A.Comp_Id=E.Resource_ID " +
                    //    "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.Comp_Id=B.Resource_ID and B.TypeId=1 " +
                    //    "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on B.Unit_Id=C.Unit_ID " +
                    //    "Left Join BillDPETrans D on A.BillRegisterID=D.BillRegisterID " +
                    //    "Where A.BillType in ('" + argBillType + "') and A.BillRegisterID=" + argBillRegId + " and A.TypeId = " + argTypeId + "";
                }
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();                
               
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable InsertIOWE(int argCompId, string argMode, int argRevId, string argSplit,string argDBName)
        {
            BsfGlobal.OpenWPMDB();
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            try
            {
                if (argSplit != "Y")
                {

                    sSql = "Select ROW_NUMBER()  OVER (ORDER BY  A.Project_IOW_ID) As RowId,A.Project_IOW_ID IOW_ID,'' Level3,'' Level2,'' Level1,A.RefSerialNo, " +
                           " '' Serial_No,A.Specification,C.Unit_Name UOM_ID, 0 as Analysis_Head_ID,Cast(0 as Decimal(18,3)) Qty,0 as BillIOWTransID,0 as BillTransID,0 as MType, " +
                           "C.Unit_Name as MUOM_ID, Cast(0 as Decimal(18,3)) UFactor, Cast(0 as Decimal(18,3)) Rate, Cast(0 as Decimal(18,3)) Amount,0 as SubIOWID,1 IOWs from [" + argDBName + "].dbo.Project_IOW A " +
                           "Inner Join [" + argDBName + "].dbo.IOWc B on A.Project_IOW_ID=B.ProjIOWID and B.Revision_ID=" + argRevId + " " +
                           "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on A.Unit_Id=C.Unit_ID " +
                           "Where Project_IOW_ID in(Select B1.ProjIOWID from [" + argDBName + "].dbo.Project_DetailsC A1 " +
                           "Left Join [" + argDBName + "].dbo.IOWc B1 on A1.ProjIOWID=B1.ProjIOWID Where A1.Resource_ID=" + argCompId + " and B1.Revision_ID=" + argRevId + ")";

                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();
                }
                else
                {

                    sSql = "Select ROW_NUMBER()  OVER (ORDER BY  B.Project_IOW_ID) As RowId,B.Project_IOW_ID IOW_ID,case when H.AnalysisHeadName Is null then '' Else H.AnalysisHeadName End Level3, " +
                            "case when G.AnalysisHeadName Is null then '' Else G.AnalysisHeadName End Level2, case when F.AnalysisHeadName Is null then '' Else F.AnalysisHeadName End Level1,E.AnalysisHeadName, " +
                            "B.RefSerialNo, '' Serial_No,B.Specification,C.Unit_Name UOM_ID,A.Analysis_ID Analysis_Head_ID,Cast(0 as Decimal(18,3)) Qty,0 as BillIOWTransID,0 as BillTransID,0 as MType, " +
                            "C.Unit_Name as MUOM_ID, Cast(0 as Decimal(18,3)) UFactor, Cast(0 as Decimal(18,3)) Rate, Cast(0 as Decimal(18,3)) Amount,0 as SubIOWID,1 IOWs " + 
                            "from [" + argDBName + "].dbo.AnalysisIOWc A " +                       
                            "Inner Join [" + argDBName + "].dbo.Project_IOW B on A.ProjIOWID=B.Project_IOW_ID " +
                            "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM C on B.Unit_Id=C.Unit_ID " +

                       "Inner Join [" + argDBName + "].dbo.AnalysisHeads E on  A.Analysis_ID=E.AnalysisId  and E.LastLevel=1 " +
                       "Left Join [" + argDBName + "].dbo.AnalysisHeads F on E.ParentID=F.AnalysisID  " +
                       "Left Join [" + argDBName + "].dbo.AnalysisHeads G on F.ParentID=G.AnalysisID  " +
                       "Left Join [" + argDBName + "].dbo.AnalysisHeads H on G.ParentID=H.AnalysisID  " +

                       "Where B.Project_IOW_ID in(Select B1.ProjIOWID from [" + argDBName + "].dbo.Project_DetailsC A1 " +
                       "Left Join [" + argDBName + "].dbo.IOWc B1 on A1.ProjIOWID=B1.ProjIOWID Where A1.Resource_ID=" + argCompId + " and B1.Revision_ID=" + argRevId + ") " +
                       "and A.Revision_ID=" + argRevId + "";

                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();

                }
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable getIOWDetailsE(int argIOWId, int argAnlysId, int argBillTransId,int argLbrResTransId)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";
            try
            {

                sSql = "SELECT BillIOWTransID,BillTransID,Qty,MType,MUnitId,UFactor,Rate,Amount,SubIOWId FROM BillIOWTRans " +
                      "WHERE BillTransID=" + argBillTransId + " AND IOW_ID = " + argIOWId + " and AnalysisHeadId = " + argAnlysId + " and LbrResTransId = " + argLbrResTransId; 
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable PopulateMeasrCollE(string argBilType,int argBillTransId,int argBillIOWTransId)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sql = "";
            try
            {               
                if (argBilType.ToString() == "I")
                {
                    sql = "Select * from BillMeasurement Where BillTransId = " + argBillTransId + " And WBSWise='N' Order By RowID";
                    sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);                    
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();
                }
                else
                {
                    sql = "Select * from BillMeasurement Where BillIOWTransId = " + argBillIOWTransId + " And WBSWise='N' Order By RowID";

                    sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);                    
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();
                }                
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable PopulateIOWLabourCollE(int argBillIOWTransID,int argAnalId,int argBillTransId)
        {

            SqlDataAdapter sda;            
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                if (argBillIOWTransID != 0 && argAnalId == 0)
                {
                    sSql = "Select A.LabourTypeID,B.Resource_Name TypeName,A.Qty,A.Rate,A.Amount,A.MinRate,A.AppRate,A.AnalysisId From BillIOWLabourTrans A " +
                        "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeID=B.Resource_Id " +
                        "Where A.BillTransId=" + argBillTransId + "  and A.BillIOWTransId = " + argBillIOWTransID;
                }
                else if (argAnalId != 0)
                {
                    sSql = "Select A.LabourTypeID,B.Resource_Name TypeName,A.Qty,A.Rate,A.Amount,A.MinRate,A.AppRate,A.AnalysisId From BillIOWLabourTrans A " +
                        "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeID=B.Resource_Id " +
                        "Where A.BillTransId=" + argBillTransId + "  and A.AnalysisId = " + argAnalId;
                }

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);                
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable UpdateItemLbrTransE(int argBillTransId)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sql = "";
            try
            {
                sql = "Select A.LabourTypeID,B.Resource_Name TypeName,A.Qty,A.Rate,A.Amount,A.MinRate,A.AppRate,A.BillTransId from BillItemLabourTrans A " +
                         "Inner Join ["+BsfGlobal.g_sRateAnalDBName+"].dbo.Resource B on A.LabourTypeId = B.Resource_ID " +
                         "Where A.BillTransId= "+argBillTransId+"";

                sda = new SqlDataAdapter(sql, BsfGlobal.g_WPMDB);                
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();

                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable PopulateIOWE(int argBillRegId, ArrayList argBillType, int argTypeId,string argDBName)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";

            try
            {

                for (int j = 0; j < argBillType.Count; j++)
                {
                    if (argBillType[j].ToString() != "I")
                    {
                        sSql = "Select A.BillTransId,A.TypeId,A.IOW_ID,B.New_Serial_No,'' SerialNo,B.Specification,A.UnitId,A.Qty,Rate,A.Amount,A.MType,A.AnalysisHeadId,A.FullRate,A.PerPart,A.PartRate,A.MUnitId,A.UFactor,A.BillType,A.WORegisterID,C.DPERegisterID From BillTrans A " +
                            "Inner Join ["+argDBName+"].Dbo.IOW B on A.IOW_ID=B.IOW_Trans_ID " +
                            "Inner Join BillDPETrans C on A.BillRegisterID=C.BillRegisterID " +
                            "Where A.BillRegisterID = " + argBillRegId + " and A.BillType = '" + argBillType[j].ToString() + "' and TypeId = " + argTypeId + "";

                        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);

                        dt = new DataTable();
                        sda.Fill(dt);
                        sda.Dispose();
                    }
                    else
                    {

                        sSql = "Select A.BillTransId,A.IOW_ID,B.New_Serial_No,'' SerialNo,B.Specification,A.UnitId,A.Qty,Rate,A.Amount,A.MType,A.AnalysisHeadId,A.FullRate,A.PerPart,A.PartRate,A.MUnitId,A.UFactor,A.BillType,A.WORegisterID,C.DPERegisterID From BillTrans A " +
                            "Inner Join [" + argDBName + "].Dbo.IOW B on A.IOW_ID=B.IOW_Trans_ID " +
                            "Inner Join BillDPETrans C on A.BillRegisterID=C.BillRegisterID " +
                            "Where A.BillRegisterID = " + argBillRegId + " and A.BillType = '" + argBillType[j].ToString() + "' and TypeId = " + argTypeId + "";

                        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);

                        dt = new DataTable();
                        sda.Fill(dt);
                        sda.Dispose();
                    }

                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }
        
        public DataTable PopulateTDSCollection(int argBillRegId,int argTypeId,string argType)
        {
            SqlDataAdapter sda;            
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                if (argType == "T")
                {
                    sSql = "Select AccountId,Formula,GrossAmt,TDSPer,TDSAmt,SurPer,SurAmt,EDPer,EDAmt,TDSNetAmt,QualMId,HEDPer,HEDAmt,TypeId,NetPer from TDSBillFormatTrans  " +
                        "Where TypeId= " + argTypeId + " and BillRegisterId = " + argBillRegId;
                }
                else
                {
                    sSql = "Select AccountId,Formula Exp,GrossAmt,ExpPer,ExpValue ExpPerAmt,SurCharge SurPer,SurValue SurAmt,EDCess EDPer,EDValue EDAmt,NetAmt,HEDCess HEDPer,HEDValue HEDAmt,TypeId,NetPer,TaxablePer,TaxableValue TaxableAmt from BillServiceTaxTrans  " +
                        "Where TypeId= " + argTypeId + " and BillRegId = " + argBillRegId;
                }
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable PopulateMaterialCol(int argBillRegId, int argTypeId)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";

            try
            {
                sSql = "Select A.Comp_ID,B.Resource_Code Code,B.Resource_Name Component_Name,U.Unit_Name,A.Qty,A.Rate,A.Amount,A.IssueId,IR.IssueNo,IR.IssueDate,(I.IssueQty-I.RecQty+A.Qty) RQty From BillMaterialRecovery A  " +
                       "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on B.Resource_Id=A.Comp_Id  and B.TypeID=2 " +
                       "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM U on B.Unit_ID=U.Unit_ID " +
                       "Left Join [" + BsfGlobal.g_sMMSDBName + "].dbo.IssueTrans I on A.IssueId=I.IssueTransId and A.Comp_ID = I.ResourceId " +
                       "Left Join [" + BsfGlobal.g_sMMSDBName + "].dbo.IssueRegister IR on I.IssueRegisterId=IR.IssueRegisterId " +
                       "Where A.BillRegId=" + argBillRegId + " and A.TypeId = " + argTypeId;
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable PopulateLabourAdvanceTypeCol(int argBillRegId, int argTypeId, string sFormatType,bool argIntrnal)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            try
            {
                if (sFormatType == "A" && argIntrnal == true)
                {
                    sSql = "Select A.LabourId,B.LabourName,A.Amount,A.TypeId,A.BFormatType FormatType,case when A.Sign=1 then '+' else '-' end Sign From BillLabourAdvance A " +
                        "Inner Join LabourMaster B on A.LabourId=B.LabourId " +
                        "Where A.BillRegisterId = " + argBillRegId + " and A.TypeId=" + argTypeId;
                }
                if (sFormatType == "B" && argIntrnal == true)
                {
                    sSql = "Select A.LabourId,B.LabourName,A.Amount,A.TypeId,'B' as FormatType,'' as Sign From LabourAdvAdjustment A " +
                        "Inner Join LabourMaster B on A.LabourId=B.LabourId " +
                        "Where A.BillRegisterId = " + argBillRegId + " and A.TypeId=" + argTypeId;
                }
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }


        public DataTable GetBillLSTypeTrans(int argTransId,int argLTypeId, int argAnalId, string argLSId)
        {
            DataTable dt = new DataTable();

            string sCVType = BsfGlobal.GetVoucherType(11);

            string sSql = "";


            if (argTransId != 0)
            {
                sSql = "Select A.LSId LabourStrengthID,B.EDate,";

                if (sCVType == "CC")
                { sSql = sSql + "B.CCVNo VNo,"; }
                else if (sCVType == "CO")
                {
                    sSql = sSql + " B.CompanyBVNo VNo,";
                }
                else
                {
                    sSql = sSql + " B.VNo VNo,";
                }

                sSql = sSql + "A.Qty,C.Qty LSQty from BillLabourTypeWBSLSTrans A " +
                       "Inner Join LabourStrengthMaster B on A.LSId=B.LabourStrengthId ";

                if (argAnalId ==0)
                {
                    sSql = sSql + "Join (Select L.LabourStrengthId, L.Qty from LabourStrengthTrans L " +
                            "Where L.LabourTypeId=" + argLTypeId + ") C on A.LSId=C.LabourStrengthId ";
                }
                else
                {
                    sSql = sSql + "Join (Select L1.LabourStrengthId,L.Qty from LSWBSTrans L " +
                            "Inner Join LabourStrengthTrans L1 on L.LSTransId=L1.LabourTransId " +
                            "Where L1.LabourTypeId=" + argLTypeId + " and L.AnalysisId = " + argAnalId + ") C on A.LSId=C.LabourStrengthId "; 
                }


                sSql = sSql + " Where 1=1";

                if (argAnalId == 0) { sSql = sSql + " and A.BillLabourTypeTransId = " + argTransId; }
                else { sSql = sSql + " and A.BillLSWBSTransId = " + argTransId; }

            }
            else
            {
                sSql = "Select C.LabourStrengthID,C.EDate,";

                if (sCVType == "CC")
                { sSql = sSql + "C.CCVNo VNo,"; }
                else if (sCVType == "CO")
                {
                    sSql = sSql + " C.CompanyBVNo VNo,";
                }
                else
                {
                    sSql = sSql + " C.VNo VNo,";
                }

                if (argAnalId == 0)
                {
                    sSql = sSql + "A.Qty,A.Qty LSQty from LabourStrengthTrans A " +
                            "Inner Join LabourStrengthMaster C on A.LabourStrengthId=C.LabourStrengthID " +
                            "Where A.LabourTypeId=" + argLTypeId + " and A.LabourStrengthId in( " + argLSId + ")";
                }

                else
                {
                    sSql = sSql + "A.Qty,A.Qty LSQty from LSWBSTrans A " +
                            "Inner Join LabourStrengthTrans B on A.LSTransId=B.LabourTransId " +
                            "Inner Join LabourStrengthMaster C on B.LabourStrengthId=C.LabourStrengthID " +
                            "Where B.LabourTypeId=" + argLTypeId + " and A.AnalysisId=" + argAnalId + " and B.LabourStrengthId in( " + argLSId + ")";
                }
            }
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();

            BsfGlobal.g_WPMDB.Close();

            return dt;
        }

        public DataTable PopulateLabourTypeCol(int argBillRegId, int argTypeId,bool argInternal,string argFormtType)
        {
            SqlDataAdapter sda;            
            DataTable dt = null;
            string sSql = "";
            DataTable dtC = new DataTable();
            BsfGlobal.OpenWPMDB();
            try
            {

                sSql = "Select A.BillLabourTypeTransId,A.LabourTypeId,B.Resource_Name TypeName,A.Qty,A.Rate,A.Amount, " +
                        "A.TypeId,E.Unit_Name Unit,FromLS  From BillLabourTypeTrans A " +
                        "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId=B.Resource_ID " +
                        "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM E on B.Unit_Id=E.Unit_Id " +
                        "Where A.BillRegisterId = " + argBillRegId + " and A.TypeId=" + argTypeId;


                //if (argInternal == false && argFormtType == "B")
                //{
                //    sSql = "Select A.LabourStrengthID,A.LabourTypeId,(B.Resource_Name+isnull((case when A.RateType='A' then '(Mechanical)' when A.RateType='M' then '(Manual)' end),''))TypeName,A.Qty,A.Rate,A.Amount,A.AssetId, " +
                //        "A.AnalysisHeadID,A.TypeId,A.ShiftId,D.ShiftName,E.Unit_Name Unit,A.RateType  From BillLabourType A " +
                //        "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B on A.LabourTypeId=B.Resource_ID " +
                //        //"Left Join BillLSTrans C on A.BillRegisterID=C.BillRegisterID  " +
                //        "Left Join LabourShiftTrans D on A.ShiftId=D.ShiftId  " +
                //        "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM E on B.Unit_Id=E.Unit_Id " +
                //        "Where A.BillRegisterId = " + argBillRegId + " and A.TypeId=" + argTypeId;
                //}
                //else if (argInternal == true && argFormtType == "B")
                //{
                //    sSql = "Select '' as LabourStrengthID,A.LabourId LabourTypeId,B.LabourName TypeName,A.Qty,A.Rate,A.Amount,0 as AssetId, " +
                //        "0 as AnalysisHeadID,A.TypeId,A.ShiftId,D.ShiftName,'' as RateType  From BillMLabourTrans A " +
                //        "Inner Join LabourMaster B on A.LabourId=B.LabourId " +
                //        //"Left Join BillLSTrans C on A.BillRegisterID=C.BillRegisterID  " +
                //        "Left Join LabourShiftTrans D on A.ShiftId=D.ShiftId  " +
                //        "Where A.BillRegisterId = " + argBillRegId + " and A.TypeId=" + argTypeId;
                //}
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }


        public DataTable PopulateTurnKeyTypeCol(int argBillRegId, int argTypeId,string argType,string argDBName)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";

            try
            {
                if (argType == "T")
                {
                    sSql = "Select A.AnalTransId,A.BillRegisterId,A.TypeId,A.WORegisterId,A.DPERegisterId,A.AnalysisId,B.AnalysisHeadName,A.CumPercentage, " +
                        "A.CurPercentage,A.CurAmount,A.CumAmount,A.WOAllotted WOQty From BillTurnKeyTrans A " +
                        "Inner Join [" + argDBName + "].dbo.AnalysisHeads B on A.AnalysisId=B.AnalysisId and B.LastLevel=1 " +
                        "Where A.BillRegisterId = " + argBillRegId + " and A.TypeId=" + argTypeId;

                    sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                    dt = new DataTable();
                    sda.Fill(dt);
                    sda.Dispose();
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }


        public DataTable GetAdvanceLbrAmt(int argCCId, int argLbrId,int argContId)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";

            try
            {
                sSql = "Select A.Amount,B.ShiftId,C.ShiftName from LabourTrans A " +
                    "Inner Join LabourStrengthMaster B on A.LabourStrengthId=B.LabourStrengthId  and B.CostCentreId=" + argCCId + " and B.ContractorId=" + argContId + " " +
                    "Left Join LabourShiftTrans C on B.ShiftId=C.ShiftId " +
                    "Where A.LabourId=" + argLbrId;

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public bool GetProjectDB(int argCostCentreId,string argDBName)
        {
            string sSql = "";
            bool b_Ans = false;
            SqlCommand cmd;            
            BsfGlobal.OpenWPMDB();

            try
            {
                sSql = "SELECT ProjectDB FROM [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre WHERE CostCentreId=" + argCostCentreId + "";

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                if (cmd.ExecuteScalar() != DBNull.Value)
                {
                    argDBName = Convert.ToString(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypestring));
                }
                if (argDBName != "")
                {
                    if (BsfGlobal.CheckDBFound(argDBName) == true)
                    {
                        //CommFun.g_ProjWPMDB = BsfGlobal.OpenProjectDB(argDBName);
                        b_Ans = true;
                    }
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return b_Ans;
        }

        //public bool GetZCRProjectDB(int argCostCentreId)
        //{
        //    string sSql = "";
        //    bool b_Ans = false;
        //    SqlCommand cmd;            
        //    BsfGlobal.OpenWPMDB();

        //    try
        //    {
        //        sSql = "SELECT ZCRDataBase FROM CostCentre WHERE CostCentreId=" + argCostCentreId + "";

        //        cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
        //        if (cmd.ExecuteScalar() != DBNull.Value)
        //        {
        //            CommFun.g_sProjZCRDBName = Convert.ToString(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypestring));
        //        }
        //        if (CommFun.g_sProjZCRDBName != "")
        //        {
        //            if (BsfGlobal.CheckDBFound(CommFun.g_sProjZCRDBName) == true)
        //            {
        //                CommFun.g_ProjZCRDB = BsfGlobal.OpenProjectDB(CommFun.g_sProjZCRDBName);
        //                b_Ans = true;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        BsfGlobal.CustomException(ex.Message, ex.StackTrace);
        //    }
        //    return b_Ans;
        //}

        public DataTable GetRateQ(int argBillRegId)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";

            try
            {

                sSql = "Select QualifierId,Expression,Add_Less_Flag,Amount from BillRateQ Where BillRegisterID= " + argBillRegId + "";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable PopulateLabourBillTrans(int argBillRegId)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";

            try
            {

                sSql = "Select TypeId,Amount,Formula From LabourBillTrans " +
                    "Where BillRegisterId = " + argBillRegId + "";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable PopulateBillLabourTrans(int argBillRegId)
        {
            SqlDataAdapter sda;
            BsfGlobal.OpenWPMDB();
            DataTable dt = null;
            string sSql = "";

            try
            {

                sSql = "Select A.LabourTypeId,B.Resource_Name TypeName,A.Qty,A.Rate,A.Amount,A.MinRate,A.AppRate From BillLabourTrans A " +
                    "Inner Join ["+BsfGlobal.g_sRateAnalDBName+"].dbo.Resource B on A.LabourTypeId = B.Resource_Id " +
                    "Where BillRegisterId = " + argBillRegId + "";


                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
               BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public int GetMeasurementQtyDigit(int argCCId)
        {
            string sSql = "";
            int getMsrQty = 0;
            SqlCommand cmd;            
            BsfGlobal.OpenWPMDB();            

            try
            {
                //Select DPEIOWTransID,Qty,MType,CumQty,MUpdate,MUnitID,UFactor from DPEIOWTRans Where DPETransID=" & argId & " and IOW_ID = " & m_cIOW.IOW_ID & " and AnalysisHeadId = " & m_cIOW.AnalysisHeadId & ""
                sSql = "Select MDigit From CostCentre Where CostCentreId=" + argCCId + "";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                getMsrQty = Convert.ToInt32(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypenumeric));

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            BsfGlobal.g_WPMDB.Close();
            return getMsrQty;
        }

        public DataTable PopulatAHeadName(string argDBName)
        {
            
            
            SqlDataAdapter sda;           
            DataTable dt = null;              
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                sSql = "Select AnalysisID,AnalysisHeadName from [" + argDBName + "].dbo.AnalysisHeads Where LastLevel = 1";

                sda = new SqlDataAdapter(sSql,BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();                
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        public int GetBillTranId(int argCompId, int argIOWId)
        {
            string sSql = "";
            int getMsrQty = 0;
            SqlCommand cmd;
            BsfGlobal.OpenWPMDB();

            try
            {
                if (argIOWId == 0)
                    sSql = "Select BillTransID From BillTrans Where Comp_ID=" + argCompId + "";
                if (argCompId == 0)
                    sSql = "Select BillTransID From BillTrans Where IOW_ID=" + argIOWId + "";

                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                getMsrQty = Convert.ToInt32(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypenumeric));

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return getMsrQty;
        }

        public DataTable GetBillTransId(int argTypeId)
        {
            string sSql = "";            
            SqlDataAdapter sda;
            DataTable dt = new DataTable();
            BsfGlobal.OpenWPMDB();

            try
            {                
                sSql = "Select BillTransID From BillTrans Where TypeId =" + argTypeId + "";
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable GetMatBRegId(int argTypeId)
        {
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            SqlDataAdapter sda;
            DataTable dt = new DataTable();

            try
            {
                
                sSql = "Select distinct BillRegId From BillMaterialRecovery Where TypeId =" + argTypeId + "";
              
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public DataTable GetLbrBRegId(int argTypeId,bool argInternal)
        {
            string sSql = "";
            SqlDataAdapter sda; BsfGlobal.OpenWPMDB();
            DataTable dt = new DataTable();
            try
            {
                if(argInternal==false)
                    sSql = "Select distinct BillRegisterId From BillLabourType Where TypeId =" + argTypeId + "";
                else
                    sSql = "Select distinct BillRegisterId From BillMLabourTrans Where TypeId =" + argTypeId + "";

              
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }


        public DataTable GetLbrAdvBRegId(int argTypeId)
        {
            string sSql = "";
            SqlDataAdapter sda; BsfGlobal.OpenWPMDB();
            DataTable dt = new DataTable();
            try
            {

                sSql = "Select distinct BillRegisterId From BillLabourAdvance Where TypeId =" + argTypeId + "";              
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }

        public ArrayList GetBillType(int argBillRegId, int argTypeId)
        {
            string sSql = "";
            ArrayList getBType = new ArrayList();
            getBType.Clear();
            SqlDataAdapter da;
            DataTable dt = new DataTable();
            BsfGlobal.OpenWPMDB();

            try
            {
                sSql = "Select  Distinct BillType From BillTrans Where BillRegisterID=" + argBillRegId + " and TypeId =" + argTypeId;                

                da = new SqlDataAdapter(sSql,BsfGlobal.g_WPMDB);
                da.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    for (int b = 0; b < dt.Rows.Count;b++)
                    {
                        getBType.Add(dt.Rows[b]["BillType"].ToString());
                    }
                }
                da.Dispose();               

                BsfGlobal.g_WPMDB.Close();

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return getBType;
        }

        public decimal GetPreviousPartRateWBS(int argCCId, int argContId,decimal argRate, int argIOWId,int argAnalysisId,int argTypeId,int argWORegId)
        {
            decimal dQty = 0;

            string sSql = "";
            BsfGlobal.OpenWPMDB();
            string sWORegId = "";
            if (argWORegId != 0) { sWORegId = CommFun.GetAmendWORegIdNew(argWORegId, BsfGlobal.g_WPMDB); }

            if (argAnalysisId == 0)
            {
                if (argTypeId ==1)
                {
                    sSql = "Select Sum(A.Qty) Qty from BillTrans A " +
                            "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                            "Where A.PartRate=1 and A.BillType='I' and B.CostCentreID=" + argCCId + " and B.ContractorId=" + argContId + " " +
                            "and A.Rate=" + argRate + " and A.IOW_Id=" + argIOWId + " and A.TypeId= " + argTypeId;
                    if (sWORegId !="") { sSql =  sSql + " and B.WORegisterId in (" + sWORegId + ")";}
                }

                else
                {
                    sSql = "Select Sum(A.Qty) Qty from BillTrans A " +
                            "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                            "Where A.PartRate=1 and A.BillType='I' and B.CostCentreID=" + argCCId + " and B.ContractorId=" + argContId + " " +
                            "and A.Rate=" + argRate + " and A.IOW_Id=" + argIOWId + " and A.TypeId = " + argTypeId;
                }
            }
            else
            {
                if (argTypeId ==1)
                {
                    sSql = "Select Sum(A.Qty) Qty from BILLWBSTrans A " +
                            "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                            "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                            "Where B.PartRate=1 and B.BillType='I' and C.CostCentreID=" + argCCId + " and C.ContractorId=" + argContId + " " +
                            "and B.Rate=" + argRate + " and B.IOW_Id=" + argIOWId + " and A.AnalysisId=" + argAnalysisId + " and B.TypeId = " + argTypeId;

                     if (sWORegId !="") { sSql =  sSql + " and C.WORegisterId in (" + sWORegId + ")";}
                }
                else
                {
                    sSql = "Select Sum(A.Qty) Qty from BILLWBSTrans A " +
                            "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                            "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                            "Where B.PartRate=1 and B.BillType='I' and C.CostCentreID=" + argCCId + " and C.ContractorId=" + argContId + " " +
                            "and B.Rate=" + argRate + " and B.IOW_Id=" + argIOWId + " and A.AnalysisId=" + argAnalysisId + " and B.TypeId = " + argTypeId;
                }
            }

            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            dQty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypenumeric));
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();

            return dQty;

        }


        public decimal GetPreviousPartRateLabourRes(int argCCId, int argContId, decimal argRate, int argResId, int argLbrResId, string argResType)
        {
            decimal dQty = 0;

            string sSql = "Select Sum(A.Qty) from BILLIOWTrans A " +
                          "Inner Join BillLbrResourceTrans B on A.BillTransId=B.BillTransId and A.LbrResTransId = B.BillLbrResTransId " +
                          "Inner Join BillTrans C on B.BillTransId=C.BillTransId " +
                          "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId Where C.PartRate=1 and C.BillType='L' and D.CostCentreID=" + argCCId + " and D.ContractorId=" + argContId + " and C.Rate= " + argRate + " and " +
                          "B.CompId=" + argResId + " and B.LbrResourceId=" + argLbrResId + " and B.AnalysisType='" + argResType + "'";
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            dQty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();

            return dQty;

        }


        public decimal GetPreviousPartRateLabourIOW(int argCCId, int argContId, decimal argRate, int argResId, int argLbrResId, string argResType, int argIOWId, int argAnalysisId)
        {
            decimal dQty = 0;

            string sSql = "Select Sum(A.Qty) from BILLIOWTrans A " +
                          "Inner Join BillLbrResourceTrans B on A.BillTransId=B.BillTransId and A.LbrResTransId = B.BillLbrResTransId " +
                          "Inner Join BillTrans C on B.BillTransId=C.BillTransId " +
                          "Inner Join BillRegister D on C.BillRegisterId=D.BillRegisterId Where C.PartRate=1 and C.BillType='L' and D.CostCentreID=" + argCCId + " and D.ContractorId=" + argContId + " and C.Rate= " + argRate + " and " +
                          "B.CompId=" + argResId + " and B.LbrResourceId=" + argLbrResId + " and B.AnalysisType='" + argResType + "' and A.IOW_Id = " + argIOWId + " and A.AnalysisHeadId= " + argAnalysisId;
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            dQty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();

            return dQty;

        }


        public decimal GetPreviousPartRateActivityIOW(int argCCId, int argContId, decimal argRate,int argResId,string argResType, int argIOWId, int argAnalysisId)
        {
            decimal dQty = 0;

            string sSql = "Select Sum(A.Qty) from BILLIOWTrans A " +
                          "Inner Join BillTrans B on A.BillTransId=B.BillTransId " +
                          "Inner Join BillRegister C on B.BillRegisterId=C.BillRegisterId " +
                          "Where B.PartRate=1 and B.BillType='A' and C.CostCentreID=" + argCCId + " and C.ContractorId=" + argContId + " " +
                          "and B.Rate= " + argRate + " and B.Comp_Id=" + argResId + " and B.RateType='" + argResType + "' and A.IOW_Id = " + argIOWId + " and A.AnalysisHeadId= " + argAnalysisId;
            BsfGlobal.OpenWPMDB();
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            dQty = Convert.ToDecimal(CommFun.IsNullCheck(cmd.ExecuteScalar(), CommFun.datatypes.vartypenumeric));
            cmd.Dispose();
            BsfGlobal.g_WPMDB.Close();

            return dQty;

        }


        public DataTable GetPreviousPartRate(int argCCId, int argContId, string argBType,string argDBName,int argWORegId)
        {      
            SqlDataAdapter sda;
            //DataTable dt = null;
            string sSql = "";
            DataTable dtF = new DataTable();
            BsfGlobal.OpenWPMDB();
            DataSet ds = new DataSet();            
            DataRow dr;
          
            try
            {
                if (dtF.Columns.Count == 0)
                {
                    dtF.Columns.Add("ResourceId",typeof(int));
                    dtF.Columns.Add("RowId", typeof(int));
                    dtF.Columns.Add("IOW_ID", typeof(int));
                    dtF.Columns.Add("ResourceCode", typeof(string));
                    dtF.Columns.Add("Description", typeof(string));
                    dtF.Columns.Add("DetSpec", typeof(string));
                    dtF.Columns.Add("Unit", typeof(string));
                    dtF.Columns.Add("Rate", typeof(decimal));
                    dtF.Columns.Add("AnalysisHeadId", typeof(int));
                    dtF.Columns.Add("FullRate", typeof(decimal));
                    dtF.Columns.Add("PerPart", typeof(decimal));
                    dtF.Columns.Add("PartRate", typeof(string));
                    dtF.Columns.Add("Type", typeof(string));
                    dtF.Columns.Add("MType", typeof(int));
                    dtF.Columns.Add("TypeId", typeof(int));
                    dtF.Columns.Add("Qty", typeof(decimal));
                    dtF.Columns.Add("RateType", typeof(string));
                }


                //sSql = "Select A.TypeId from BillFormat A " +
                //    "Inner Join BillformatMaster B on A.TypeId=B.TypeId  And B.Type='I' " +
                //    "Where A.CostCentreId= " + argCCId;

                //sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                //dt = new DataTable();
                //sda.Fill(dt);
                //sda.Dispose();
                //if (dt.Rows.Count > 0)
                //{

                string sWORegId = "";
                if (argWORegId !=0 ) { sWORegId =  CommFun.GetAmendWORegIdNew(argWORegId,BsfGlobal.g_WPMDB);}


                    if (argBType == "I" || argBType == "S")
                    {
                        sSql = "";
                        if (sWORegId != "")
                        {
                            sSql = "Select ROW_NUMBER()  OVER (ORDER BY  A.IOW_ID) As RowId,A.IOW_ID,0 as ResourceId,B.RefSerialNo ResourceCode,B.Specification Description,A.UnitId Unit, " +
                                   "A.Rate,A.FullRate,A.PerPart,A.PartRate,A.BillType,A.TypeId,Sum(A.Qty) as Qty,A.DetSpec,A.MType,A.RateType From BillTrans A " +
                                   "Inner Join [" + argDBName + "].Dbo.Project_IOW B on A.IOW_ID=B.Project_IOW_ID " +
                                   "Inner Join BillRegister C on A.BillRegisterId=C.BillRegisterId " +
                                   "Where A.PartRate=1 and A.BillType = '" + argBType + "' And " +
                                   "C.CostCentreID = " + argCCId + "  and " +
                                   "C.ContractorId = " + argContId + " and C.WORegisterId in (" + sWORegId + ") and A.TypeId=1 " +
                                   "Group by A.IOW_ID,B.RefSerialNo,B.Specification,A.UnitId,A.Rate,A.FullRate,A.PerPart,A.PartRate,A.BillType,A.TypeId,A.MType,A.RateType,A.DetSpec Having Sum(A.Qty) >0 " +
                                   "Union All ";
                        }
                            sSql = sSql + " Select ROW_NUMBER()  OVER (ORDER BY  A.IOW_ID) As RowId,A.IOW_ID,0 as ResourceId,B.RefSerialNo ResourceCode,B.Specification Description,A.UnitId Unit, " +
                                   "A.Rate,A.FullRate,A.PerPart,A.PartRate,A.BillType,A.TypeId,Sum(A.Qty) as Qty,A.DetSpec,A.MType,A.RateType From BillTrans A " +
                                   "Inner Join [" + argDBName + "].Dbo.Project_IOW B on A.IOW_ID=B.Project_IOW_ID " +
                                   "Inner Join BillRegister C on A.BillRegisterId=C.BillRegisterId " +
                                   "Where A.PartRate=1 and A.BillType = '" + argBType + "' And " +
                                   "C.CostCentreID = " + argCCId + "  and " +
                                   "C.ContractorId = " + argContId + " and A.TypeId <> 1" +
                                   "Group by A.IOW_ID,B.RefSerialNo,B.Specification,A.UnitId,A.Rate,A.FullRate,A.PerPart,A.PartRate,A.BillType,A.TypeId,A.MType,A.RateType,A.DetSpec Having Sum(A.Qty) >0";
                        
                        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                        sda.Fill(ds, "IS");
                        sda.Dispose();
                        
                        BsfGlobal.g_WPMDB.Close();
                    }
                    else
                    {
                        sSql = "";
                        if (sWORegId != "")
                        {

                            sSql = "Select ROW_NUMBER()  OVER (ORDER BY  A.Comp_ID) As RowId,A.Comp_ID ResourceId,0 as IOW_ID,B.Resource_Code ResourceCode,B.Resource_Name Description,A.UnitId Unit, " +
                                    "A.Rate,A.FullRate,A.PerPart,A.PartRate,A.BillType,A.TypeId,Sum(A.Qty) as Qty,A.DetSpec,A.MType,A.RateType From BillTrans A " +
                                    "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].Dbo.Resource B on A.Comp_ID=B.Resource_Id " +
                                    "Inner Join BillRegister C on A.BillRegisterId=C.BillRegisterId " +
                                    "Where A.PartRate=1 and A.BillType = '" + argBType + "'  And " +
                                    "C.CostCentreID = " + argCCId + "  and " +
                                    "C.ContractorId = " + argContId + " and C.WORegisterId in (" + sWORegId + ") and A.TypeId=1 " +
                                    "Group by A.Comp_ID,B.Resource_Code,B.Resource_Name,A.UnitId,A.Rate,A.FullRate,A.PerPart,A.PartRate,A.BillType,A.TypeId,A.MType,A.RateType,A.DetSpec Having Sum(A.Qty) >0 " +
                                    "Union All ";
                        }

                        sSql = sSql + " Select ROW_NUMBER()  OVER (ORDER BY  A.Comp_ID) As RowId,A.Comp_ID ResourceId,0 as IOW_ID,B.Resource_Code ResourceCode,B.Resource_Name Description,A.UnitId Unit, " +
                                "A.Rate,A.FullRate,A.PerPart,A.PartRate,A.BillType,A.TypeId,Sum(A.Qty) as Qty,A.DetSpec,A.MType,A.RateType From BillTrans A " +
                                "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].Dbo.Resource B on A.Comp_ID=B.Resource_Id " +
                                "Inner Join BillRegister C on A.BillRegisterId=C.BillRegisterId " +
                                "Where A.PartRate=1 and A.BillType = '" + argBType + "'  And " +
                                "C.CostCentreID = " + argCCId + "  and " +
                                "C.ContractorId = " + argContId + " and A.TypeId <> 1" +
                                "Group by A.Comp_ID,B.Resource_Code,B.Resource_Name,A.UnitId,A.Rate,A.FullRate,A.PerPart,A.PartRate,A.BillType,A.TypeId,A.MType,A.RateType,A.DetSpec Having Sum(A.Qty) >0";


                        sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                        sda.Fill(ds, "LAH");
                        sda.Dispose();
                        BsfGlobal.g_WPMDB.Close();
                    }
                    
                //}
                    if (ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                dr = dtF.NewRow();

                                dr["RowId"] = Convert.ToInt32(CommFun.IsNullCheck(ds.Tables[0].Rows[i]["RowId"], CommFun.datatypes.vartypenumeric));
                                dr["ResourceId"] = Convert.ToInt32(CommFun.IsNullCheck(ds.Tables[0].Rows[i]["ResourceId"], CommFun.datatypes.vartypenumeric));
                                dr["IOW_ID"] = Convert.ToInt32(CommFun.IsNullCheck(ds.Tables[0].Rows[i]["IOW_ID"], CommFun.datatypes.vartypenumeric));
                                dr["ResourceCode"] = CommFun.IsNullCheck(ds.Tables[0].Rows[i]["ResourceCode"], CommFun.datatypes.vartypestring).ToString();
                                dr["Description"] = CommFun.IsNullCheck(ds.Tables[0].Rows[i]["Description"], CommFun.datatypes.vartypestring).ToString();
                                dr["DetSpec"] = CommFun.IsNullCheck(ds.Tables[0].Rows[i]["DetSpec"], CommFun.datatypes.vartypestring).ToString();
                                dr["AnalysisHeadId"] = 0;
                                dr["Unit"] = ds.Tables[0].Rows[i]["Unit"].ToString();
                                dr["FullRate"] = Convert.ToDecimal(CommFun.IsNullCheck(ds.Tables[0].Rows[i]["FullRate"], CommFun.datatypes.vartypenumeric));
                                dr["PerPart"] = Convert.ToDecimal(CommFun.IsNullCheck(ds.Tables[0].Rows[i]["PerPart"], CommFun.datatypes.vartypenumeric));

                                if (CommFun.IsNullCheck(ds.Tables[0].Rows[i]["PartRate"], CommFun.datatypes.vartypestring).ToString() == "True")
                                {
                                    dr["Rate"] = Convert.ToDecimal(CommFun.IsNullCheck(ds.Tables[0].Rows[i]["Rate"], CommFun.datatypes.vartypenumeric));
                                    dr["PartRate"] = 1;
                                }
                                else
                                {
                                    dr["Rate"] = Convert.ToDecimal(CommFun.IsNullCheck(ds.Tables[0].Rows[i]["Rate"], CommFun.datatypes.vartypenumeric));
                                    dr["PartRate"] = 0;
                                }
                                dr["Qty"] = Convert.ToDecimal(CommFun.IsNullCheck(ds.Tables[0].Rows[i]["Qty"], CommFun.datatypes.vartypenumeric));
                                dr["Type"] = CommFun.IsNullCheck(ds.Tables[0].Rows[i]["BillType"], CommFun.datatypes.vartypestring).ToString();
                                dr["MType"] = CommFun.IsNullCheck(ds.Tables[0].Rows[i]["MType"], CommFun.datatypes.vartypestring).ToString();
                                dr["TypeId"] = Convert.ToInt32(CommFun.IsNullCheck(ds.Tables[0].Rows[i]["TypeId"], CommFun.datatypes.vartypenumeric));
                                dr["RateType"] = CommFun.IsNullCheck(ds.Tables[0].Rows[i]["RateType"], CommFun.datatypes.vartypestring).ToString();

                                dtF.Rows.Add(dr);

                            }
                        }
                        if (ds.Tables.Count > 1)
                        {
                            for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                            {
                                dr = dtF.NewRow();

                                dr["RowId"] = Convert.ToInt32(CommFun.IsNullCheck(ds.Tables[1].Rows[i]["RowId"], CommFun.datatypes.vartypenumeric));
                                dr["ResourceId"] = Convert.ToInt32(CommFun.IsNullCheck(ds.Tables[1].Rows[i]["ResourceId"], CommFun.datatypes.vartypenumeric));
                                dr["IOW_ID"] = Convert.ToInt32(CommFun.IsNullCheck(ds.Tables[1].Rows[i]["IOW_ID"], CommFun.datatypes.vartypenumeric));
                                dr["ResourceCode"] = CommFun.IsNullCheck(ds.Tables[1].Rows[i]["ResourceCode"], CommFun.datatypes.vartypestring).ToString();
                                dr["Description"] = CommFun.IsNullCheck(ds.Tables[1].Rows[i]["Description"], CommFun.datatypes.vartypestring).ToString();
                                dr["DetSpec"] = CommFun.IsNullCheck(ds.Tables[0].Rows[i]["DetSpec"], CommFun.datatypes.vartypestring).ToString();
                                dr["AnalysisHeadId"] = 0;
                                dr["Unit"] = CommFun.IsNullCheck(ds.Tables[1].Rows[i]["Unit"], CommFun.datatypes.vartypestring).ToString();
                                dr["FullRate"] = Convert.ToDecimal(CommFun.IsNullCheck(ds.Tables[1].Rows[i]["FullRate"], CommFun.datatypes.vartypenumeric));
                                dr["PerPart"] = Convert.ToDecimal(CommFun.IsNullCheck(ds.Tables[1].Rows[i]["PerPart"], CommFun.datatypes.vartypenumeric));

                                if (CommFun.IsNullCheck(ds.Tables[1].Rows[i]["PartRate"], CommFun.datatypes.vartypestring).ToString() == "True")
                                {
                                    dr["Rate"] = Convert.ToDecimal(CommFun.IsNullCheck(ds.Tables[1].Rows[i]["Rate"], CommFun.datatypes.vartypenumeric));
                                    dr["PartRate"] = 1;
                                }
                                else
                                {
                                    dr["Rate"] = Convert.ToDecimal(CommFun.IsNullCheck(ds.Tables[1].Rows[i]["Rate"], CommFun.datatypes.vartypenumeric));
                                    dr["PartRate"] = 0;
                                }
                                dr["Qty"] = Convert.ToDecimal(CommFun.IsNullCheck(ds.Tables[1].Rows[i]["Qty"], CommFun.datatypes.vartypenumeric));
                                dr["Type"] = CommFun.IsNullCheck(ds.Tables[1].Rows[i]["BillType"], CommFun.datatypes.vartypestring).ToString();
                                dr["MType"] = CommFun.IsNullCheck(ds.Tables[0].Rows[i]["MType"], CommFun.datatypes.vartypestring).ToString();
                                dr["TypeId"] = Convert.ToInt32(CommFun.IsNullCheck(ds.Tables[1].Rows[i]["TypeId"], CommFun.datatypes.vartypenumeric));
                                dr["RateType"] = CommFun.IsNullCheck(ds.Tables[1].Rows[i]["RateType"], CommFun.datatypes.vartypestring).ToString();

                                dtF.Rows.Add(dr);

                            }
                        }

                    }

            }
            catch(Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {

            }
            return dtF;
        }

        public DataTable GetIssueMaterials(int argCCId, int argContId, DateTime argDate, int argWORegId)
        {

            //SqlConnection conn;
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();

            string sWORegId = "";
            if (argWORegId != 0) { sWORegId = CommFun.GetAmendWORegIdNew(argWORegId, BsfGlobal.g_WPMDB); }

            try
            {
                sSql = "Select A.IssueTransId,A.ResourceId,B.Resource_Name Component_Name,B.Resource_Code Code,D.Unit_Name,A.IssueQty-A.RecQty Qty,A.IssueRate Rate,C.IssueNo,C.IssueDate from [" + BsfGlobal.g_sMMSDBName + "].dbo.IssueTrans A " +
                    "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource B On A.ResourceId=B.Resource_Id And TypeID=2 " +
                    "Inner Join [" + BsfGlobal.g_sMMSDBName + "].dbo.IssueRegister C on A.IssueRegisterId = C.IssueRegisterId  " +
                    "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM D on B.Unit_Id = D.Unit_Id  " +
                    "Where C.CostCentreId = " + argCCId + " And C.ContractorId = " + argContId + " " +
                    "And A.FReeOrCharge='C' and A.IssueQty-A.RecQty>0 and C.Approve='Y' and IssueDate < = '" + argDate.ToString("dd-MMM-yyyy") + "'";
                if (sWORegId != "") { sSql = sSql + " and WORegisterId in (" + sWORegId + ")"; }
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {

            }
            return dt;
        }

        public void UpdateBillFormat(BillFormatMaster arfTDSM, string argType)
        {
            SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();          
            SqlCommand cmd;         
            string sSql = "";
            string sFType = "B";

            if (arfTDSM.CCId == 0)
            {
                sFType = "A";
            }

            try
            {
                if (argType == "B")
                {
                    sSql = "Update BillFormat Set HeadingName= '" + arfTDSM.Heading + "', " +
                   "Formula = '" + arfTDSM.Formula + "', AccountId = " + arfTDSM.AccountId + ",FormatType='"+sFType+"' " +
                   "Where TypeId= " + arfTDSM.BFTypeId + " and CostCentreId = " + arfTDSM.CCId + "";
                }
                else
                {
                    sSql = "Update LabourFormatTrans Set HeadingName= '" + arfTDSM.Heading + "', " +
                  "Formula = '" + arfTDSM.Formula + "', AccountId = " + arfTDSM.AccountId + " " +
                  "Where TypeId= " + arfTDSM.BFTypeId + " and CostCentreId = " + arfTDSM.CCId + "";
                }
                cmd = new SqlCommand(sSql, conn,tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();


                tran.Commit();
            }
            catch (Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
        }

        private int GetAccBillRegId(int argRefId)
        {
            string sSql = "";
            int getBRegId = 0;
            SqlCommand cmd;      
           BsfGlobal.OpenWPMDB();

            try
            {
                sSql = "Select BillRegisterId From ["+BsfGlobal.g_sFaDBName+"].dbo.BillRegister Where ReferenceID=" + argRefId;                
                cmd = new SqlCommand(sSql,   BsfGlobal.g_WPMDB);
                getBRegId = Convert.ToInt32(CommFun.IsNullCheck(cmd.ExecuteScalar(),CommFun.datatypes.vartypenumeric));

            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return getBRegId;
        }

        public void InsertBillReportDetails(DataTable argDt)
        {
            SqlConnection conn;
            conn = new SqlConnection();
            conn = BsfGlobal.OpenWPMDB();
            SqlTransaction tran = conn.BeginTransaction();
            SqlCommand cmd;
            string sSql = "";
            int iHeader=0;

            try
            {
                 sSql = "Truncate Table TempBillReportDetails" ;
                cmd = new SqlCommand(sSql, conn, tran);
                cmd.ExecuteNonQuery();
                cmd.Dispose();

                for (int u = 0; u < argDt.Rows.Count; u++)
                {
                    iHeader= Convert.ToInt32((Convert.ToBoolean(CommFun.IsNullCheck(argDt.Rows[u]["BAbsHeader"].ToString(), CommFun.datatypes.varTypeBoolean))==true)?1:0);

                    sSql = "INSERT INTO TempBillReportDetails (BRegId,BAbsTypeId,BAbsType,BRefNo,Bsign,BAbsAmt,BAbsAccName " +
                    ",BAbsHeader,BAbsOrderNo,BTransId,BTransCode,BTransUnit,BTransSpec,BTransQty,BTransRate,BTransAmt " +
                    ",BLbrItemCode,BLbrItemName,BLbrItemQty,BLbrItemRate,BLbrItemAmt,BTransIOWCode,BTransIOWSpec,BTransIOWQty " +
                    ",BTransIOWRate,BTransIOWAmt,BTransAnalysis,BMatCode,BMatUnit,BMatSpec,BMatQty,BMatRate,BMatAmt,BLbrType " +
                    ",BLbrQty,BLbrRate,BLbrAmt,SlNo,Description,No1,No2,Length,Breadth,Depth,MsrQty,msrSign) " +
                    "VALUES  (" + CommFun.IsNullCheck(argDt.Rows[u]["BRegId"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BAbsTypeId"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BAbsType"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BRefNo"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["Bsign"].ToString(), CommFun.datatypes.vartypestring) + "'," +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BAbsAmt"].ToString(), CommFun.datatypes.vartypestring) + ", " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BAbsaccName"].ToString(), CommFun.datatypes.vartypestring) + "'," +
                                    " " + iHeader + ", " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BAbsorderNo"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BTransId"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BTransCode"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BTransUnit"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BTransSpec"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BTransQty"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BTransRate"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BTransAmt"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BLbrItemCode"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BLbrItemName"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BLbrItemQty"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BLbrItemRate"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BLbrItemAmt"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BTransIOWCode"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BTransIOWSpec"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BTransIOWQty"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BTransIOWRate"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BTransIOWamt"].ToString(), CommFun.datatypes.vartypenumeric) + ", " +
                                    "'" + CommFun.IsNullCheck(argDt.Rows[u]["BTransAnalysis"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BMatCode"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BMatUnit"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BMatSpec"].ToString(), CommFun.datatypes.vartypestring) + "', " +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BMatQty"].ToString(), CommFun.datatypes.vartypenumeric) + "," +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BMatRate"].ToString(), CommFun.datatypes.vartypenumeric) + "," +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BMatAmt"].ToString(), CommFun.datatypes.vartypenumeric) + "," +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["BLbrType"].ToString(), CommFun.datatypes.vartypestring) + "'," +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BLbrQty"].ToString(), CommFun.datatypes.vartypenumeric) + "," +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BLbrRate"].ToString(), CommFun.datatypes.vartypenumeric) + "," +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["BLbrAmt"].ToString(), CommFun.datatypes.vartypenumeric) + "," +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["SlNo"].ToString(), CommFun.datatypes.vartypestring) + "'," +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["Description"].ToString(), CommFun.datatypes.vartypestring) + "'," +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["No1"].ToString(), CommFun.datatypes.vartypenumeric) + "," +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["No2"].ToString(), CommFun.datatypes.vartypenumeric) + "," +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["Length"].ToString(), CommFun.datatypes.vartypenumeric) + "," +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["Breadth"].ToString(), CommFun.datatypes.vartypenumeric) + "," +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["Depth"].ToString(), CommFun.datatypes.vartypenumeric) + "," +
                                    " " + CommFun.IsNullCheck(argDt.Rows[u]["Qty"].ToString(), CommFun.datatypes.vartypenumeric) + "," +
                                    " '" + CommFun.IsNullCheck(argDt.Rows[u]["sign"].ToString(), CommFun.datatypes.vartypestring) + "' ) ";
                    cmd = new SqlCommand(sSql, conn, tran);
                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                }                    
                

                tran.Commit();
            }
            catch (Exception ex)
            {
                tran.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
        }


        public DataTable GetQualifierType()
        {            
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                sSql = "Select QualTypeId ID,QualTypeName Name from [" + BsfGlobal.g_sRateAnalDBName + "].dbo.QualifierType";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        public void UpdateTDSUpdateToFAService()
        {
            BsfGlobal.Get_ServerDate();
            SqlConnection conn  = new SqlConnection();
            conn = BsfGlobal.OpenWorkFlowDB();
            SqlTransaction trans = conn.BeginTransaction();

            try
            {

                DateTime dSBDate = BsfGlobal.g_dServerDateTime;
                int iBillRegId = 0;
                int iRegId=0;
                decimal dBillAmount = 0;
                int iServiceTypeId = 0;
                int iCompanyId=0;
                int iQualId = 0;
                decimal dAmount = 0;
                int iMQualId = 0;
                int iQualSubLedgerId = 0;
                int iQualAccountId = 0;
                decimal dQAmount = 0;
                decimal dQGross = 0;
                int iStateId = 0;
                string sDBName = "";
                DataTable dtSerTax;

                string sSql = "SELECT A.SBRegisterId,A.SBDate,A.BillAmount,A.NettAmount,B.ServiceTypeId,A.KeyNo,C.CompanyId,D.StateId FROM [" + BsfGlobal.g_sWPMDBName + "].dbo.SBRegister A " +
                              "INNER JOIN [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster B on A.ContractorId=B.VendorId " +
                              "INNER JOIN [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre C on A.CostCentreId=C.CostCentreId " +
                              "INNER JOIN [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CompanyMaster D on C.CompanyId=D.CompanyId " +
                              "Where A.KeyNo<>0";
                SqlCommand cmd = new SqlCommand(sSql, conn, trans);
                SqlDataReader sdr = cmd.ExecuteReader();
                DataTable dt = new DataTable();
                dt.Load(sdr);
                sdr.Dispose();
                cmd.Dispose();

                for (int j = 0; j < dt.Rows.Count; j++)
                {
                    iRegId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["SBRegisterId"], CommFun.datatypes.vartypenumeric));
                    dSBDate = Convert.ToDateTime(CommFun.IsNullCheck(dt.Rows[j]["SBDate"], CommFun.datatypes.VarTypeDate));
                    dBillAmount = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[j]["NettAmount"], CommFun.datatypes.vartypenumeric));
                    dAmount = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[j]["BillAmount"], CommFun.datatypes.vartypenumeric));
                    iServiceTypeId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["ServiceTypeId"], CommFun.datatypes.vartypenumeric));
                    iBillRegId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["KeyNo"], CommFun.datatypes.vartypenumeric));
                    iCompanyId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["CompanyId"], CommFun.datatypes.vartypenumeric));
                    iStateId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["StateId"], CommFun.datatypes.vartypenumeric));

                    int iFYearId = FAUpdate.GetFAYearId(iCompanyId, dSBDate, conn, trans);
                    if (iFYearId != 0)
                    {
                        sDBName = FAUpdate.GetDBName(iFYearId, conn, trans);
                        if (BsfGlobal.CheckDBFound(sDBName,conn,trans) == true)
                        {

                            sSql = "Delete from [" + sDBName + "].dbo.TDSBillTrans Where BillRegisterId = " + iBillRegId + " and BillType = 'SB'";
                            cmd = new SqlCommand(sSql, conn, trans);
                            cmd.ExecuteNonQuery();
                            cmd.Dispose();

                            sSql = "SELECT A.QualifierId,A.AddLessFlag,A.Amount GrossAmt,A.ExpPer,A.ExpPerValue,A.SurPer SurCharge,A.SurValue,A.EDPer EDCess," +
                                   "A.EDValue,A.HEDCess,A.HEDValue,A.Amount NetAmt,A.AccountId,A.Type,A.NetPer,B.QualTypeId " +
                                   "FROM [" + BsfGlobal.g_sWPMDBName + "].dbo.SBCompQual A " +
                                   "INNER JOIN [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Qualifier_Temp B ON A.QualifierId=B.QualifierId " +
                                   "WHERE A.ExpPerValue<>0 AND A.RegisterId= " + iRegId + " and B.QualTypeId =1";

                            cmd = new SqlCommand(sSql, conn, trans);
                            sdr = cmd.ExecuteReader();
                            dtSerTax = new DataTable();
                            dtSerTax.Load(sdr);
                            sdr.Dispose();

                            decimal dRate = 0;

                            for (int i = 0; i < dtSerTax.Rows.Count; i++)
                            {
                                iQualId = Convert.ToInt32(dtSerTax.Rows[i]["QualifierId"]);
                                iMQualId = FAUpdate.GetQualId(iQualId, conn, trans);

                                dRate = Convert.ToDecimal(dtSerTax.Rows[i]["NetPer"]);
                                iQualSubLedgerId = FAUpdate.GetTaxSubLedger(iMQualId, iStateId, dRate, iServiceTypeId, conn, trans);
                                iQualAccountId = Convert.ToInt32(CommFun.IsNullCheck(dtSerTax.Rows[i]["AccountId"], CommFun.datatypes.vartypenumeric));

                                dQAmount = Convert.ToDecimal(dtSerTax.Rows[i]["NetAmt"]);
                                dQGross = dAmount;


                                if (dQAmount != 0)
                                {
                                    if (Convert.ToInt32(dtSerTax.Rows[i]["QualTypeId"]) == 1)
                                    {
                                        sSql = "INSERT INTO [" + sDBName + "].dbo.TDSBillTrans(BillRegisterId,BillAmount,GrossAmount,TDSAmount,AccountId,SubLedgerId,BillType,TDSRate,SurRate,SurAmount,EDRate,EDAmount,HEDRate,HEDAmount,TDSNetRate,TDSNetAmount,RemitId,Converted) " +
                                                "VALUES (" + iBillRegId + "," + dBillAmount + "," + dQGross + ", " + Convert.ToDecimal(dtSerTax.Rows[i]["ExpPerValue"]) + "," + iQualAccountId + "," + iQualSubLedgerId + ",'SB'," + Convert.ToDecimal(dtSerTax.Rows[i]["ExpPer"]) + "," +
                                                "" + Convert.ToDecimal(dtSerTax.Rows[i]["SurCharge"]) + "," + Convert.ToDecimal(dtSerTax.Rows[i]["SurValue"]) + "," + Convert.ToDecimal(dtSerTax.Rows[i]["EDCess"]) + "," + Convert.ToDecimal(dtSerTax.Rows[i]["EDValue"]) + "," +
                                                "" + Convert.ToDecimal(dtSerTax.Rows[i]["HEDCess"]) + "," + Convert.ToDecimal(dtSerTax.Rows[i]["EDValue"]) + "," + Convert.ToDecimal(dtSerTax.Rows[i]["NetPer"]) + "," + dQAmount + ",0,'N') ";
                                        cmd = new SqlCommand(sSql, conn, trans);
                                        cmd.ExecuteNonQuery();
                                        cmd.Dispose();
                                    }
                                }

                            }
                            dtSerTax.Dispose();
                        }
                    }
                }
                dt.Dispose();

                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
        }


        public void UpdateTDSUpdateToFAHire()
        {
            BsfGlobal.Get_ServerDate();
            SqlConnection conn = new SqlConnection();
            conn = BsfGlobal.OpenWorkFlowDB();
            SqlTransaction trans = conn.BeginTransaction();

            try
            {

                DateTime dSBDate = BsfGlobal.g_dServerDateTime;
                int iBillRegId = 0;
                int iRegId = 0;
                decimal dBillAmount = 0;
                int iServiceTypeId = 0;
                int iCompanyId = 0;
                int iQualId = 0;
                decimal dAmount = 0;
                int iMQualId = 0;
                int iQualSubLedgerId = 0;
                int iQualAccountId = 0;
                decimal dQAmount = 0;
                decimal dQGross = 0;
                int iStateId = 0;
                string sDBName = "";
                DataTable dtSerTax;

                string sSql = "SELECT A.HOBillRegisterId,A.EDate,A.BaseAmount BillAmount,A.BillAmount NettAmount,B.ServiceTypeId,A.KeyNo,C.CompanyId,D.StateId FROM [" + BsfGlobal.g_sWPMDBName + "].dbo.HOBillRegister A " +
                              "INNER JOIN [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster B on A.ContractorId=B.VendorId " +
                              "INNER JOIN [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre C on A.CostCentreId=C.CostCentreId " +
                              "INNER JOIN [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CompanyMaster D on C.CompanyId=D.CompanyId " +
                              "Where A.KeyNo<>0";
                SqlCommand cmd = new SqlCommand(sSql, conn, trans);
                SqlDataReader sdr = cmd.ExecuteReader();
                DataTable dt = new DataTable();
                dt.Load(sdr);
                sdr.Dispose();
                cmd.Dispose();

                for (int j = 0; j < dt.Rows.Count; j++)
                {
                    iRegId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["HOBillRegisterId"], CommFun.datatypes.vartypenumeric));
                    dSBDate = Convert.ToDateTime(CommFun.IsNullCheck(dt.Rows[j]["EDate"], CommFun.datatypes.VarTypeDate));
                    dBillAmount = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[j]["NettAmount"], CommFun.datatypes.vartypenumeric));
                    dAmount = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[j]["BillAmount"], CommFun.datatypes.vartypenumeric));
                    iServiceTypeId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["ServiceTypeId"], CommFun.datatypes.vartypenumeric));
                    iBillRegId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["KeyNo"], CommFun.datatypes.vartypenumeric));
                    iCompanyId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["CompanyId"], CommFun.datatypes.vartypenumeric));
                    iStateId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["StateId"], CommFun.datatypes.vartypenumeric));

                    int iFYearId = FAUpdate.GetFAYearId(iCompanyId, dSBDate, conn, trans);
                    if (iFYearId != 0)
                    {
                        sDBName = FAUpdate.GetDBName(iFYearId, conn, trans);
                        if (BsfGlobal.CheckDBFound(sDBName, conn, trans) == true)
                        {

                            sSql = "Delete from [" + sDBName + "].dbo.TDSBillTrans Where BillRegisterId = " + iBillRegId + " and BillType = 'HB'";
                            cmd = new SqlCommand(sSql, conn, trans);
                            cmd.ExecuteNonQuery();
                            cmd.Dispose();


                            sSql = "SELECT A.QualifierId,A.Add_Less_Flag AddLessFlag,A.Amount GrossAmt,A.ExpPer,A.ExpPerValue,A.SurCharge SurCharge,A.SurValue,A.EDCess EDCess," +
                                   "A.EDValue,A.HEDCess,A.HEDValue,A.Amount NetAmt,A.AccountId,A.Type,A.NetPer,B.QualTypeId " +
                                   "FROM [" + BsfGlobal.g_sWPMDBName + "].dbo.HOBillRate_Q A " +
                                   "INNER JOIN [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Qualifier_Temp B ON A.QualifierId=B.QualifierId " +
                                   "WHERE A.ExpPerValue<>0 AND A.HOBillRegisterId= " + iRegId + "  and B.QualTypeId=1";

                            cmd = new SqlCommand(sSql, conn, trans);
                            sdr = cmd.ExecuteReader();
                            dtSerTax = new DataTable();
                            dtSerTax.Load(sdr);
                            sdr.Dispose();

                            decimal dRate = 0;

                            for (int i = 0; i < dtSerTax.Rows.Count; i++)
                            {
                                iQualId = Convert.ToInt32(dtSerTax.Rows[i]["QualifierId"]);
                                iMQualId = FAUpdate.GetQualId(iQualId, conn, trans);

                                dRate = Convert.ToDecimal(dtSerTax.Rows[i]["NetPer"]);
                                iQualSubLedgerId = FAUpdate.GetTaxSubLedger(iMQualId, iStateId, dRate, iServiceTypeId, conn, trans);
                                iQualAccountId = Convert.ToInt32(CommFun.IsNullCheck(dtSerTax.Rows[i]["AccountId"], CommFun.datatypes.vartypenumeric));

                                dQAmount = Convert.ToDecimal(dtSerTax.Rows[i]["NetAmt"]);
                                dQGross = dAmount;


                                if (dQAmount != 0)
                                {
                                    if (Convert.ToInt32(dtSerTax.Rows[i]["QualTypeId"]) == 1)
                                    {
                                       sSql = "INSERT INTO [" + sDBName + "].dbo.TDSBillTrans(BillRegisterId,BillAmount,GrossAmount,TDSAmount,AccountId,SubLedgerId,BillType,TDSRate,SurRate,SurAmount,EDRate,EDAmount,HEDRate,HEDAmount,TDSNetRate,TDSNetAmount,RemitId,Converted) " +
                                              "VALUES (" + iBillRegId + "," + dBillAmount + "," + dQGross + ", " + Convert.ToDecimal(dtSerTax.Rows[i]["ExpPerValue"]) + "," + iQualAccountId + "," + iQualSubLedgerId + ",'HB'," + Convert.ToDecimal(dtSerTax.Rows[i]["ExpPer"]) + "," +
                                              "" + Convert.ToDecimal(dtSerTax.Rows[i]["SurCharge"]) + "," + Convert.ToDecimal(dtSerTax.Rows[i]["SurValue"]) + "," + Convert.ToDecimal(dtSerTax.Rows[i]["EDCess"]) + "," + Convert.ToDecimal(dtSerTax.Rows[i]["EDValue"]) + "," +
                                              "" + Convert.ToDecimal(dtSerTax.Rows[i]["HEDCess"]) + "," + Convert.ToDecimal(dtSerTax.Rows[i]["EDValue"]) + "," + Convert.ToDecimal(dtSerTax.Rows[i]["NetPer"]) + "," + dQAmount + ",0,'N') ";
                                        cmd = new SqlCommand(sSql, conn, trans);
                                        cmd.ExecuteNonQuery();
                                        cmd.Dispose();
                                    }
                                }

                            }
                            dtSerTax.Dispose();
                        }
                    }
                }
                dt.Dispose();

                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
        }


        public void UpdateTDSUpdateToFAWorkBill()
        {
            BsfGlobal.Get_ServerDate();

            SqlConnection conn = new SqlConnection();
            conn = BsfGlobal.OpenWorkFlowDB();
            SqlTransaction trans = conn.BeginTransaction();

            try
            {

                DateTime dSBDate = BsfGlobal.g_dServerDateTime;
                int iBillRegId = 0;
                int iRegId = 0;
                //decimal dBillAmount = 0;
                int iServiceTypeId = 0;
                int iCompanyId = 0;
              
                decimal dAmount = 0;
                int iStateId = 0;
                string sDBName = "";

                string sSql = "SELECT A.BillRegisterId,A.EDate,A.BillAmount,B.ServiceTypeId,A.KeyNo,C.CompanyId,D.StateId FROM [" + BsfGlobal.g_sWPMDBName + "].dbo.BillRegister A " +
                              "INNER JOIN [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster B on A.ContractorId=B.VendorId " +
                              "INNER JOIN [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre C on A.CostCentreId=C.CostCentreId " +
                              "INNER JOIN [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.CompanyMaster D on C.CompanyId=D.CompanyId " +
                              "Where A.KeyNo<>0";
                SqlCommand cmd = new SqlCommand(sSql, conn, trans);
                SqlDataReader sdr = cmd.ExecuteReader();
                DataTable dt = new DataTable();
                dt.Load(sdr);
                sdr.Dispose();
                cmd.Dispose();

                for (int j = 0; j < dt.Rows.Count; j++)
                {
                    iRegId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["BillRegisterId"], CommFun.datatypes.vartypenumeric));
                    dSBDate = Convert.ToDateTime(CommFun.IsNullCheck(dt.Rows[j]["EDate"], CommFun.datatypes.VarTypeDate));
                    dAmount = Convert.ToDecimal(CommFun.IsNullCheck(dt.Rows[j]["BillAmount"], CommFun.datatypes.vartypenumeric));
                    iServiceTypeId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["ServiceTypeId"], CommFun.datatypes.vartypenumeric));
                    iBillRegId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["KeyNo"], CommFun.datatypes.vartypenumeric));
                    iCompanyId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["CompanyId"], CommFun.datatypes.vartypenumeric));
                    iStateId = Convert.ToInt32(CommFun.IsNullCheck(dt.Rows[j]["StateId"], CommFun.datatypes.vartypenumeric));


                    int iFYearId = FAUpdate.GetFAYearId(iCompanyId, dSBDate, conn, trans);
                    if (iFYearId != 0)
                    {
                        sDBName = FAUpdate.GetDBName(iFYearId, conn, trans);
                        if (BsfGlobal.CheckDBFound(sDBName, conn, trans) == true)
                        {

                            sSql = "Delete from [" + sDBName + "].dbo.TDSBillTrans Where BillRegisterId = " + iBillRegId + " and BillType = 'WB'";
                            cmd = new SqlCommand(sSql, conn, trans);
                            cmd.ExecuteNonQuery();
                            cmd.Dispose();


                            sSql = "INSERT INTO [" + sDBName + "].dbo.TDSBillTrans (BillRegisterId,BillAmount,GrossAmount,TDSRate,TDSAmount, " +
                                    "SurRate,SurAmount,EDRate,EDAmount,HEDRate,HEDAmount,TDSNetRate,TDSNetAmount,AccountId,BillType,SubLedgerId) " +
                                    "SELECT " + iBillRegId + "," + dAmount + ", GrossAmt,TDSPer,TDSAmt,SurPer,SurAmt,EDPer,EDAmt,HEDPer,HEDAmt,NetPer,TDSNetAmt, " +
                                    "AccountId,'WB',SubLedgerId FROM [" + BsfGlobal.g_sWPMDBName + "].dbo.TDSBillFormatTrans WHERE GrossAmt<>0 AND BillRegisterId = " + iRegId;
                            cmd = new SqlCommand(sSql, conn, trans);
                            cmd.ExecuteNonQuery();
                            cmd.Dispose();
                        }
                    }
                }
                dt.Dispose();

                trans.Commit();
            }
            catch (Exception ex)
            {
                trans.Rollback();
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }
        }


        public DataTable GetQualifierWork(int argQTypeId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            string sSql = "";
            BsfGlobal.OpenWPMDB();
            try
            {
                sSql = "Select QualifierId ID,QualifierName Name from [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Qualifier_Temp where QualType='W'";
                if (argQTypeId != 0) { sSql = sSql + " and QualTypeId = " + argQTypeId; }
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }


        internal static DataTable Get_RateHistory(int argCCId, DateTime argFrmDate, DateTime argToDate, int argRevId, string argBType, string argDBName)
        {
            SqlDataAdapter sda;
            DataTable dt = new DataTable();
            string sSql = "";
            DataTable dtP = new DataTable();
            BsfGlobal.OpenWPMDB();


            string frmdat = string.Format("{0:dd MMM yyyy}", argFrmDate);
            string tdat = string.Format("{0:dd MMM yyyy}", argToDate.AddDays(1));

            try
            {
                if (argBType == "A" || argBType == "L")
                {
                    sSql = "Select B.EDate,B.VNo,C.VendorName,O.CostCentreName,D.Resource_Code Code,D.Resource_Name Description,A.MUnitId Unit,A.Qty,A.Rate,A.Amount from BillTrans A " +
                            "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId " +
                            "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster C on B.ContractorID=C.VendorId " +
                            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre O on B.CostCentreId=O.CostCentreId " +
                            "Left Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource D on A.Comp_Id=D.Resource_Id " +
                            "Where A.BillType In('" + argBType + "') and B.EDate between '" + frmdat + "' and '" + tdat + "'";

                    if (argCCId != 0) { sSql = sSql + " and B.CostCentreId = " + argCCId; }
                    sSql = sSql + " ORDER BY B.EDate";
                }
                else
                {
                    sSql = "Select B.EDate,B.VNo,C.VendorName,O.CostCentreName,D.RefSerialNo Code, D.Specification Description,A.MUnitId Unit,A.Qty,A.Rate,A.Amount from BillTrans A " +
                            "Inner Join BillRegister B on A.BillRegisterId=B.BillRegisterId and B.CostCentreId = " + argCCId + " " +
                            "Left Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster C on B.ContractorID=C.VendorId " +
                            "Left Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.OperationalCostCentre O on B.CostCentreId=O.CostCentreId " +
                            "Left Join [" + argDBName + "].dbo.Project_IOW D on A.IOW_Id=D.Project_IOW_Id " +
                            "Where A.BillType In('" + argBType + "') and B.EDate between '" + frmdat + "' and '" + tdat + "' and B.CostCentreId = " + argCCId + " ORDER BY B.EDate";
                }
                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();
                BsfGlobal.g_WPMDB.Close();

            }
            catch (SqlException ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            return dt;
        }


        public DataTable Advance(int argCCId, DateTime argDate)
        {
            string sSql = "";
           // SqlDataAdapter sda;
            //DataTable dt = null;
            BsfGlobal.OpenWPMDB();
            DataTable dtAdvance = new DataTable();
            string date = string.Format("{0:dd MMM yyyy}", argDate);
            try
            {
                dtAdvance.Columns.Add("VendorId", typeof(int));
                dtAdvance.Columns.Add("VendorName", typeof(string));
                dtAdvance.Columns.Add("WorkOrder", typeof(decimal));
                dtAdvance.Columns.Add("Billed", typeof(decimal));
                dtAdvance.Columns.Add("UnBilled", typeof(decimal));
                dtAdvance.Columns.Add("MobAdvance", typeof(decimal));
                dtAdvance.Columns.Add("AdvancePaid", typeof(decimal));
                dtAdvance.Columns.Add("TotalAdvance", typeof(decimal));
                dtAdvance.Columns.Add("AdvanceDeduct", typeof(decimal));
                dtAdvance.Columns.Add("Balance", typeof(decimal));
                dtAdvance.Columns.Add("Retention", typeof(decimal));
                //dtAdvance.Columns.Add("Eligible", typeof(decimal));
                

                //try
                //{

                //DataRow dRow = dtAdvance.NewRow();
                
                //dRow["WorkOrder"] = 0;
                //dRow["Billed"] = 0;
                //dRow["MobAdvance"] = 0;
                //dRow["AdvancePaid"] = 0;
                //dRow["TotalAdvance"] = 0;
                //dRow["AdvanceDeduct"] = 0;
                //dRow["Balance"] = 0;
                //dRow["Eligible"] = 0;
                //dRow["PrevAmount"] = 0;


                //if (argWORegId != 0)
                //{
                //    sWORegId = CommFun.GetAmendWORegIdNew(argWORegId, BsfGlobal.g_WPMDB);
                //}

                SqlCommand cmd;
                SqlDataReader sdr;
                //DataTable dtW;


                sSql = "Select ContractorId,Sum(Amount) Amount from WORegister Where  Costcentreid=" + argCCId + " and Approve='Y' and LiveWO=0 and WODate <= '" + date + "' Group by ContractorId";
                DataTable dtWorkOrder = new DataTable();
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                sdr = cmd.ExecuteReader();
                dtWorkOrder.Load(sdr);
                sdr.Close();
                cmd.Dispose();


                sSql = "Select C.ContractorId, Sum(A.Value) Amount from WOPaymentTermsNew  A " +
                      "Inner Join [" + BsfGlobal.g_sWorkFlowDBName + "].dbo.TermsMaster B on A.TermsId=B.TermsId  " +
                      "Inner Join WOREgister C on A.WOREgisterId=C.WORegisterId " +
                      "Where C.Costcentreid=" + argCCId + " and C.Approve='Y' and B.TermType='W' and B.Title ='Advance' and C.WODate <= '" + date + "' Group by ContractorId";

                DataTable dtMob = new DataTable();
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                sdr = cmd.ExecuteReader();
                dtMob.Load(sdr);
                sdr.Close();
                cmd.Dispose();

                
                
                sSql = "Select B.ContractorId,Sum(A.Amount) Amount from BillFormatTrans A " +
                      "Inner Join BillRegister B on A.BillRegisterId = B.BillRegisterId " +
                      "Inner Join BillFormatMaster C on A.TypeId = C.TypeId " +
                      "Where C.AddType=1 and A.Add_Less_Flag='+' and C.FormatTypeId in (1,4) and B.CostCentreId = " + argCCId + " and B.EDate <= '" + date + "' Group by B.ContractorId";
                
                DataTable dtBill = new DataTable();
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                sdr = cmd.ExecuteReader();
                dtBill.Load(sdr);
                sdr.Close();
                cmd.Dispose();

                sSql = "Select B.ContractorId, Sum(A.Amount) Amount from DPETrans A " +
                       "Inner Join DPERegister B on A.DPERegisterId=B.DPERegisterId " +
                       "Where B.CostCentreId=" + argCCId + " and B.Edate <= '" + date + "' and Approve='Y' and ConvertBill=0 Group by B.ContractorId";
                DataTable dtUnBill = new DataTable();
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                sdr = cmd.ExecuteReader();
                dtUnBill.Load(sdr);
                sdr.Close();
                cmd.Dispose();




                sSql = "Select B.ContractorId,Sum(A.Amount) Amount from BillFormatTrans A " +
                        "Inner Join BillRegister B on A.BillRegisterId = B.BillRegisterId " +
                        "Inner Join BillFormatMaster C on A.TypeId = C.TypeId " +
                        "Where C.AddType=1 and A.Add_Less_Flag='+' and C.FormatTypeId in (9,12,13) and B.CostCentreId = " + argCCId + " and B.EDate <= '" + date + "' Group by B.ContractorId";


                DataTable dtAdvanceP = new DataTable();
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                sdr = cmd.ExecuteReader();
                dtAdvanceP.Load(sdr);
                sdr.Close();
                cmd.Dispose();

                sSql = "Select B.ContractorId,Sum(A.Amount) Amount from BillFormatTrans A " +
                        "Inner Join BillRegister B on A.BillRegisterId = B.BillRegisterId " +
                        "Inner Join BillFormatMaster C on A.TypeId = C.TypeId " +
                        "Where C.AddType=0 and A.Add_Less_Flag='-' and C.FormatTypeId in (9,12,13) and B.CostCentreId = " + argCCId + " and B.EDate <= '" + date + "' Group by B.ContractorId";


                DataTable dtAdvanceD = new DataTable();
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                sdr = cmd.ExecuteReader();
                dtAdvanceD.Load(sdr);
                sdr.Close();
                cmd.Dispose();



                sSql = "Select B.ContractorId,Sum(Case when C.AddType=1 then A.Amount else A.Amount*-1 end) Amount from BillFormatTrans A " +
                       "Inner Join BillRegister B on A.BillRegisterId = B.BillRegisterId " +
                       "Inner Join BillFormatMaster C on A.TypeId = C.TypeId " +
                       "Where C.FormatTypeId in (10) and B.CostCentreId = " + argCCId + " and B.EDate <= '" + date + "' Group by B.ContractorId";
                DataTable dtRetention = new DataTable();
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                sdr = cmd.ExecuteReader();
                dtRetention.Load(sdr);
                sdr.Close();
                cmd.Dispose();

                DataView dv;

                DataTable dtVendor = new DataTable();
                sSql = "Select Distinct G.ContractorId,C.VendorName from (Select ContractorId from WORegister Where CostCentreId = " + argCCId + " and WODate <= '" + date + "' " +
                       "Union all Select ContractorId from BillRegister Where CostCentreId = " + argCCId + " and EDate < '" + date + "') G " +
                       "Inner Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster C on G.ContractorId = C.VendorId";
                cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                dtVendor = new DataTable();
                sdr = cmd.ExecuteReader();
                dtVendor.Load(sdr);
                sdr.Close();
                cmd.Dispose();

                int iVendorId = 0;
                for (int i = 0; i < dtVendor.Rows.Count; i++)
                {
                    DataRow dRow = dtAdvance.NewRow();
                    iVendorId = Convert.ToInt32(dtVendor.Rows[i]["ContractorId"]);
                    dRow["VendorId"] = iVendorId;
                    dRow["VendorName"] = dtVendor.Rows[i]["VendorName"].ToString();

                    dv = new DataView(dtWorkOrder);
                    dv.RowFilter = "ContractorId = " + iVendorId;
                    if (dv.ToTable().Rows.Count > 0)
                    {
                        dRow["WorkOrder"] = Convert.ToDecimal(CommFun.IsNullCheck(dv.ToTable().Rows[0]["Amount"], CommFun.datatypes.vartypenumeric));
                    }
                    dv.Dispose();

                    dv = new DataView(dtMob);
                    dv.RowFilter = "ContractorId = " + iVendorId;
                    if (dv.ToTable().Rows.Count > 0)
                    {
                        dRow["MobAdvance"] = Convert.ToDecimal(CommFun.IsNullCheck(dv.ToTable().Rows[0]["Amount"], CommFun.datatypes.vartypenumeric));
                    }
                    dv.Dispose();


                    dv = new DataView(dtBill);
                    dv.RowFilter = "ContractorId = " + iVendorId;
                    if (dv.ToTable().Rows.Count > 0)
                    {
                        dRow["Billed"] = Convert.ToDecimal(CommFun.IsNullCheck(dv.ToTable().Rows[0]["Amount"], CommFun.datatypes.vartypenumeric));
                    }
                    dv.Dispose();

                    dv = new DataView(dtUnBill);
                    dv.RowFilter = "ContractorId = " + iVendorId;
                    if (dv.ToTable().Rows.Count > 0)
                    {
                        dRow["UnBilled"] = Convert.ToDecimal(CommFun.IsNullCheck(dv.ToTable().Rows[0]["Amount"], CommFun.datatypes.vartypenumeric));
                    }
                    dv.Dispose();

                    dv = new DataView(dtAdvanceP);
                    dv.RowFilter = "ContractorId = " + iVendorId;
                    if (dv.ToTable().Rows.Count > 0)
                    {
                        dRow["AdvancePaid"] = Convert.ToDecimal(CommFun.IsNullCheck(dv.ToTable().Rows[0]["Amount"], CommFun.datatypes.vartypenumeric));
                    }
                    dv.Dispose();

                    dv = new DataView(dtAdvanceD);
                    dv.RowFilter = "ContractorId = " + iVendorId;
                    if (dv.ToTable().Rows.Count > 0)
                    {
                        dRow["AdvanceDeduct"] = Convert.ToDecimal(CommFun.IsNullCheck(dv.ToTable().Rows[0]["Amount"], CommFun.datatypes.vartypenumeric));
                    }
                    dv.Dispose();

                    dRow["TotalAdvance"] = Convert.ToDecimal(CommFun.IsNullCheck(dRow["MobAdvance"],CommFun.datatypes.vartypenumeric)) + Convert.ToDecimal(CommFun.IsNullCheck(dRow["AdvancePaid"],CommFun.datatypes.vartypenumeric));
                    dRow["Balance"] = Convert.ToDecimal(CommFun.IsNullCheck(dRow["TotalAdvance"],CommFun.datatypes.vartypenumeric)) - Convert.ToDecimal(CommFun.IsNullCheck(dRow["AdvanceDeduct"],CommFun.datatypes.vartypenumeric));

                    dv = new DataView(dtRetention);
                    dv.RowFilter = "ContractorId = " + iVendorId;
                    if (dv.ToTable().Rows.Count > 0)
                    {
                        dRow["Retention"] = Convert.ToDecimal(CommFun.IsNullCheck(dv.ToTable().Rows[0]["Amount"], CommFun.datatypes.vartypenumeric));
                    }
                    dv.Dispose();

                    dtAdvance.Rows.Add(dRow);
                }
            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dtAdvance;
        }

        public DataTable Get_CMR(int argCCId, DateTime argDate, string argDBName, int argRevId)
        {
            SqlDataAdapter sda;
            DataTable dt = null;
            DataTable dtTrans = null;
            SqlCommand cmd;
            SqlDataReader sdr;
            string sSql = "";
            string date = string.Format("{0:dd MMM yyyy}", argDate);
            BsfGlobal.OpenWPMDB();
            try
            {
                sSql = "Select B.ContractorId,C.VendorName, A.ResourceId,D.Resource_Code,D.Resource_Name,E.Unit_Name,cast(0 as Decimal(18,5)) WorkDoneQty, sum(A.IssueQty) IssueQty,cast(0 as Decimal(18,5)) DifferenceInQty,cast(0 as Decimal(18,3)) DifferenceInPercentage from [" + BsfGlobal.g_sMMSDBName + "].dbo.IssueTrans A " +
                            "Inner Join [" + BsfGlobal.g_sMMSDBName + "].dbo.IssueRegister B on A.IssueRegisterId=B.IssueRegisterId " +
                            "Inner Join [" + BsfGlobal.g_sVendorDBName + "].dbo.VendorMaster C on B.ContractorId=C.VendorId " +
                            "Inner Join [" + BsfGlobal.g_sRateAnalDBName + "].dbo.Resource D on A.ResourceId=D.Resource_Id " +
                            "Left Join  [" + BsfGlobal.g_sRateAnalDBName + "].dbo.UOM E on D.Unit_Id=E.Unit_Id " +
                            "Where B.contractorID >0 and B.CostCentreId = " + argCCId + "  and IssueDate <= '" + date + "' " +
                            "Group by B.ContractorId,C.VendorName, A.ResourceId,D.Resource_Code,D.Resource_Name,E.Unit_Name";

                sda = new SqlDataAdapter(sSql, BsfGlobal.g_WPMDB);
                dt = new DataTable();
                sda.Fill(dt);
                sda.Dispose();


                foreach (DataRow drow in dt.Rows)
                {
                    sSql = "Select A.Resource_Id,Sum(Case When B.Qtty <>0 then (A.Qtty/B.Qtty)*H.Qty else 0 end) Qty from [" + argDBName + "].dbo.Project_DetailsC A " +
                              "Inner Join [" + argDBName + "].dbo.IOWC B On A.ProjIOWID=B.ProjIOWID " +
                              "Join (Select G.IOWID,Sum(G.Qty) as Qty from " +
                              "(Select A.IOWID,A.Qty from IOWTrans A " +
                              "Inner Join BillRegister B on A.ReferenceId=B.BillRegisterId  " +
                              "Where A.TransType='B' and A.CostCentreId =  " + argCCId + " and B.ContractorId=" + Convert.ToInt32(drow["ContractorId"]) + " and B.EDate<= '" + date + "' " +
                              "Union All  " +
                              "Select A.IOWID,A.Qty from IOWTrans A " +
                              "Inner Join DPERegister B on A.ReferenceId=B.DPERegisterId " +
                              "Where A.TransType='D' and A.CostCentreId =  " + argCCId + " and ConvertBill=0 and B.ContractorId=" + Convert.ToInt32(drow["ContractorId"]) + " and B.EDate<= '" + date + "' ) G " +
                              "Group by G.IOWID) H on A.ProjIOWID=H.IOWId " +
                              "Where A.Revision_Id=" + argRevId + " and A.Resource_Id=" + Convert.ToInt32(drow["ResourceId"]) + " " +
                              "group by A.Resource_Id";


                    cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
                    sdr = cmd.ExecuteReader();
                    dtTrans = new DataTable();
                    dtTrans.Load(sdr);
                    sdr.Close();
                    cmd.Dispose();
                    if (dtTrans.Rows.Count > 0)
                    {
                        drow["WorkDoneQty"] = Convert.ToDecimal(CommFun.IsNullCheck(dtTrans.Rows[0]["Qty"], CommFun.datatypes.vartypenumeric));
                    }

                    if (Convert.ToDecimal(CommFun.IsNullCheck(drow["WorkDoneQty"], CommFun.datatypes.vartypenumeric)) != 0)
                    {
                        drow["DifferenceInQty"] = Convert.ToDecimal(CommFun.IsNullCheck(drow["WorkDoneQty"], CommFun.datatypes.vartypenumeric)) - Convert.ToDecimal(CommFun.IsNullCheck(drow["IssueQty"], CommFun.datatypes.vartypenumeric));
                        drow["DifferenceInPercentage"] = Convert.ToDecimal(CommFun.IsNullCheck(drow["DifferenceInQty"], CommFun.datatypes.vartypenumeric)) / Convert.ToDecimal(CommFun.IsNullCheck(drow["WorkDoneQty"], CommFun.datatypes.vartypenumeric));
                    }

                }


            }
            catch (Exception ex)
            {
                BsfGlobal.CustomException(ex.Message, ex.StackTrace);
            }
            finally
            {
                BsfGlobal.g_WPMDB.Close();
            }
            return dt;
        }

        public bool CheckVendorWOBill(string argBillNo, int argRegId, int argVendorId)
        {
            bool bFound = false;

            BsfGlobal.OpenWPMDB();
            string sSql = "Select BillRegisterId from BillRegister Where BillNo='" + argBillNo + "' and ContractorId=" + argVendorId + " and BillRegisterID <> " + argRegId;
            SqlCommand cmd = new SqlCommand(sSql, BsfGlobal.g_WPMDB);
            SqlDataReader dr = cmd.ExecuteReader();
            DataTable dt = new DataTable();
            dt.Load(dr);
            dr.Close();
            cmd.Dispose();

            if (dt.Rows.Count > 0) { bFound = true; }

            BsfGlobal.g_WPMDB.Close();
            return bFound;
        }


        #endregion
    }
}

